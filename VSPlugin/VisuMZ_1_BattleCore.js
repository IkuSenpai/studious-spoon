//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.83;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.83] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x588453=_0x2039;(function(_0x1bdd7b,_0x2e9cd4){const _0x3b4dd3=_0x2039,_0x908ac6=_0x1bdd7b();while(!![]){try{const _0x3f3c33=-parseInt(_0x3b4dd3(0x4cb))/0x1*(-parseInt(_0x3b4dd3(0x22d))/0x2)+-parseInt(_0x3b4dd3(0x61e))/0x3+-parseInt(_0x3b4dd3(0x8fa))/0x4*(-parseInt(_0x3b4dd3(0x7c9))/0x5)+-parseInt(_0x3b4dd3(0x272))/0x6*(parseInt(_0x3b4dd3(0xaef))/0x7)+-parseInt(_0x3b4dd3(0x328))/0x8*(-parseInt(_0x3b4dd3(0x813))/0x9)+-parseInt(_0x3b4dd3(0x3a8))/0xa+-parseInt(_0x3b4dd3(0x491))/0xb;if(_0x3f3c33===_0x2e9cd4)break;else _0x908ac6['push'](_0x908ac6['shift']());}catch(_0x30f4ed){_0x908ac6['push'](_0x908ac6['shift']());}}}(_0x4cda,0x6b0b2));function _0x2039(_0x4796c7,_0x337904){const _0x4cda45=_0x4cda();return _0x2039=function(_0x2039c8,_0xf48bd9){_0x2039c8=_0x2039c8-0xc3;let _0x22b3e3=_0x4cda45[_0x2039c8];return _0x22b3e3;},_0x2039(_0x4796c7,_0x337904);}var label=_0x588453(0x39a),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x588453(0x38d)](function(_0x55369e){const _0x252c81=_0x588453;return _0x55369e['status']&&_0x55369e['description'][_0x252c81(0x51e)]('['+label+']');})[0x0];VisuMZ[label][_0x588453(0x90d)]=VisuMZ[label][_0x588453(0x90d)]||{},VisuMZ['ConvertParams']=function(_0x522f2d,_0x4fd599){const _0xa893ab=_0x588453;for(const _0x50cf55 in _0x4fd599){if(_0x50cf55[_0xa893ab(0x809)](/(.*):(.*)/i)){const _0x3e08f5=String(RegExp['$1']),_0x58f9e2=String(RegExp['$2'])[_0xa893ab(0x3c2)]()[_0xa893ab(0x4f2)]();let _0xc6ee3e,_0x558844,_0x4df111;switch(_0x58f9e2){case _0xa893ab(0x4c0):_0xc6ee3e=_0x4fd599[_0x50cf55]!==''?Number(_0x4fd599[_0x50cf55]):0x0;break;case'ARRAYNUM':_0x558844=_0x4fd599[_0x50cf55]!==''?JSON['parse'](_0x4fd599[_0x50cf55]):[],_0xc6ee3e=_0x558844[_0xa893ab(0x89e)](_0x20837d=>Number(_0x20837d));break;case _0xa893ab(0xa61):_0xc6ee3e=_0x4fd599[_0x50cf55]!==''?eval(_0x4fd599[_0x50cf55]):null;break;case _0xa893ab(0x79c):_0x558844=_0x4fd599[_0x50cf55]!==''?JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55]):[],_0xc6ee3e=_0x558844[_0xa893ab(0x89e)](_0x36bc4e=>eval(_0x36bc4e));break;case'JSON':_0xc6ee3e=_0x4fd599[_0x50cf55]!==''?JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55]):'';break;case'ARRAYJSON':_0x558844=_0x4fd599[_0x50cf55]!==''?JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55]):[],_0xc6ee3e=_0x558844[_0xa893ab(0x89e)](_0x5159a3=>JSON[_0xa893ab(0x709)](_0x5159a3));break;case _0xa893ab(0xd0):_0xc6ee3e=_0x4fd599[_0x50cf55]!==''?new Function(JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55])):new Function(_0xa893ab(0x86f));break;case _0xa893ab(0x7ed):_0x558844=_0x4fd599[_0x50cf55]!==''?JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55]):[],_0xc6ee3e=_0x558844[_0xa893ab(0x89e)](_0x475d00=>new Function(JSON['parse'](_0x475d00)));break;case _0xa893ab(0xaf0):_0xc6ee3e=_0x4fd599[_0x50cf55]!==''?String(_0x4fd599[_0x50cf55]):'';break;case _0xa893ab(0xa86):_0x558844=_0x4fd599[_0x50cf55]!==''?JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55]):[],_0xc6ee3e=_0x558844[_0xa893ab(0x89e)](_0x54c338=>String(_0x54c338));break;case'STRUCT':_0x4df111=_0x4fd599[_0x50cf55]!==''?JSON['parse'](_0x4fd599[_0x50cf55]):{},_0x522f2d[_0x3e08f5]={},VisuMZ[_0xa893ab(0x5f6)](_0x522f2d[_0x3e08f5],_0x4df111);continue;case'ARRAYSTRUCT':_0x558844=_0x4fd599[_0x50cf55]!==''?JSON[_0xa893ab(0x709)](_0x4fd599[_0x50cf55]):[],_0xc6ee3e=_0x558844[_0xa893ab(0x89e)](_0x447232=>VisuMZ[_0xa893ab(0x5f6)]({},JSON[_0xa893ab(0x709)](_0x447232)));break;default:continue;}_0x522f2d[_0x3e08f5]=_0xc6ee3e;}}return _0x522f2d;},(_0x49b3ec=>{const _0x5d5be9=_0x588453,_0xc07a64=_0x49b3ec[_0x5d5be9(0x4cf)];for(const _0xd4ee4a of dependencies){if(!Imported[_0xd4ee4a]){alert(_0x5d5be9(0x750)['format'](_0xc07a64,_0xd4ee4a)),SceneManager[_0x5d5be9(0x163)]();break;}}const _0x341da2=_0x49b3ec[_0x5d5be9(0x673)];if(_0x341da2[_0x5d5be9(0x809)](/\[Version[ ](.*?)\]/i)){const _0x56ed9b=Number(RegExp['$1']);_0x56ed9b!==VisuMZ[label][_0x5d5be9(0x4ec)]&&(alert(_0x5d5be9(0xa12)[_0x5d5be9(0x4a9)](_0xc07a64,_0x56ed9b)),SceneManager[_0x5d5be9(0x163)]());}if(_0x341da2[_0x5d5be9(0x809)](/\[Tier[ ](\d+)\]/i)){const _0x21f093=Number(RegExp['$1']);_0x21f093<tier?(alert(_0x5d5be9(0x60a)[_0x5d5be9(0x4a9)](_0xc07a64,_0x21f093,tier)),SceneManager[_0x5d5be9(0x163)]()):tier=Math['max'](_0x21f093,tier);}VisuMZ[_0x5d5be9(0x5f6)](VisuMZ[label]['Settings'],_0x49b3ec['parameters']);})(pluginData),VisuMZ[_0x588453(0xa11)]=function(_0x10d5d6){const _0x2dc402=_0x588453;let _0x244282=[];for(const _0x2c341e of _0x10d5d6){_0x244282=_0x244282[_0x2dc402(0x6e2)](VisuMZ[_0x2dc402(0x640)](_0x2c341e));}return _0x244282[_0x2dc402(0x38d)](_0x2a5b74=>_0x2a5b74);},VisuMZ[_0x588453(0x640)]=function(_0x4cfbf4){const _0x313bb7=_0x588453,_0x2515b4=BattleManager[_0x313bb7(0x872)]()['filter'](_0x18555e=>_0x18555e&&_0x18555e['isAppeared']()),_0x28cad4=BattleManager[_0x313bb7(0x5a9)],_0xe85531=BattleManager[_0x313bb7(0x4fb)],_0x427acf=BattleManager[_0x313bb7(0x99a)]?BattleManager[_0x313bb7(0x99a)][_0x313bb7(0x19b)](0x0):_0x2515b4;_0x4cfbf4=_0x4cfbf4[_0x313bb7(0x939)]()['trim']();if(_0x4cfbf4===_0x313bb7(0xa48))return[_0x28cad4];else{if(_0x4cfbf4==='current\x20target')return[_0xe85531];else{if(_0x4cfbf4==='prev\x20target'){if(_0xe85531){const _0x118829=_0x427acf['indexOf'](_0xe85531);return _0x118829>=0x0?[_0x427acf[_0x118829-0x1]||_0xe85531]:[_0xe85531];}}else{if(_0x4cfbf4==='text\x20target'){if(_0xe85531){const _0x2f80c1=_0x427acf[_0x313bb7(0x512)](_0xe85531);return _0x2f80c1>=0x0?[_0x427acf[_0x2f80c1+0x1]||_0xe85531]:[_0xe85531];}}else{if(_0x4cfbf4===_0x313bb7(0x7e2))return _0x427acf;else{if(_0x4cfbf4===_0x313bb7(0x49f))return[_0x28cad4]['concat'](_0x427acf);else{if(_0x4cfbf4===_0x313bb7(0x3c7))return _0x2515b4[_0x313bb7(0x38d)](_0x39d44e=>_0x39d44e!==_0x28cad4&&!_0x427acf[_0x313bb7(0x51e)](_0x39d44e)&&_0x39d44e['notFocusValid']());else{if(_0x4cfbf4===_0x313bb7(0x333))return[VisuMZ[_0x313bb7(0x9ab)]()];else{if(_0x4cfbf4[_0x313bb7(0x809)](/SPECIAL (.*)>/i)){const _0x2b435a=String(RegExp['$1'])['split'](',')[_0x313bb7(0x89e)](_0x4ab054=>_0x4ab054[_0x313bb7(0x4f2)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x2b435a)];}}}}}}}}}if(_0x28cad4){if(_0x4cfbf4===_0x313bb7(0x440))return _0x28cad4[_0x313bb7(0x6f5)]()['aliveMembers']();else{if(_0x4cfbf4===_0x313bb7(0x626))return _0x28cad4[_0x313bb7(0x6f5)]()[_0x313bb7(0x157)]()['filter'](_0x840939=>_0x840939!==_0x28cad4);else{if(_0x4cfbf4===_0x313bb7(0x4d0))return _0x28cad4['friendsUnit']()[_0x313bb7(0x157)]()[_0x313bb7(0x38d)](_0x3e5b49=>_0x3e5b49!==_0xe85531);else{if(_0x4cfbf4===_0x313bb7(0x9a3))return _0x28cad4[_0x313bb7(0x6f5)]()[_0x313bb7(0x14f)]();else{if(_0x4cfbf4[_0x313bb7(0x809)](/FRIEND INDEX (\d+)/i)){const _0x4bed4d=Number(RegExp['$1']);return[_0x28cad4[_0x313bb7(0x6f5)]()[_0x313bb7(0x425)]()[_0x4bed4d]];}}}}}if(_0x4cfbf4===_0x313bb7(0x730))return _0x28cad4['opponentsUnit']()['aliveMembers']();else{if(_0x4cfbf4===_0x313bb7(0x6d7))return _0x28cad4[_0x313bb7(0x6c0)]()['aliveMembers']()[_0x313bb7(0x38d)](_0x296945=>_0x296945!==_0xe85531);else{if(_0x4cfbf4===_0x313bb7(0x7c8))return _0x28cad4[_0x313bb7(0x6c0)]()[_0x313bb7(0x14f)]();else{if(_0x4cfbf4[_0x313bb7(0x809)](/OPPONENT INDEX (\d+)/i)){const _0x128c0d=Number(RegExp['$1']);return[_0x28cad4['opponentsUnit']()[_0x313bb7(0x425)]()[_0x128c0d]];}}}}}if(_0x4cfbf4===_0x313bb7(0x837))return $gameParty[_0x313bb7(0x157)]();else{if(_0x4cfbf4==='alive\x20actors\x20not\x20user')return $gameParty[_0x313bb7(0x157)]()[_0x313bb7(0x38d)](_0x59cb9a=>_0x59cb9a!==_0x28cad4);else{if(_0x4cfbf4==='alive\x20actors\x20not\x20target')return $gameParty[_0x313bb7(0x157)]()[_0x313bb7(0x38d)](_0x185147=>_0x185147!==_0xe85531);else{if(_0x4cfbf4===_0x313bb7(0x97c))return $gameParty[_0x313bb7(0x14f)]();else{if(_0x4cfbf4[_0x313bb7(0x809)](/ACTOR INDEX (\d+)/i)){const _0x5e130c=Number(RegExp['$1']);return[$gameParty[_0x313bb7(0x425)]()[_0x5e130c]];}else{if(_0x4cfbf4[_0x313bb7(0x809)](/ACTOR ID (\d+)/i)){const _0x1947ad=Number(RegExp['$1']);return[$gameActors[_0x313bb7(0x112)](_0x1947ad)];}}}}}}if(_0x4cfbf4==='alive\x20enemies')return $gameTroop['aliveMembers']();else{if(_0x4cfbf4===_0x313bb7(0x5bd))return $gameTroop['aliveMembers']()['filter'](_0x161de1=>_0x161de1!==_0x28cad4);else{if(_0x4cfbf4==='alive\x20enemies\x20not\x20target')return $gameTroop[_0x313bb7(0x157)]()[_0x313bb7(0x38d)](_0x4ab4b5=>_0x4ab4b5!==_0xe85531);else{if(_0x4cfbf4===_0x313bb7(0x851))return $gameTroop['deadMembers']();else{if(_0x4cfbf4[_0x313bb7(0x809)](/ENEMY INDEX (\d+)/i)){const _0x14226f=Number(RegExp['$1']);return[$gameTroop[_0x313bb7(0x425)]()[_0x14226f]];}else{if(_0x4cfbf4[_0x313bb7(0x809)](/ENEMY ID (\d+)/i)){const _0x334ccd=Number(RegExp['$1']);return $gameTroop[_0x313bb7(0x157)]()[_0x313bb7(0x38d)](_0x3e890b=>_0x3e890b['enemyId']()===_0x334ccd);}}}}}}if(_0x4cfbf4===_0x313bb7(0xa28))return _0x2515b4[_0x313bb7(0x38d)](_0x178c7a=>_0x178c7a[_0x313bb7(0x610)]());else{if(_0x4cfbf4==='alive\x20battlers\x20not\x20user')return _0x2515b4[_0x313bb7(0x38d)](_0x3c77bd=>_0x3c77bd[_0x313bb7(0x610)]()&&_0x3c77bd!==_0x28cad4);else{if(_0x4cfbf4===_0x313bb7(0x313))return _0x2515b4[_0x313bb7(0x38d)](_0x19b51c=>_0x19b51c[_0x313bb7(0x610)]()&&_0x19b51c!==_0xe85531);else{if(_0x4cfbf4===_0x313bb7(0x138))return _0x2515b4['filter'](_0x3321ec=>_0x3321ec[_0x313bb7(0x8c6)]());}}}return[];},VisuMZ['GetActionSequenceSpecialTarget']=function(){const _0x28c130=_0x588453;return BattleManager[_0x28c130(0x4fb)];},VisuMZ[_0x588453(0x3eb)]=function(_0x596f2a){const _0x54bed6=_0x588453;return BattleManager[_0x54bed6(0x4fb)];},PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Set_SetupAction',_0x2d59b0=>{const _0x4b0812=_0x588453;if(!SceneManager[_0x4b0812(0x8b8)]())return;VisuMZ[_0x4b0812(0x5f6)](_0x2d59b0,_0x2d59b0);const _0x3f829b=$gameTemp[_0x4b0812(0x26a)](),_0x18e260=BattleManager['_action'],_0x78e1a8=BattleManager[_0x4b0812(0x5a9)],_0xb516a6=BattleManager[_0x4b0812(0x99a)]?BattleManager[_0x4b0812(0x99a)][_0x4b0812(0x19b)](0x0):[],_0x3ae383=BattleManager['_logWindow'];if(!_0x3f829b||!_0x18e260||!_0x78e1a8)return;if(!_0x18e260[_0x4b0812(0x343)]())return;if(_0x2d59b0[_0x4b0812(0x7f7)])_0x3ae383[_0x4b0812(0x87b)](_0x78e1a8,_0x18e260[_0x4b0812(0x343)]());_0x2d59b0[_0x4b0812(0x357)]&&_0x3ae383[_0x4b0812(0x2b9)](_0x4b0812(0xe6),_0x78e1a8,_0xb516a6,!![]);if(_0x2d59b0[_0x4b0812(0x44a)])_0x3ae383[_0x4b0812(0x2b9)]('performActionStart',_0x78e1a8,_0x18e260);if(_0x2d59b0[_0x4b0812(0x30c)])_0x3ae383[_0x4b0812(0x2b9)]('waitForMovement');if(_0x2d59b0[_0x4b0812(0x5b0)])_0x3ae383[_0x4b0812(0x2b9)](_0x4b0812(0x4fd),_0x78e1a8,_0x18e260);if(_0x2d59b0[_0x4b0812(0x4f9)])_0x3ae383[_0x4b0812(0x2b9)](_0x4b0812(0x283));_0x3f829b['setWaitMode'](_0x4b0812(0x47f));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Set_WholeActionSet',_0x33ceaf=>{const _0x4d97ff=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4d97ff(0x5f6)](_0x33ceaf,_0x33ceaf);const _0x41236c=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ae5c0=BattleManager['_action'],_0x50a876=BattleManager[_0x4d97ff(0x5a9)],_0x5420ef=BattleManager['_allTargets']?BattleManager[_0x4d97ff(0x99a)][_0x4d97ff(0x19b)](0x0):[],_0x154dd8=BattleManager['_logWindow'],_0x3fa884=_0x33ceaf[_0x4d97ff(0x2da)]??![];if(!_0x41236c||!_0x3ae5c0||!_0x50a876)return;if(!_0x3ae5c0[_0x4d97ff(0x343)]())return;let _0x44f241=_0x3fa884?_0x154dd8[_0x4d97ff(0x271)](_0x50a876):0x1;for(let _0x8eba39=0x0;_0x8eba39<_0x44f241;_0x8eba39++){_0x3fa884&&_0x50a876['isActor']()&&_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0x124),_0x50a876,_0x8eba39);if(_0x33ceaf[_0x4d97ff(0x27f)])_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0xa33),_0x50a876,_0x3ae5c0);if(_0x33ceaf[_0x4d97ff(0xa92)]>0x0)_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0x661),_0x33ceaf['WaitCount']);if(_0x33ceaf[_0x4d97ff(0x5e5)])_0x154dd8['push'](_0x4d97ff(0x6c8),_0x50a876,_0x5420ef,_0x3ae5c0['item']()['animationId']);if(_0x33ceaf['WaitForAnimation'])_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0x283));for(const _0x2ef99a of _0x5420ef){if(!_0x2ef99a)continue;if(_0x33ceaf[_0x4d97ff(0x20a)])_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0xa45),_0x50a876,_0x2ef99a);}}_0x3fa884&&_0x50a876['isActor']()&&_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0x896),_0x50a876);if(_0x33ceaf[_0x4d97ff(0x357)])_0x154dd8[_0x4d97ff(0x2b9)](_0x4d97ff(0xe6),_0x50a876,_0x5420ef,![]);_0x41236c['setWaitMode'](_0x4d97ff(0x47f));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0xa6c),_0x1cfc68=>{const _0x48bd01=_0x588453;if(!SceneManager[_0x48bd01(0x8b8)]())return;VisuMZ['ConvertParams'](_0x1cfc68,_0x1cfc68);const _0x10628b=$gameTemp[_0x48bd01(0x26a)](),_0x4b0f11=BattleManager[_0x48bd01(0x2a8)],_0x50680d=BattleManager['_subject'],_0x21c88e=BattleManager[_0x48bd01(0x99a)]?BattleManager[_0x48bd01(0x99a)]['slice'](0x0):[],_0x5f0870=BattleManager[_0x48bd01(0x944)],_0x1a95b2=_0x1cfc68[_0x48bd01(0x2da)]??![];if(!_0x10628b||!_0x4b0f11||!_0x50680d)return;if(!_0x4b0f11[_0x48bd01(0x343)]())return;let _0x1f7594=_0x1a95b2?_0x5f0870['getDualWieldTimes'](_0x50680d):0x1;for(let _0x46bf98=0x0;_0x46bf98<_0x1f7594;_0x46bf98++){for(const _0x630726 of _0x21c88e){if(!_0x630726)continue;_0x1a95b2&&_0x50680d[_0x48bd01(0xa52)]()&&_0x5f0870[_0x48bd01(0x2b9)]('setActiveWeaponSet',_0x50680d,_0x46bf98);if(_0x1cfc68[_0x48bd01(0x27f)])_0x5f0870[_0x48bd01(0x2b9)]('performAction',_0x50680d,_0x4b0f11);if(_0x1cfc68[_0x48bd01(0x625)]>0x0)_0x5f0870[_0x48bd01(0x2b9)](_0x48bd01(0x661),_0x1cfc68[_0x48bd01(0x625)]);if(_0x1cfc68['ActionAnimation'])_0x5f0870[_0x48bd01(0x2b9)](_0x48bd01(0x6c8),_0x50680d,[_0x630726],_0x4b0f11[_0x48bd01(0x343)]()[_0x48bd01(0x700)]);if(_0x1cfc68['WaitCount2']>0x0)_0x5f0870[_0x48bd01(0x2b9)](_0x48bd01(0x661),_0x1cfc68['WaitCount2']);if(_0x1cfc68[_0x48bd01(0x20a)])_0x5f0870[_0x48bd01(0x2b9)](_0x48bd01(0xa45),_0x50680d,_0x630726);}}_0x1a95b2&&_0x50680d[_0x48bd01(0xa52)]()&&_0x5f0870[_0x48bd01(0x2b9)](_0x48bd01(0x896),_0x50680d);if(_0x1cfc68[_0x48bd01(0x357)])_0x5f0870[_0x48bd01(0x2b9)](_0x48bd01(0xe6),_0x50680d,_0x21c88e,![]);_0x10628b['setWaitMode'](_0x48bd01(0x47f));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x2c5),_0x3df9b0=>{const _0x55065f=_0x588453;if(!SceneManager[_0x55065f(0x8b8)]())return;VisuMZ['ConvertParams'](_0x3df9b0,_0x3df9b0);const _0x4ea422=$gameTemp[_0x55065f(0x26a)](),_0x294862=BattleManager['_action'],_0x52cfdb=BattleManager['_subject'],_0x41090f=BattleManager[_0x55065f(0x99a)]?BattleManager[_0x55065f(0x99a)][_0x55065f(0x19b)](0x0):[],_0x31c5da=BattleManager[_0x55065f(0x944)];if(!_0x4ea422||!_0x294862||!_0x52cfdb)return;if(!_0x294862[_0x55065f(0x343)]())return;if(_0x3df9b0['ApplyImmortal'])_0x31c5da[_0x55065f(0x2b9)](_0x55065f(0xe6),_0x52cfdb,_0x41090f,![]);if(_0x3df9b0['WaitForNewLine'])_0x31c5da[_0x55065f(0x2b9)](_0x55065f(0x8e2));if(_0x3df9b0[_0x55065f(0x4ed)])_0x31c5da[_0x55065f(0x2b9)](_0x55065f(0x4cc));if(_0x3df9b0['ClearBattleLog'])_0x31c5da['push'](_0x55065f(0x399));if(_0x3df9b0[_0x55065f(0x4c3)])_0x31c5da[_0x55065f(0x2b9)](_0x55065f(0x5c3),_0x52cfdb);if(_0x3df9b0[_0x55065f(0x30c)])_0x31c5da[_0x55065f(0x2b9)]('waitForMovement');_0x4ea422['setWaitMode'](_0x55065f(0x47f));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_ChangeAngle',_0x112348=>{const _0x454335=_0x588453;if(!SceneManager[_0x454335(0x8b8)]())return;if(!Imported[_0x454335(0x372)])return;VisuMZ[_0x454335(0x5f6)](_0x112348,_0x112348);const _0x4d90f3=$gameTemp['getLastPluginCommandInterpreter'](),_0x10bb58=_0x112348[_0x454335(0x164)];if(!_0x4d90f3)return;$gameScreen[_0x454335(0x2e1)](_0x112348[_0x454335(0xa5e)],_0x112348['Duration'],_0x112348[_0x454335(0x884)]);if(_0x10bb58)_0x4d90f3[_0x454335(0xa68)](_0x454335(0x239));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Angle_Reset',_0x365311=>{const _0x470694=_0x588453;if(!SceneManager[_0x470694(0x8b8)]())return;if(!Imported[_0x470694(0x372)])return;VisuMZ[_0x470694(0x5f6)](_0x365311,_0x365311);const _0x6606e3=$gameTemp[_0x470694(0x26a)](),_0x48c828=_0x365311[_0x470694(0x164)];if(!_0x6606e3)return;$gameScreen[_0x470694(0x2e1)](0x0,_0x365311[_0x470694(0x84a)],_0x365311[_0x470694(0x884)]);if(_0x48c828)_0x6606e3['setWaitMode'](_0x470694(0x239));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x77f),_0x40e7a1=>{const _0x449de3=_0x588453;if(!SceneManager[_0x449de3(0x8b8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3bd9f6=$gameTemp[_0x449de3(0x26a)]();if(!_0x3bd9f6)return;_0x3bd9f6[_0x449de3(0xa68)]('battleAngle');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Animation_ActionAnimation',_0x325fc0=>{const _0x8b9953=_0x588453;if(!SceneManager[_0x8b9953(0x8b8)]())return;VisuMZ[_0x8b9953(0x5f6)](_0x325fc0,_0x325fc0);const _0x20c94b=$gameTemp[_0x8b9953(0x26a)](),_0x251f98=BattleManager[_0x8b9953(0x2a8)],_0x106576=BattleManager['_subject'],_0xb239a7=VisuMZ[_0x8b9953(0xa11)](_0x325fc0[_0x8b9953(0x77c)]),_0x2128dc=_0x325fc0[_0x8b9953(0x14a)],_0x227048=BattleManager[_0x8b9953(0x944)];if(!_0x20c94b||!_0x251f98||!_0x106576)return;if(!_0x251f98[_0x8b9953(0x343)]())return;let _0x1e75f5=_0x251f98[_0x8b9953(0x343)]()[_0x8b9953(0x700)];if(_0x1e75f5<0x0)_0x1e75f5=_0x106576[_0x8b9953(0x32e)]();$gameTemp['requestAnimation'](_0xb239a7,_0x1e75f5,_0x2128dc),_0x325fc0[_0x8b9953(0x4f9)]&&_0x20c94b[_0x8b9953(0xa68)](_0x8b9953(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x914),_0x23c1e1=>{const _0x31efd5=_0x588453;if(!SceneManager[_0x31efd5(0x8b8)]())return;VisuMZ[_0x31efd5(0x5f6)](_0x23c1e1,_0x23c1e1);const _0xe75c49=$gameTemp['getLastPluginCommandInterpreter'](),_0x2137fb=BattleManager['_subject'],_0x2ab271=VisuMZ[_0x31efd5(0xa11)](_0x23c1e1[_0x31efd5(0x77c)]),_0x2f956d=_0x23c1e1['Mirror'],_0x4ba893=BattleManager['_logWindow'];if(!_0xe75c49||!_0x2137fb)return;const _0x1f4955=_0x2137fb[_0x31efd5(0x32e)]();$gameTemp[_0x31efd5(0x387)](_0x2ab271,_0x1f4955,_0x2f956d),_0x23c1e1[_0x31efd5(0x4f9)]&&_0xe75c49[_0x31efd5(0xa68)](_0x31efd5(0x183));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x3f3),_0x3b299a=>{const _0x3149d7=_0x588453;if(!SceneManager[_0x3149d7(0x8b8)]())return;VisuMZ[_0x3149d7(0x5f6)](_0x3b299a,_0x3b299a);const _0x427e60=_0x57c314[_0x3149d7(0x31d)](_0x3b299a[_0x3149d7(0xc3)]);if(_0x427e60<=0x0)return;const _0x3cf3c9=$gameTemp[_0x3149d7(0x26a)](),_0x57c314=BattleManager['_subject'],_0xd62195=VisuMZ['CreateActionSequenceTargets'](_0x3b299a[_0x3149d7(0x77c)]),_0x2760ee=_0x3b299a['Mirror'],_0x235c13=BattleManager['_logWindow'];if(!_0x3cf3c9||!_0x57c314)return;$gameTemp['requestAnimation'](_0xd62195,_0x427e60,_0x2760ee),_0x3b299a[_0x3149d7(0x4f9)]&&_0x3cf3c9[_0x3149d7(0xa68)](_0x3149d7(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Animation_BalloonAnimation',_0x39b49a=>{const _0x5411eb=_0x588453;if(!SceneManager[_0x5411eb(0x8b8)]())return;VisuMZ[_0x5411eb(0x5f6)](_0x39b49a,_0x39b49a);const _0x1b2378=$gameTemp['getLastPluginCommandInterpreter'](),_0x382035=VisuMZ[_0x5411eb(0xa11)](_0x39b49a[_0x5411eb(0x77c)]),_0x5b4fa2=_0x39b49a[_0x5411eb(0xa0b)];let _0x399419=0x0;switch(_0x5b4fa2[_0x5411eb(0x3c2)]()[_0x5411eb(0x4f2)]()){case'!':case _0x5411eb(0x3ec):_0x399419=0x1;break;case'?':case _0x5411eb(0x5b8):_0x399419=0x2;break;case _0x5411eb(0x1d6):case'NOTE':case _0x5411eb(0x5a3):case'MUSIC-NOTE':case'MUSICNOTE':_0x399419=0x3;break;case _0x5411eb(0x47b):case _0x5411eb(0x5fb):_0x399419=0x4;break;case _0x5411eb(0x7ba):case _0x5411eb(0x674):_0x399419=0x5;break;case _0x5411eb(0x83a):_0x399419=0x6;break;case _0x5411eb(0x1fa):case'ANNOYED':case _0x5411eb(0x991):_0x399419=0x7;break;case _0x5411eb(0x9e3):case _0x5411eb(0x50d):_0x399419=0x8;break;case'LIGHT':case _0x5411eb(0x592):case _0x5411eb(0xef):case'LIGHT-BULB':case _0x5411eb(0x7dd):_0x399419=0x9;break;case'Z':case'ZZ':case'ZZZ':case _0x5411eb(0x5f1):_0x399419=0xa;break;case'USER-DEFINED\x201':_0x399419=0xb;break;case _0x5411eb(0x42a):_0x399419=0xc;break;case _0x5411eb(0x29b):_0x399419=0xd;break;case _0x5411eb(0x3fd):_0x399419=0xe;break;case _0x5411eb(0x981):_0x399419=0xf;break;}for(const _0xa222c6 of _0x382035){if(!_0xa222c6)continue;$gameTemp[_0x5411eb(0x609)](_0xa222c6,_0x399419);}_0x39b49a[_0x5411eb(0x953)]&&_0x1b2378&&(_0x1b2378['wait'](0x1),_0x1b2378[_0x5411eb(0xa68)](_0x5411eb(0x4fc)));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xa6e),_0x2f4166=>{const _0x449a91=_0x588453;if(!SceneManager[_0x449a91(0x8b8)]())return;if(!Imported[_0x449a91(0x9a1)])return;VisuMZ[_0x449a91(0x5f6)](_0x2f4166,_0x2f4166);const _0x18b62e=$gameTemp[_0x449a91(0x26a)](),_0x1a2479=VisuMZ[_0x449a91(0xa11)](_0x2f4166['Targets']),_0x369652=_0x2f4166['IconIndex'];for(const _0x243387 of _0x1a2479){if(!_0x243387)continue;$gameTemp['requestBattleBalloon'](_0x243387,[_0x369652]);}_0x2f4166[_0x449a91(0x953)]&&_0x18b62e&&(_0x18b62e[_0x449a91(0x539)](0x1),_0x18b62e['setWaitMode'](_0x449a91(0x4fc)));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x73e),_0x19b081=>{const _0xd981be=_0x588453;if(!SceneManager[_0xd981be(0x8b8)]())return;if(!Imported[_0xd981be(0x9a1)])return;VisuMZ[_0xd981be(0x5f6)](_0x19b081,_0x19b081);const _0x2c0a47=$gameTemp[_0xd981be(0x26a)](),_0x24cf0f=VisuMZ['CreateActionSequenceTargets'](_0x19b081[_0xd981be(0x77c)]),_0x926277=Math['min'](Number(_0x19b081[_0xd981be(0x3f6)]||0x0),Number(_0x19b081[_0xd981be(0xae8)]||0x0)),_0x441f67=Math[_0xd981be(0x85e)](Number(_0x19b081[_0xd981be(0x3f6)]||0x0),Number(_0x19b081[_0xd981be(0xae8)]||0x0)),_0x3c3f9f=[];for(let _0x5e6f47=_0x926277;_0x5e6f47<=_0x441f67;_0x5e6f47++){_0x3c3f9f[_0xd981be(0x2b9)](_0x5e6f47);}for(const _0x3ca5eb of _0x24cf0f){if(!_0x3ca5eb)continue;$gameTemp[_0xd981be(0x609)](_0x3ca5eb,_0x3c3f9f);}_0x19b081[_0xd981be(0x953)]&&_0x2c0a47&&(_0x2c0a47[_0xd981be(0x539)](0x1),_0x2c0a47[_0xd981be(0xa68)](_0xd981be(0x4fc)));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Animation_BalloonIconSpecific',_0x2f80a4=>{const _0x642271=_0x588453;if(!SceneManager[_0x642271(0x8b8)]())return;if(!Imported[_0x642271(0x9a1)])return;VisuMZ[_0x642271(0x5f6)](_0x2f80a4,_0x2f80a4);const _0x41d5bb=$gameTemp['getLastPluginCommandInterpreter'](),_0x462290=VisuMZ[_0x642271(0xa11)](_0x2f80a4[_0x642271(0x77c)]),_0x3cf146=_0x2f80a4[_0x642271(0x356)];for(const _0x13ed77 of _0x462290){if(!_0x13ed77)continue;$gameTemp['requestBattleBalloon'](_0x13ed77,_0x3cf146);}_0x2f80a4[_0x642271(0x953)]&&_0x41d5bb&&(_0x41d5bb[_0x642271(0x539)](0x1),_0x41d5bb['setWaitMode'](_0x642271(0x4fc)));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Animation_CastAnimation',_0x26708d=>{const _0x1777bd=_0x588453;if(!SceneManager[_0x1777bd(0x8b8)]())return;VisuMZ[_0x1777bd(0x5f6)](_0x26708d,_0x26708d);const _0x1d37e2=$gameTemp[_0x1777bd(0x26a)](),_0x50f89a=BattleManager[_0x1777bd(0x2a8)],_0xd8e26d=_0x26708d[_0x1777bd(0x14a)],_0x545202=VisuMZ[_0x1777bd(0xa11)](_0x26708d[_0x1777bd(0x77c)]);if(!_0x1d37e2||!_0x50f89a)return;if(!_0x50f89a[_0x1777bd(0x343)]())return;for(const _0x35dbac of _0x545202){if(!_0x35dbac)continue;_0x35dbac[_0x1777bd(0x4fd)](_0x50f89a,_0xd8e26d);}if(_0x26708d[_0x1777bd(0x4f9)])_0x1d37e2[_0x1777bd(0xa68)](_0x1777bd(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x499),_0x118865=>{const _0x4264a7=_0x588453;VisuMZ[_0x4264a7(0x5f6)](_0x118865,_0x118865);const _0x3ecd93=$gameTemp[_0x4264a7(0x26a)](),_0x37364c=VisuMZ[_0x4264a7(0xa11)](_0x118865[_0x4264a7(0x77c)]),_0x5662f6=_0x118865['Filename'];if(!_0x5662f6)return;for(const _0x4125fb of _0x37364c){if(!_0x4125fb)continue;if(!_0x4125fb['isActor']())continue;_0x4125fb[_0x4264a7(0x10d)](_0x5662f6);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x59a),_0x2501d7=>{const _0x5c2b1a=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c2b1a(0x5f6)](_0x2501d7,_0x2501d7);const _0x30902b=$gameTemp[_0x5c2b1a(0x26a)](),_0x10915c=BattleManager['_subject'],_0x29769f=VisuMZ['CreateActionSequenceTargets'](_0x2501d7[_0x5c2b1a(0x77c)]),_0x3c71b1=_0x2501d7[_0x5c2b1a(0x14a)];if(!_0x30902b||!_0x10915c)return;const _0x2d1198=$dataSkilles[_0x10915c[_0x5c2b1a(0x9a7)]()],_0x2d921c=_0x2d1198[_0x5c2b1a(0x700)];$gameTemp[_0x5c2b1a(0x387)](_0x29769f,_0x2d921c,_0x3c71b1),_0x2501d7[_0x5c2b1a(0x4f9)]&&_0x30902b[_0x5c2b1a(0xa68)](_0x5c2b1a(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xabd),_0x301755=>{const _0x2fe48c=_0x588453;if(!SceneManager[_0x2fe48c(0x8b8)]())return;VisuMZ['ConvertParams'](_0x301755,_0x301755);const _0x2cbdba=$gameTemp[_0x2fe48c(0x26a)](),_0x1c8408=VisuMZ[_0x2fe48c(0xa11)](_0x301755[_0x2fe48c(0x77c)]),_0x15b2c7=Number(_0x301755[_0x2fe48c(0x95b)]||0x1),_0x41116f=$dataItems[_0x15b2c7],_0x5dc45b=_0x301755[_0x2fe48c(0x14a)];if(!_0x2cbdba)return;if(!_0x41116f)return;let _0x5c3de6=_0x41116f['animationId'];$gameTemp[_0x2fe48c(0x387)](_0x1c8408,_0x5c3de6,_0x5dc45b),_0x301755[_0x2fe48c(0x4f9)]&&_0x2cbdba[_0x2fe48c(0xa68)](_0x2fe48c(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x6dd),_0x496cf0=>{const _0x392c43=_0x588453;if(!SceneManager[_0x392c43(0x39b)])return;if(!SceneManager[_0x392c43(0x39b)]['_spriteset'])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x392c43(0x5f6)](_0x496cf0,_0x496cf0);const _0x2a17bd=$gameTemp[_0x392c43(0x26a)](),_0x503c4d=Math[_0x392c43(0x422)](_0x496cf0[_0x392c43(0x9e5)]),_0x3870a9=Math[_0x392c43(0x422)](_0x496cf0[_0x392c43(0x7e1)]);$gameTemp['requestPointAnimation'](_0x503c4d,_0x3870a9,_0x496cf0[_0x392c43(0x7b3)],_0x496cf0['Mirror'],_0x496cf0['Mute']),_0x496cf0[_0x392c43(0x953)]&&_0x2a17bd&&(SceneManager[_0x392c43(0x39b)][_0x392c43(0x9cf)]['updatePointAnimations'](),_0x2a17bd['setWaitMode'](_0x392c43(0x183)));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x9b1),_0x28d65f=>{const _0x2536f8=_0x588453;if(!SceneManager[_0x2536f8(0x8b8)]())return;VisuMZ[_0x2536f8(0x5f6)](_0x28d65f,_0x28d65f);const _0x1a6aee=$gameTemp[_0x2536f8(0x26a)](),_0x5de93e=VisuMZ['CreateActionSequenceTargets'](_0x28d65f[_0x2536f8(0x77c)]),_0x1e7d6a=_0x28d65f[_0x2536f8(0x7b3)],_0x3cde16=_0x28d65f[_0x2536f8(0x14a)];if(!_0x1a6aee)return;$gameTemp[_0x2536f8(0x387)](_0x5de93e,_0x1e7d6a,_0x3cde16);if(_0x28d65f[_0x2536f8(0x4f9)])_0x1a6aee[_0x2536f8(0xa68)](_0x2536f8(0x183));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x693),_0x212617=>{const _0x20bd9a=_0x588453;if(!SceneManager[_0x20bd9a(0x8b8)]())return;VisuMZ['ConvertParams'](_0x212617,_0x212617);const _0x5b8edb=$gameTemp[_0x20bd9a(0x26a)](),_0x321b0f=VisuMZ['CreateActionSequenceTargets'](_0x212617[_0x20bd9a(0x77c)]),_0x198b0e=Number(_0x212617[_0x20bd9a(0x7b3)])||0x1,_0x201927=_0x212617[_0x20bd9a(0x14a)];if(!_0x5b8edb)return;$gameTemp[_0x20bd9a(0x387)](_0x321b0f,_0x198b0e,_0x201927);if(_0x212617[_0x20bd9a(0x4f9)])_0x5b8edb['setWaitMode'](_0x20bd9a(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x765),_0x368617=>{const _0x12a7be=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x12a7be(0x5f6)](_0x368617,_0x368617);const _0x82f2aa=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ab90b=VisuMZ[_0x12a7be(0xa11)](_0x368617['Targets']),_0x1fa33c=Number(_0x368617['SkillID']||0x1),_0x1adb9d=$dataSkills[_0x1fa33c],_0x4dd696=_0x368617[_0x12a7be(0x14a)];if(!_0x82f2aa)return;if(!_0x1adb9d)return;let _0x1cb667=_0x1adb9d[_0x12a7be(0x700)];$gameTemp[_0x12a7be(0x387)](_0x3ab90b,_0x1cb667,_0x4dd696),_0x368617[_0x12a7be(0x4f9)]&&_0x82f2aa[_0x12a7be(0xa68)](_0x12a7be(0x183));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Animation_WaitForAnimation',_0x49e283=>{const _0x40c659=_0x588453;if(!SceneManager[_0x40c659(0x8b8)]())return;const _0x1db4a7=$gameTemp[_0x40c659(0x26a)]();if(!_0x1db4a7)return;_0x1db4a7[_0x40c659(0xa68)](_0x40c659(0x183));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x5ef),_0x4daeab=>{const _0x608227=_0x588453;if(!SceneManager[_0x608227(0x8b8)]())return;VisuMZ['ConvertParams'](_0x4daeab,_0x4daeab);const _0x354f37=BattleManager['_logWindow'],_0x36846d=_0x4daeab[_0x608227(0x589)]&&Imported['VisuMZ_4_CombatLog'];_0x354f37[_0x608227(0x433)](_0x4daeab['Text']),_0x36846d&&Imported['VisuMZ_4_CombatLog']&&$gameSystem['addTextToCombatLog'](_0x4daeab[_0x608227(0x11f)]||'',_0x4daeab['CombatLogIcon']||0x0);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x29c),_0x379722=>{const _0x305ee6=_0x588453;if(!SceneManager[_0x305ee6(0x8b8)]())return;const _0x5396f2=BattleManager['_logWindow'];_0x5396f2[_0x305ee6(0x399)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x753),_0x5063b7=>{const _0x3d9067=_0x588453;if(!SceneManager['isSceneBattle']())return;const _0x2108a=$gameTemp[_0x3d9067(0x26a)](),_0x5a0537=BattleManager[_0x3d9067(0x2a8)],_0x46667a=BattleManager[_0x3d9067(0x5a9)],_0x51ee09=BattleManager[_0x3d9067(0x944)];if(!_0x2108a||!_0x5a0537||!_0x46667a)return;if(!_0x5a0537[_0x3d9067(0x343)]())return;_0x51ee09[_0x3d9067(0x87b)](_0x46667a,_0x5a0537[_0x3d9067(0x343)]()),_0x2108a[_0x3d9067(0xa68)](_0x3d9067(0x47f));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x72d),_0x3fb9a7=>{const _0x3c48f6=_0x588453;if(!SceneManager[_0x3c48f6(0x8b8)]())return;const _0x5d20b8=BattleManager[_0x3c48f6(0x944)];_0x5d20b8['popBaseLine']();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_BattleLog_PushBaseLine',_0x1f4929=>{const _0x4262a6=_0x588453;if(!SceneManager[_0x4262a6(0x8b8)]())return;const _0x1fdcae=BattleManager[_0x4262a6(0x944)];_0x1fdcae[_0x4262a6(0x102)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x7f2),_0x235e2f=>{const _0xe9c894=_0x588453;if(!SceneManager[_0xe9c894(0x8b8)]())return;const _0x293287=BattleManager[_0xe9c894(0x944)];_0x293287['refresh']();}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_BattleLog_UI',_0x1da374=>{const _0x39b150=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x39b150(0x5f6)](_0x1da374,_0x1da374),SceneManager['_scene']['setVisibleUI'](_0x1da374[_0x39b150(0x40c)]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_BattleLog_WaitForBattleLog',_0x2f1e1b=>{const _0x53604f=_0x588453;if(!SceneManager[_0x53604f(0x8b8)]())return;const _0x5af0e8=$gameTemp[_0x53604f(0x26a)]();_0x5af0e8[_0x53604f(0xa68)](_0x53604f(0x47f));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_BattleLog_WaitForNewLine',_0x5f2c4a=>{const _0x7ea2ae=_0x588453;if(!SceneManager[_0x7ea2ae(0x8b8)]())return;const _0x1c0374=$gameTemp[_0x7ea2ae(0x26a)](),_0x496a03=BattleManager['_logWindow'];_0x496a03[_0x7ea2ae(0x8e2)](),_0x1c0374[_0x7ea2ae(0xa68)](_0x7ea2ae(0x47f));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x4f0),_0x2a8df4=>{const _0xca5992=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xca5992(0x372)])return;VisuMZ[_0xca5992(0x5f6)](_0x2a8df4,_0x2a8df4);const _0x2fe2ec=$gameScreen[_0xca5992(0x706)]();_0x2fe2ec['cameraClamp']=_0x2a8df4[_0xca5992(0x8f4)];}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x415),_0x3b3c2d=>{const _0x46c21a=_0x588453;if(!SceneManager[_0x46c21a(0x8b8)]())return;if(!Imported[_0x46c21a(0x372)])return;VisuMZ[_0x46c21a(0x5f6)](_0x3b3c2d,_0x3b3c2d);const _0x44cb02=$gameTemp[_0x46c21a(0x26a)](),_0x583ec7=_0x3b3c2d[_0x46c21a(0x2a5)];$gameScreen[_0x46c21a(0x1ce)](_0x3b3c2d[_0x46c21a(0x8a0)],_0x3b3c2d[_0x46c21a(0x6be)],_0x3b3c2d[_0x46c21a(0x84a)],_0x3b3c2d[_0x46c21a(0x884)]);if(_0x583ec7)_0x44cb02[_0x46c21a(0xa68)](_0x46c21a(0x666));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x878),_0x3ea45b=>{const _0x4667a0=_0x588453;if(!SceneManager[_0x4667a0(0x8b8)]())return;if(!Imported[_0x4667a0(0x372)])return;VisuMZ[_0x4667a0(0x5f6)](_0x3ea45b,_0x3ea45b);const _0x494745=$gameTemp[_0x4667a0(0x26a)](),_0xba616b=VisuMZ['CreateActionSequenceTargets'](_0x3ea45b['Targets']),_0x34c049=_0x3ea45b[_0x4667a0(0x2a5)];$gameScreen['setBattleCameraTargets'](_0xba616b,_0x3ea45b[_0x4667a0(0x84a)],_0x3ea45b[_0x4667a0(0x884)]);if(_0x34c049)_0x494745[_0x4667a0(0xa68)](_0x4667a0(0x666));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x1ba),_0x4094c1=>{const _0x4a0ae1=_0x588453;if(!SceneManager[_0x4a0ae1(0x8b8)]())return;if(!Imported[_0x4a0ae1(0x372)])return;VisuMZ[_0x4a0ae1(0x5f6)](_0x4094c1,_0x4094c1);const _0x5ed129=$gameTemp[_0x4a0ae1(0x26a)](),_0x8e1dee=_0x4094c1['WaitForCamera'];$gameScreen['setBattleCameraOffset'](_0x4094c1['OffsetX'],_0x4094c1[_0x4a0ae1(0xcb)],_0x4094c1[_0x4a0ae1(0x84a)],_0x4094c1[_0x4a0ae1(0x884)]);if(_0x8e1dee)_0x5ed129['setWaitMode']('battleCamera');}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0xa85),_0x42353f=>{const _0x2c74bb=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2c74bb(0x372)])return;VisuMZ[_0x2c74bb(0x5f6)](_0x42353f,_0x42353f);const _0x1e56ff=$gameTemp[_0x2c74bb(0x26a)](),_0x4c68df=_0x42353f['ResetFocus'],_0x35071c=_0x42353f['ResetOffset'],_0x1938b4=_0x42353f[_0x2c74bb(0x2a5)];if(_0x4c68df){const _0xe3441=Math[_0x2c74bb(0x422)](Graphics[_0x2c74bb(0x3ad)]/0x2),_0x169846=Math[_0x2c74bb(0x422)](Graphics[_0x2c74bb(0x4ba)]/0x2);$gameScreen[_0x2c74bb(0x1ce)](_0xe3441,_0x169846,_0x42353f['Duration'],_0x42353f['EasingType']);}_0x35071c&&$gameScreen[_0x2c74bb(0x1ef)](0x0,0x0,_0x42353f[_0x2c74bb(0x84a)],_0x42353f[_0x2c74bb(0x884)]);if(_0x1938b4)_0x1e56ff['setWaitMode'](_0x2c74bb(0x666));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x9d2),_0x9d0b05=>{const _0x482bb6=_0x588453;if(!SceneManager[_0x482bb6(0x8b8)]())return;if(!Imported[_0x482bb6(0x372)])return;const _0x13891a=$gameTemp[_0x482bb6(0x26a)]();if(!_0x13891a)return;_0x13891a['setWaitMode'](_0x482bb6(0x666));}),VisuMZ[_0x588453(0x39a)][_0x588453(0x53e)]=function(_0xe514c4){const _0x2f52d4=_0x588453;_0xe514c4[_0x2f52d4(0x92d)]='';const _0x5b27ea=VisuMZ[_0x2f52d4(0x430)][_0x2f52d4(0x53e)](_0xe514c4),_0x47a8cd=VisuMZ[_0x2f52d4(0xa11)](_0xe514c4[_0x2f52d4(0x77c)])[0x0]||null;return _0x47a8cd&&(_0x5b27ea[_0x2f52d4(0x92d)]=_0x47a8cd[_0x2f52d4(0x4f5)](),_0x5b27ea[_0x2f52d4(0xa91)]=_0x47a8cd[_0x2f52d4(0x1f5)](),_0x5b27ea[_0x2f52d4(0x4e8)]=_0x47a8cd[_0x2f52d4(0x9fa)](),_0x5b27ea[_0x2f52d4(0x1c4)]=_0x47a8cd['visualCutinPortraitType'](),_0x47a8cd[_0x2f52d4(0x4ad)]()&&(_0x47a8cd['flipVisualCutinHorz']()&&(_0x5b27ea[_0x2f52d4(0x76f)]=!_0x5b27ea['portraitFlipHorz']),_0x47a8cd[_0x2f52d4(0x456)]()&&(_0x5b27ea['portraitFlipVert']=!_0x5b27ea[_0x2f52d4(0x511)]),_0x5b27ea[_0x2f52d4(0x1c4)]===_0x2f52d4(0x718)&&(_0x5b27ea[_0x2f52d4(0x76f)]=!_0x5b27ea[_0x2f52d4(0x76f)]),_0xe514c4[_0x2f52d4(0x28f)]['parallaxScrollXinvertEnemy']&&(_0x5b27ea[_0x2f52d4(0x5bb)]*=-0x1),_0xe514c4[_0x2f52d4(0x28f)][_0x2f52d4(0x8f9)]&&(_0x5b27ea[_0x2f52d4(0x49a)]*=-0x1),_0x5b27ea[_0x2f52d4(0x299)]+=_0xe514c4[_0x2f52d4(0x28f)][_0x2f52d4(0x2a3)]??0x0)),_0x5b27ea;},PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x1d7),_0x19b67f=>{const _0x244833=_0x588453;if(!SceneManager[_0x244833(0x8b8)]())return;if(!Imported[_0x244833(0x8b2)])return;VisuMZ[_0x244833(0x5f6)](_0x19b67f,_0x19b67f);const _0x27d31e=VisuMZ[_0x244833(0x39a)][_0x244833(0x53e)](_0x19b67f);SceneManager[_0x244833(0x39b)][_0x244833(0x3ed)](_0x27d31e);const _0x1e6ae3=$gameTemp[_0x244833(0x26a)]();_0x1e6ae3&&_0x19b67f[_0x244833(0x70c)]&&_0x1e6ae3[_0x244833(0xa68)](_0x244833(0xa54));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x14c),_0x47240a=>{const _0x339f5d=_0x588453;if(!SceneManager[_0x339f5d(0x8b8)]())return;if(!Imported[_0x339f5d(0x8b2)])return;VisuMZ[_0x339f5d(0x5f6)](_0x47240a,_0x47240a),SceneManager['_scene'][_0x339f5d(0x114)]();const _0x48d8df=$gameTemp[_0x339f5d(0x26a)]();_0x48d8df&&_0x47240a['WaitForExit']&&_0x48d8df[_0x339f5d(0xa68)](_0x339f5d(0xa3f));}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x5abb30=>{const _0x55dea8=_0x588453;if(!SceneManager[_0x55dea8(0x8b8)]())return;if(!Imported[_0x55dea8(0x8b2)])return;VisuMZ[_0x55dea8(0x5f6)](_0x5abb30,_0x5abb30);const _0x28ad31=_0x5abb30[_0x55dea8(0xa5f)]['toLowerCase']()[_0x55dea8(0x4f2)]();SceneManager[_0x55dea8(0x39b)][_0x55dea8(0x9b3)](_0x28ad31);const _0x2c7136=$gameTemp[_0x55dea8(0x26a)]();_0x2c7136&&_0x5abb30[_0x55dea8(0x462)]&&_0x2c7136[_0x55dea8(0xa68)]('cutinExit');}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x93d),_0x50f00c=>{const _0x1aee20=_0x588453;if(!SceneManager[_0x1aee20(0x8b8)]())return;if(!Imported[_0x1aee20(0x8b2)])return;const _0x17ad98=$gameTemp[_0x1aee20(0x26a)]();_0x17ad98[_0x1aee20(0xa68)](_0x1aee20(0xa54));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Cutin_WaitForExit',_0x4ac920=>{const _0x113c64=_0x588453;if(!SceneManager[_0x113c64(0x8b8)]())return;if(!Imported[_0x113c64(0x8b2)])return;const _0x18d1d7=$gameTemp[_0x113c64(0x26a)]();_0x18d1d7[_0x113c64(0xa68)]('cutinExit');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_DB_DragonbonesMotionAni',_0x2359b9=>{const _0x5759db=_0x588453;if(!SceneManager[_0x5759db(0x8b8)]())return;if(!Imported[_0x5759db(0x8db)])return;VisuMZ['ConvertParams'](_0x2359b9,_0x2359b9);const _0x319fe9=VisuMZ[_0x5759db(0xa11)](_0x2359b9[_0x5759db(0x77c)]),_0x4567f4=_0x2359b9['MotionAni'][_0x5759db(0x939)]()[_0x5759db(0x4f2)]();for(const _0x7da116 of _0x319fe9){if(!_0x7da116)continue;_0x7da116[_0x5759db(0x361)](_0x4567f4);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x509),_0x33e740=>{const _0x24136f=_0x588453;if(!SceneManager[_0x24136f(0x8b8)]())return;if(!Imported[_0x24136f(0x8db)])return;VisuMZ['ConvertParams'](_0x33e740,_0x33e740);const _0x517fd9=VisuMZ[_0x24136f(0xa11)](_0x33e740[_0x24136f(0x77c)]),_0x4be7e2=_0x33e740[_0x24136f(0x342)];for(const _0x4beaf4 of _0x517fd9){if(!_0x4beaf4)continue;_0x4beaf4[_0x24136f(0x125)]()[_0x24136f(0x984)]=_0x4be7e2;}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x684),_0x5956ff=>{const _0x3ca056=_0x588453;if(!SceneManager[_0x3ca056(0x8b8)]())return;if(!Imported[_0x3ca056(0x846)])return;VisuMZ[_0x3ca056(0x5f6)](_0x5956ff,_0x5956ff);const _0x4e0e20=BattleManager['_action'],_0x5ca950=_0x5956ff[_0x3ca056(0xa93)];if(!_0x4e0e20)return;_0x4e0e20[_0x3ca056(0xaf8)]=_0x5ca950;}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x770),_0x4d2e25=>{const _0x3b007f=_0x588453;if(!SceneManager[_0x3b007f(0x8b8)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x3ec41=BattleManager[_0x3b007f(0x2a8)];if(!_0x3ec41)return;_0x3ec41[_0x3b007f(0x72c)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x7df),_0x1eeb19=>{const _0x4e08ba=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4e08ba(0x846)])return;VisuMZ[_0x4e08ba(0x5f6)](_0x1eeb19,_0x1eeb19);const _0x30cbcc=BattleManager['_action'],_0x1bd739=_0x1eeb19[_0x4e08ba(0xa93)];if(!_0x30cbcc)return;_0x30cbcc[_0x4e08ba(0x2ce)]=_0x1bd739;}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Element_NullElements',_0x89e4b4=>{const _0x22d76e=_0x588453;if(!SceneManager[_0x22d76e(0x8b8)]())return;if(!Imported[_0x22d76e(0x846)])return;const _0x266dba=BattleManager[_0x22d76e(0x2a8)];if(!_0x266dba)return;_0x266dba[_0x22d76e(0x7f8)]=!![];}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0xc8),_0x3ffc2d=>{const _0x762454=_0x588453;VisuMZ[_0x762454(0x9aa)][_0x762454(0xc8)](_0x3ffc2d);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x1dd),_0xe20220=>{const _0x2d5ff0=_0x588453;VisuMZ['BattleGridSystem'][_0x2d5ff0(0x1dd)](_0xe20220);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x6ec),_0x24de70=>{const _0x5d7fc3=_0x588453;VisuMZ[_0x5d7fc3(0x9aa)]['ActSeq_Grid_AddTriggerToNode'](_0x24de70);}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Grid_AddTriggerToNodeJS',_0x23d07f=>{const _0x420aa3=_0x588453;VisuMZ[_0x420aa3(0x9aa)]['ActSeq_Grid_AddTriggerToNode'](_0x23d07f);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x84d),_0x1a3724=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AnimationIDAtNode'](_0x1a3724);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x91b),_0x3d4f14=>{const _0x525de4=_0x588453;VisuMZ[_0x525de4(0x9aa)]['ActSeq_Grid_AnimationJsAtNode'](_0x3d4f14);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x985),_0x5ef7f1=>{const _0x26b205=_0x588453;VisuMZ[_0x26b205(0x9aa)][_0x26b205(0x985)](_0x5ef7f1);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xad6),_0x213287=>{const _0x312af7=_0x588453;VisuMZ[_0x312af7(0x9aa)][_0x312af7(0xad6)](_0x213287);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x1a8),_0x1cd73a=>{const _0x2d50de=_0x588453;VisuMZ[_0x2d50de(0x9aa)][_0x2d50de(0x1a8)](_0x1cd73a);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Grid_PullToTargetNode',_0x3eb53e=>{const _0x26a1ba=_0x588453;VisuMZ['BattleGridSystem'][_0x26a1ba(0x2ec)](_0x3eb53e);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x149),_0x4e7cf4=>{const _0x491a39=_0x588453;VisuMZ[_0x491a39(0x9aa)]['ActSeq_Grid_PushFromTargetNode'](_0x4e7cf4);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x680),_0x2a919f=>{const _0x2494d7=_0x588453;VisuMZ[_0x2494d7(0x9aa)][_0x2494d7(0x680)](_0x2a919f);}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x1e4),_0x23a895=>{const _0x54e121=_0x588453;VisuMZ[_0x54e121(0x9aa)][_0x54e121(0x1e4)](_0x23a895);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x8ae),_0x339106=>{const _0x5e14db=_0x588453;VisuMZ[_0x5e14db(0x9aa)][_0x5e14db(0x8ae)](_0x339106);}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Grid_TraverseToNode',_0x3eb663=>{const _0x325424=_0x588453;VisuMZ['BattleGridSystem'][_0x325424(0x2cd)](_0x3eb663);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0xae9),_0x5b229b=>{const _0x401d1b=_0x588453;if(!Imported[_0x401d1b(0x9af)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x401d1b(0x5f6)](_0x5b229b,_0x5b229b);const _0x52a678=VisuMZ[_0x401d1b(0xa11)](_0x5b229b[_0x401d1b(0x77c)]);for(const _0x3c70b4 of _0x52a678){if(!_0x3c70b4)continue;_0x3c70b4[_0x401d1b(0x25f)](_0x401d1b(0x10e)),_0x3c70b4[_0x401d1b(0x25f)](_0x401d1b(0xa07)),_0x3c70b4[_0x401d1b(0x25f)]('tv'),_0x3c70b4[_0x401d1b(0x9e7)]();}$gamePlayer['refresh']();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x5fd),_0x433863=>{const _0x3ee4d3=_0x588453;if(!Imported[_0x3ee4d3(0x9af)])return;if(!SceneManager[_0x3ee4d3(0x8b8)]())return;VisuMZ[_0x3ee4d3(0x5f6)](_0x433863,_0x433863);const _0x37e3a0=VisuMZ[_0x3ee4d3(0xa11)](_0x433863[_0x3ee4d3(0x77c)]),_0x32a444=_0x3ee4d3(0xa07);_0x433863['sliceMin']=Math['ceil'](_0x433863[_0x3ee4d3(0x14b)]/0x2),_0x433863[_0x3ee4d3(0x662)]=_0x433863[_0x3ee4d3(0x14b)],_0x433863['refreshRequest']=!![];for(const _0x1f982d of _0x37e3a0){if(!_0x1f982d)continue;_0x1f982d['setHorrorEffectSettings'](_0x32a444,_0x433863);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x172),_0x45fe84=>{const _0x4c2146=_0x588453;if(!Imported[_0x4c2146(0x9af)])return;if(!SceneManager[_0x4c2146(0x8b8)]())return;VisuMZ['ConvertParams'](_0x45fe84,_0x45fe84);const _0x1e47cf=VisuMZ[_0x4c2146(0xa11)](_0x45fe84[_0x4c2146(0x77c)]);for(const _0x515292 of _0x1e47cf){if(!_0x515292)continue;_0x515292['removeHorrorEffect']('glitch');}$gamePlayer[_0x4c2146(0x54e)]();}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x9da),_0x49e31d=>{const _0x373ab8=_0x588453;if(!Imported[_0x373ab8(0x9af)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x49e31d,_0x49e31d);const _0x3c9d35=VisuMZ[_0x373ab8(0xa11)](_0x49e31d['Targets']),_0x3bfa54='noise';for(const _0x49fabb of _0x3c9d35){if(!_0x49fabb)continue;_0x49fabb['setHorrorEffectSettings'](_0x3bfa54,_0x49e31d);}$gamePlayer[_0x373ab8(0x54e)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x90b),_0x219f3b=>{const _0xd01f53=_0x588453;if(!Imported[_0xd01f53(0x9af)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xd01f53(0x5f6)](_0x219f3b,_0x219f3b);const _0x279c01=VisuMZ[_0xd01f53(0xa11)](_0x219f3b['Targets']);for(const _0x266fe2 of _0x279c01){if(!_0x266fe2)continue;_0x266fe2[_0xd01f53(0x25f)](_0xd01f53(0x10e));}$gamePlayer[_0xd01f53(0x54e)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x5f4),_0x5d4032=>{const _0x491bde=_0x588453;if(!Imported[_0x491bde(0x9af)])return;if(!SceneManager[_0x491bde(0x8b8)]())return;VisuMZ[_0x491bde(0x5f6)](_0x5d4032,_0x5d4032);const _0x502059=VisuMZ[_0x491bde(0xa11)](_0x5d4032[_0x491bde(0x77c)]),_0x43fbf6='tv';for(const _0x5650c9 of _0x502059){if(!_0x5650c9)continue;_0x5650c9['setHorrorEffectSettings'](_0x43fbf6,_0x5d4032);}$gamePlayer[_0x491bde(0x54e)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Horror_TVRemove',_0x25c91f=>{const _0x502a38=_0x588453;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x502a38(0x8b8)]())return;VisuMZ['ConvertParams'](_0x25c91f,_0x25c91f);const _0x165365=VisuMZ[_0x502a38(0xa11)](_0x25c91f[_0x502a38(0x77c)]);for(const _0x17ed01 of _0x165365){if(!_0x17ed01)continue;_0x17ed01[_0x502a38(0x25f)]('tv');}$gamePlayer[_0x502a38(0x54e)]();}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Impact_BlueRedInvert',_0x40b55b=>{const _0x49e180=_0x588453;if(!Imported[_0x49e180(0x41b)])return;const _0x2edc24=SceneManager[_0x49e180(0x39b)]['_spriteset'];if(!_0x2edc24)return;if(VisuMZ[_0x49e180(0x2e4)][_0x49e180(0x4ec)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x49e180(0x5f6)](_0x40b55b,_0x40b55b);const _0x2c85fa=_0x40b55b[_0x49e180(0x1cb)];_0x2edc24['setupBlueRedInvertImpactFilter'](_0x2c85fa);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x291),_0x275699=>{const _0x2b10e3=_0x588453;if(!SceneManager[_0x2b10e3(0x8b8)]())return;if(!Imported[_0x2b10e3(0x41b)])return;const _0x4f5bec=SceneManager[_0x2b10e3(0x39b)][_0x2b10e3(0x9cf)];if(!_0x4f5bec)return;VisuMZ[_0x2b10e3(0x5f6)](_0x275699,_0x275699);const _0x4146e6=_0x275699['Intensity']||0x1,_0x20db71=_0x275699[_0x2b10e3(0x84a)]||0x1,_0x569cbf=_0x275699[_0x2b10e3(0x884)]||_0x2b10e3(0x7f1);_0x4f5bec[_0x2b10e3(0x711)](_0x4146e6,_0x20db71,_0x569cbf);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x921),_0x2c9850=>{const _0x4b51ce=_0x588453;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5dc436=SceneManager[_0x4b51ce(0x39b)][_0x4b51ce(0x9cf)];if(!_0x5dc436)return;if(VisuMZ[_0x4b51ce(0x2e4)][_0x4b51ce(0x4ec)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4b51ce(0x163)]();return;}VisuMZ['ConvertParams'](_0x2c9850,_0x2c9850);const _0x499dcb=_0x2c9850['Enable'];_0x5dc436['setupDesaturateImpactFilter'](_0x499dcb);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Impact_MotionBlurScreen',_0x48b499=>{const _0x1de3f3=_0x588453;if(!SceneManager[_0x1de3f3(0x8b8)]())return;if(!Imported[_0x1de3f3(0x41b)])return;const _0x2ed22e=SceneManager['_scene'][_0x1de3f3(0x9cf)];if(!_0x2ed22e)return;VisuMZ[_0x1de3f3(0x5f6)](_0x48b499,_0x48b499);const _0x479211=Number(_0x48b499[_0x1de3f3(0xa5e)])||0x0,_0x1bbb40=Number(_0x48b499[_0x1de3f3(0x768)]),_0x53bf8f=_0x48b499['Duration']||0x1,_0xbb03c=_0x48b499[_0x1de3f3(0x884)]||'Linear';_0x2ed22e[_0x1de3f3(0x562)](_0x479211,_0x1bbb40,_0x53bf8f,_0xbb03c);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Impact_MotionBlurTarget',_0x53ca0e=>{const _0x484ef1=_0x588453;if(!SceneManager[_0x484ef1(0x8b8)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x58dace=SceneManager['_scene']['_spriteset'];if(!_0x58dace)return;VisuMZ[_0x484ef1(0x5f6)](_0x53ca0e,_0x53ca0e);const _0x418ff6=Number(_0x53ca0e[_0x484ef1(0xa5e)])||0x0,_0xc73fc4=Number(_0x53ca0e['Rate']),_0x35b662=_0x53ca0e[_0x484ef1(0x84a)]||0x1,_0x36cd2e=_0x53ca0e[_0x484ef1(0x884)]||_0x484ef1(0x7f1),_0x1160ae=VisuMZ[_0x484ef1(0xa11)](_0x53ca0e[_0x484ef1(0x77c)]);for(const _0x5efb4f of _0x1160ae){if(!_0x5efb4f)continue;if(!_0x5efb4f[_0x484ef1(0xabe)]())continue;_0x5efb4f[_0x484ef1(0xabe)]()[_0x484ef1(0x562)](_0x418ff6,_0xc73fc4,_0x35b662,_0x36cd2e);}}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x80c),_0x4b1cf9=>{const _0x42adb9=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x42adb9(0x41b)])return;VisuMZ[_0x42adb9(0x5f6)](_0x4b1cf9,_0x4b1cf9);const _0x25ab09={'delay':_0x4b1cf9[_0x42adb9(0x538)],'duration':_0x4b1cf9['duration'],'hue':_0x4b1cf9[_0x42adb9(0x2f1)],'opacityStart':_0x4b1cf9[_0x42adb9(0x47c)],'tone':_0x4b1cf9[_0x42adb9(0x7fb)],'visible':!![]},_0x362df6=VisuMZ[_0x42adb9(0xa11)](_0x4b1cf9[_0x42adb9(0x77c)]);for(const _0x1dd865 of _0x362df6){if(!_0x1dd865)continue;_0x1dd865[_0x42adb9(0x3a9)](_0x25ab09);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x65b),_0x270f2f=>{const _0x12e8e1=_0x588453;if(!SceneManager[_0x12e8e1(0x8b8)]())return;if(!Imported[_0x12e8e1(0x41b)])return;VisuMZ['ConvertParams'](_0x270f2f,_0x270f2f);const _0x4e14b6=VisuMZ[_0x12e8e1(0xa11)](_0x270f2f[_0x12e8e1(0x77c)]);for(const _0x4bbbb2 of _0x4e14b6){if(!_0x4bbbb2)continue;_0x4bbbb2[_0x12e8e1(0x1cd)]();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xcd),_0x43c7b4=>{const _0x5bb16c=_0x588453;if(!Imported[_0x5bb16c(0x41b)])return;const _0x2e40f1=SceneManager['_scene']['_spriteset'];if(!_0x2e40f1)return;if(VisuMZ[_0x5bb16c(0x2e4)][_0x5bb16c(0x4ec)]<=1.04){alert(_0x5bb16c(0x303)),SceneManager['exit']();return;}VisuMZ[_0x5bb16c(0x5f6)](_0x43c7b4,_0x43c7b4);const _0x3d1b7a=_0x43c7b4['Enable'];_0x2e40f1[_0x5bb16c(0x641)](_0x3d1b7a);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x74e),_0x32d899=>{const _0x343c1b=_0x588453;if(!Imported[_0x343c1b(0x41b)])return;const _0x4dfe31=SceneManager[_0x343c1b(0x39b)]['_spriteset'];if(!_0x4dfe31)return;if(VisuMZ[_0x343c1b(0x2e4)][_0x343c1b(0x4ec)]<=1.04){alert(_0x343c1b(0x303)),SceneManager['exit']();return;}VisuMZ[_0x343c1b(0x5f6)](_0x32d899,_0x32d899);const _0x20d9d5=_0x32d899[_0x343c1b(0x1cb)];_0x4dfe31['setupOversaturateImpactFilter'](_0x20d9d5);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0xa01),_0x5dc2d4=>{const _0x56ae15=_0x588453;if(!Imported[_0x56ae15(0x41b)])return;const _0x1d50b2=SceneManager[_0x56ae15(0x39b)][_0x56ae15(0x9cf)];if(!_0x1d50b2)return;VisuMZ[_0x56ae15(0x5f6)](_0x5dc2d4,_0x5dc2d4);const _0x2b166e=_0x5dc2d4['X']||0x0,_0x5a32ce=_0x5dc2d4['Y']||0x0,_0x59ba2d=_0x5dc2d4[_0x56ae15(0x58f)]||0x0,_0x510517=_0x5dc2d4[_0x56ae15(0x7d3)]||0x0,_0x48fc30=_0x5dc2d4[_0x56ae15(0x84a)]||0x1;_0x1d50b2[_0x56ae15(0x850)](_0x2b166e,_0x5a32ce,_0x59ba2d,_0x510517,_0x48fc30);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x5de),_0x261c7c=>{const _0x47f49c=_0x588453;if(!SceneManager[_0x47f49c(0x8b8)]())return;if(!Imported[_0x47f49c(0x41b)])return;const _0x331335=SceneManager[_0x47f49c(0x39b)][_0x47f49c(0x9cf)];if(!_0x331335)return;VisuMZ[_0x47f49c(0x5f6)](_0x261c7c,_0x261c7c);const _0x31b3a5=VisuMZ[_0x47f49c(0xa11)](_0x261c7c[_0x47f49c(0x77c)]),_0x1a0b3c=_0x261c7c[_0x47f49c(0x55c)],_0x24f7bf=_0x261c7c[_0x47f49c(0x4f7)]||0x0,_0xa894fd=_0x261c7c[_0x47f49c(0xcb)]||0x0,_0x285b02=_0x261c7c['Amp']||0x0,_0xeebe24=_0x261c7c[_0x47f49c(0x7d3)]||0x0,_0x15f885=_0x261c7c['Duration']||0x1;for(const _0x326611 of _0x31b3a5){if(!_0x326611)continue;if(!_0x326611[_0x47f49c(0xabe)]())continue;const _0x1abf44=_0x326611['battler']();let _0x24ddb4=_0x1abf44[_0x47f49c(0x494)],_0x4d1420=_0x1abf44[_0x47f49c(0xaba)];_0x24ddb4+=(Graphics[_0x47f49c(0x3ad)]-Graphics['boxWidth'])/0x2,_0x4d1420+=(Graphics[_0x47f49c(0x4ba)]-Graphics[_0x47f49c(0x571)])/0x2;if(_0x1a0b3c[_0x47f49c(0x809)](/front/i))_0x24ddb4+=(_0x326611['isEnemy']()?0x1:-0x1)*_0x1abf44['mainSpriteWidth']()/0x2;else _0x1a0b3c[_0x47f49c(0x809)](/back/i)&&(_0x24ddb4+=(_0x326611[_0x47f49c(0x4ad)]()?-0x1:0x1)*_0x1abf44[_0x47f49c(0xae1)]()/0x2);if(_0x1a0b3c[_0x47f49c(0x809)](/head/i))_0x4d1420-=_0x1abf44['mainSpriteHeight']();else _0x1a0b3c[_0x47f49c(0x809)](/center/i)&&(_0x4d1420-=_0x1abf44[_0x47f49c(0x7cf)]()/0x2);_0x24ddb4+=_0x24f7bf,_0x4d1420+=_0xa894fd,_0x331335[_0x47f49c(0x850)](_0x24ddb4,_0x4d1420,_0x285b02,_0xeebe24,_0x15f885);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x695),_0x374cf7=>{const _0x200bdf=_0x588453;if(!SceneManager[_0x200bdf(0x8b8)]())return;if(!Imported[_0x200bdf(0x41b)])return;const _0x52dc39=SceneManager[_0x200bdf(0x39b)][_0x200bdf(0x9cf)];if(!_0x52dc39)return;VisuMZ['ConvertParams'](_0x374cf7,_0x374cf7);const _0x1d17af=VisuMZ['CreateActionSequenceTargets'](_0x374cf7['Targets']),_0xb675d6=_0x374cf7['TargetLocation'],_0x3f061d=_0x374cf7[_0x200bdf(0x4f7)]||0x0,_0x1c680b=_0x374cf7['OffsetY']||0x0,_0xdc0d56=_0x374cf7['Amp']||0x0,_0x2cbb6b=_0x374cf7[_0x200bdf(0x7d3)]||0x0,_0x44b6f7=_0x374cf7[_0x200bdf(0x84a)]||0x1,_0x1b6569=Math['min'](..._0x1d17af[_0x200bdf(0x89e)](_0x4caa44=>_0x4caa44[_0x200bdf(0xabe)]()[_0x200bdf(0x494)]-_0x4caa44['battler']()[_0x200bdf(0xae1)]()/0x2)),_0x2f0bdc=Math[_0x200bdf(0x85e)](..._0x1d17af['map'](_0x4fb8bb=>_0x4fb8bb[_0x200bdf(0xabe)]()[_0x200bdf(0x494)]+_0x4fb8bb['battler']()['mainSpriteWidth']()/0x2)),_0x421a15=Math[_0x200bdf(0x31b)](..._0x1d17af[_0x200bdf(0x89e)](_0x2cf357=>_0x2cf357['battler']()[_0x200bdf(0xaba)]-_0x2cf357[_0x200bdf(0xabe)]()['mainSpriteHeight']())),_0x3bb3a0=Math['max'](..._0x1d17af[_0x200bdf(0x89e)](_0x23f7dd=>_0x23f7dd['battler']()['_baseY'])),_0x2b66ea=_0x1d17af[_0x200bdf(0x38d)](_0x5aa4a8=>_0x5aa4a8[_0x200bdf(0xa52)]())[_0x200bdf(0x6e3)],_0x252110=_0x1d17af[_0x200bdf(0x38d)](_0x3dd2e1=>_0x3dd2e1['isEnemy']())[_0x200bdf(0x6e3)];let _0x471eef=0x0,_0x23f136=0x0;if(_0xb675d6[_0x200bdf(0x809)](/front/i))_0x471eef=_0x2b66ea>=_0x252110?_0x1b6569:_0x2f0bdc;else{if(_0xb675d6[_0x200bdf(0x809)](/middle/i))_0x471eef=(_0x1b6569+_0x2f0bdc)/0x2,melee=-0x1;else _0xb675d6['match'](/back/i)&&(_0x471eef=_0x2b66ea>=_0x252110?_0x2f0bdc:_0x1b6569);}if(_0xb675d6[_0x200bdf(0x809)](/head/i))_0x23f136=_0x421a15;else{if(_0xb675d6[_0x200bdf(0x809)](/center/i))_0x23f136=(_0x421a15+_0x3bb3a0)/0x2;else _0xb675d6[_0x200bdf(0x809)](/base/i)&&(_0x23f136=_0x3bb3a0);}_0x471eef+=(Graphics[_0x200bdf(0x3ad)]-Graphics[_0x200bdf(0x586)])/0x2,_0x23f136+=(Graphics[_0x200bdf(0x4ba)]-Graphics[_0x200bdf(0x571)])/0x2,_0x471eef+=_0x3f061d,_0x23f136+=_0x1c680b,_0x52dc39['setupShockwaveImpactFilter'](_0x471eef,_0x23f136,_0xdc0d56,_0x2cbb6b,_0x44b6f7);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x99c),_0x235f5f=>{const _0x196296=_0x588453;if(!Imported[_0x196296(0x41b)])return;const _0x55af9a=SceneManager[_0x196296(0x39b)]['_spriteset'];if(!_0x55af9a)return;if(VisuMZ[_0x196296(0x2e4)][_0x196296(0x4ec)]<=1.04){alert(_0x196296(0x303)),SceneManager[_0x196296(0x163)]();return;}VisuMZ['ConvertParams'](_0x235f5f,_0x235f5f);const _0x5e620d=$gameTemp['getLastPluginCommandInterpreter'](),_0x300b26=Math['max'](0.01,_0x235f5f[_0x196296(0x5ed)]);$gameTemp[_0x196296(0x1d8)](_0x300b26,_0x5e620d);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Impact_TimeStop',_0x42d561=>{const _0x4a0086=_0x588453;if(!Imported[_0x4a0086(0x41b)])return;const _0x430fb5=SceneManager[_0x4a0086(0x39b)][_0x4a0086(0x9cf)];if(!_0x430fb5)return;if(VisuMZ['ActSeqImpact'][_0x4a0086(0x4ec)]<=1.04){alert(_0x4a0086(0x303)),SceneManager[_0x4a0086(0x163)]();return;}VisuMZ[_0x4a0086(0x5f6)](_0x42d561,_0x42d561);const _0x4e1f7d=$gameTemp[_0x4a0086(0x26a)](),_0x424309=_0x42d561['ms']||0x1;VisuMZ[_0x4a0086(0x2e4)][_0x4a0086(0x48c)](_0x424309,_0x4e1f7d);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x58b),_0x26f8f8=>{const _0x8e855c=_0x588453;if(!Imported[_0x8e855c(0x41b)])return;const _0x47f5d7=SceneManager['_scene'][_0x8e855c(0x9cf)];if(!_0x47f5d7)return;VisuMZ['ConvertParams'](_0x26f8f8,_0x26f8f8);const _0x2085f8=_0x26f8f8['X']||0x0,_0x30ecca=_0x26f8f8['Y']||0x0,_0x2b61c2=_0x26f8f8['Strength']||0x0,_0x5cc17d=_0x26f8f8[_0x8e855c(0xadb)]||0x0,_0x52782f=_0x26f8f8[_0x8e855c(0x84a)]||0x1,_0x4f80db=_0x26f8f8[_0x8e855c(0x884)]||'Linear';_0x47f5d7[_0x8e855c(0x263)](_0x2b61c2,_0x2085f8,_0x30ecca,_0x5cc17d,_0x52782f,_0x4f80db);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x94c),_0x729d55=>{const _0x4ab220=_0x588453;if(!Imported[_0x4ab220(0x41b)])return;const _0x3aba35=SceneManager[_0x4ab220(0x39b)][_0x4ab220(0x9cf)];if(!_0x3aba35)return;VisuMZ[_0x4ab220(0x5f6)](_0x729d55,_0x729d55);const _0x2611c1=VisuMZ[_0x4ab220(0xa11)](_0x729d55[_0x4ab220(0x77c)]),_0x77a9c6=_0x729d55['TargetLocation'],_0x33f51c=_0x729d55['OffsetX']||0x0,_0x3b59c6=_0x729d55[_0x4ab220(0xcb)]||0x0,_0x3cfdd2=_0x729d55[_0x4ab220(0x839)]||0x0,_0x3baaf5=_0x729d55[_0x4ab220(0xadb)]||0x0,_0x56c149=_0x729d55[_0x4ab220(0x84a)]||0x1,_0xf39e9e=_0x729d55[_0x4ab220(0x884)]||_0x4ab220(0x7f1),_0x4618c0=Math[_0x4ab220(0x31b)](..._0x2611c1[_0x4ab220(0x89e)](_0x1614b4=>_0x1614b4[_0x4ab220(0xabe)]()[_0x4ab220(0x494)]-_0x1614b4[_0x4ab220(0xabe)]()['mainSpriteWidth']()/0x2)),_0x2657c3=Math[_0x4ab220(0x85e)](..._0x2611c1[_0x4ab220(0x89e)](_0x57ef45=>_0x57ef45[_0x4ab220(0xabe)]()[_0x4ab220(0x494)]+_0x57ef45[_0x4ab220(0xabe)]()[_0x4ab220(0xae1)]()/0x2)),_0x59ca56=Math[_0x4ab220(0x31b)](..._0x2611c1[_0x4ab220(0x89e)](_0xfa5ccb=>_0xfa5ccb[_0x4ab220(0xabe)]()[_0x4ab220(0xaba)]-_0xfa5ccb['battler']()['mainSpriteHeight']())),_0x4d357a=Math[_0x4ab220(0x85e)](..._0x2611c1[_0x4ab220(0x89e)](_0x26f53e=>_0x26f53e[_0x4ab220(0xabe)]()[_0x4ab220(0xaba)])),_0x348583=_0x2611c1['filter'](_0x15dc92=>_0x15dc92[_0x4ab220(0xa52)]())['length'],_0x2e287=_0x2611c1[_0x4ab220(0x38d)](_0x1bd5fb=>_0x1bd5fb[_0x4ab220(0x4ad)]())[_0x4ab220(0x6e3)];let _0x5dc125=0x0,_0x46e976=0x0;if(_0x77a9c6['match'](/front/i))_0x5dc125=_0x348583>=_0x2e287?_0x4618c0:_0x2657c3;else{if(_0x77a9c6[_0x4ab220(0x809)](/middle/i))_0x5dc125=(_0x4618c0+_0x2657c3)/0x2,melee=-0x1;else _0x77a9c6[_0x4ab220(0x809)](/back/i)&&(_0x5dc125=_0x348583>=_0x2e287?_0x2657c3:_0x4618c0);}if(_0x77a9c6[_0x4ab220(0x809)](/head/i))_0x46e976=_0x59ca56;else{if(_0x77a9c6[_0x4ab220(0x809)](/center/i))_0x46e976=(_0x59ca56+_0x4d357a)/0x2;else _0x77a9c6[_0x4ab220(0x809)](/base/i)&&(_0x46e976=_0x4d357a);}_0x5dc125+=(Graphics[_0x4ab220(0x3ad)]-Graphics[_0x4ab220(0x586)])/0x2,_0x46e976+=(Graphics[_0x4ab220(0x4ba)]-Graphics[_0x4ab220(0x571)])/0x2,_0x5dc125+=_0x33f51c,_0x46e976+=_0x3b59c6,_0x3aba35[_0x4ab220(0x263)](_0x3cfdd2,_0x5dc125,_0x46e976,_0x3baaf5,_0x56c149,_0xf39e9e);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Inject_AnimationStart',_0x27c409=>{const _0x9ab626=_0x588453;if(!Imported[_0x9ab626(0x41b)])return;const _0x17ed35=SceneManager[_0x9ab626(0x39b)][_0x9ab626(0x9cf)];if(!_0x17ed35)return;if(VisuMZ[_0x9ab626(0x2e4)]['version']<=1.05){alert(_0x9ab626(0x303)),SceneManager[_0x9ab626(0x163)]();return;}VisuMZ['ConvertParams'](_0x27c409,_0x27c409);const _0xba152b=VisuMZ[_0x9ab626(0xa11)](_0x27c409[_0x9ab626(0x77c)]),_0x41b5fb={'filename':_0x27c409['Filename'],'horzCells':_0x27c409[_0x9ab626(0x40e)]||0x1,'vertCells':_0x27c409[_0x9ab626(0x62a)]||0x1,'frameDelay':_0x27c409[_0x9ab626(0x9f6)]||0x1,'smooth':_0x27c409[_0x9ab626(0x89c)]||![],'anchorX':_0x27c409[_0x9ab626(0x338)]||0x0,'anchorY':_0x27c409[_0x9ab626(0x32f)]||0x0,'offsetX':_0x27c409['offsetX']||0x0,'offsetY':_0x27c409[_0x9ab626(0x931)]||0x0};for(const _0x3b24a2 of _0xba152b){if(!_0x3b24a2)continue;if(!_0x3b24a2[_0x9ab626(0xabe)]())continue;_0x3b24a2['battler']()[_0x9ab626(0xd2)](_0x41b5fb);}const _0x3d7fc9=$gameTemp['getLastPluginCommandInterpreter']();_0x3d7fc9&&_0x3d7fc9[_0x9ab626(0xa68)]('battleInjectPrep');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x276),_0x3896d8=>{const _0x4e7152=_0x588453;if(!Imported[_0x4e7152(0x41b)])return;const _0x655bab=SceneManager[_0x4e7152(0x39b)][_0x4e7152(0x9cf)];if(!_0x655bab)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4e7152(0x163)]();return;}VisuMZ['ConvertParams'](_0x3896d8,_0x3896d8);const _0x20b11d=VisuMZ[_0x4e7152(0xa11)](_0x3896d8[_0x4e7152(0x77c)]);for(const _0x16cdc0 of _0x20b11d){if(!_0x16cdc0)continue;if(!_0x16cdc0[_0x4e7152(0xabe)]())continue;_0x16cdc0[_0x4e7152(0xabe)]()[_0x4e7152(0x822)]();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x26e),_0x3e2681=>{const _0x407a28=_0x588453;if(!Imported[_0x407a28(0x41b)])return;const _0x20f2a9=SceneManager[_0x407a28(0x39b)]['_spriteset'];if(!_0x20f2a9)return;if(VisuMZ[_0x407a28(0x2e4)][_0x407a28(0x4ec)]<=1.05){alert(_0x407a28(0x303)),SceneManager[_0x407a28(0x163)]();return;}VisuMZ[_0x407a28(0x5f6)](_0x3e2681,_0x3e2681);const _0x15d8a3=VisuMZ[_0x407a28(0xa11)](_0x3e2681['Targets']),_0x439cbf=_0x3e2681[_0x407a28(0x59e)];for(const _0x3627ea of _0x15d8a3){if(!_0x3627ea)continue;if(!_0x3627ea[_0x407a28(0xabe)]())continue;_0x3627ea[_0x407a28(0xabe)]()[_0x407a28(0xa84)](_0x439cbf);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Inject_WaitForInjectAni',_0x1c302e=>{const _0x5f46ee=_0x588453;if(!SceneManager[_0x5f46ee(0x8b8)]())return;const _0x45ff43=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x45ff43)return;_0x45ff43[_0x5f46ee(0xa68)](_0x5f46ee(0x975));}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x47bf17=>{const _0x47c6cb=_0x588453;if(!SceneManager[_0x47c6cb(0x8b8)]())return;VisuMZ[_0x47c6cb(0x5f6)](_0x47bf17,_0x47bf17);const _0x3b5957=$gameTemp[_0x47c6cb(0x26a)](),_0x411631=BattleManager[_0x47c6cb(0x2a8)],_0x3517b4=BattleManager['_subject'],_0x5ac1f9=BattleManager[_0x47c6cb(0x944)];if(!_0x3b5957||!_0x411631||!_0x3517b4)return;if(!_0x411631['item']())return;const _0x1e7f49=VisuMZ['CreateActionSequenceTargets'](_0x47bf17['Targets']);for(const _0x57fb40 of _0x1e7f49){if(!_0x57fb40)continue;_0x5ac1f9[_0x47c6cb(0x2b9)]('actionEffect',_0x3517b4,_0x57fb40);}_0x3b5957[_0x47c6cb(0xa68)]('battlelog');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x93e),_0x13bf4a=>{const _0x526588=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x526588(0x41e)])return;$gameTemp[_0x526588(0x347)]=!![];}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x2f4),_0x289137=>{const _0x55c61a=_0x588453;if(!SceneManager[_0x55c61a(0x8b8)]())return;VisuMZ['ConvertParams'](_0x289137,_0x289137);const _0x56774c=[_0x55c61a(0x94a),_0x55c61a(0xada),_0x55c61a(0x708),_0x55c61a(0x6e0),_0x55c61a(0xac8),_0x55c61a(0x6b4),'AGI','LUK'],_0x211be1=_0x289137[_0x55c61a(0x85b)],_0x269ab0=_0x289137['Debuffs'],_0x2cdc1b=_0x289137[_0x55c61a(0x3fc)],_0x48516f=VisuMZ[_0x55c61a(0xa11)](_0x289137[_0x55c61a(0x77c)]);for(const _0x1c78b0 of _0x48516f){if(!_0x1c78b0)continue;for(const _0x41310f of _0x211be1){const _0x4c2399=_0x56774c['indexOf'](_0x41310f[_0x55c61a(0x3c2)]()['trim']());_0x4c2399>=0x0&&_0x4c2399<=0x7&&_0x1c78b0[_0x55c61a(0x28c)](_0x4c2399,_0x2cdc1b);}for(const _0x27e37b of _0x269ab0){const _0x24b16f=_0x56774c[_0x55c61a(0x512)](_0x27e37b[_0x55c61a(0x3c2)]()[_0x55c61a(0x4f2)]());_0x24b16f>=0x0&&_0x24b16f<=0x7&&_0x1c78b0[_0x55c61a(0x99f)](_0x24b16f,_0x2cdc1b);}}}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x15e),_0x1d876e=>{const _0x1ff005=_0x588453;if(!SceneManager[_0x1ff005(0x8b8)]())return;VisuMZ[_0x1ff005(0x5f6)](_0x1d876e,_0x1d876e);const _0x5180cd=_0x1d876e[_0x1ff005(0x8c3)],_0x582dc3=VisuMZ[_0x1ff005(0xa11)](_0x1d876e['Targets']);for(const _0x3a83ac of _0x582dc3){if(!_0x3a83ac)continue;for(const _0x4a6af9 of _0x5180cd){_0x3a83ac[_0x1ff005(0x3ac)](_0x4a6af9);}}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x60e),_0x57d24c=>{const _0x1a2df0=_0x588453;if(!SceneManager[_0x1a2df0(0x8b8)]())return;VisuMZ['ConvertParams'](_0x57d24c,_0x57d24c);const _0x16895d=BattleManager[_0x1a2df0(0x2a8)],_0xdc6538={'arPenRate':_0x57d24c['ArPenRate'],'arPenFlat':_0x57d24c[_0x1a2df0(0x10b)],'arRedRate':_0x57d24c['ArRedRate'],'arRedFlat':_0x57d24c[_0x1a2df0(0x288)]};_0x16895d['_armorPenetration']=_0xdc6538;}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x3fa),_0x1273a6=>{const _0x1926fb=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x1273a6,_0x1273a6);const _0x23b077=VisuMZ[_0x1926fb(0xa11)](_0x1273a6['Targets']),_0x2c034c=_0x1273a6[_0x1926fb(0x6bc)]||0x1;for(const _0x489e9d of _0x23b077){if(!_0x489e9d)continue;if(!_0x489e9d[_0x1926fb(0x4ad)]())continue;_0x489e9d['revealNewWeaknesses'](_0x2c034c);}}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x801),_0x45dc82=>{const _0x321c17=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x321c17(0xa20)])return;if(!BattleManager[_0x321c17(0x52d)]())return;VisuMZ[_0x321c17(0x5f6)](_0x45dc82,_0x45dc82);const _0x95f13d=VisuMZ[_0x321c17(0xa11)](_0x45dc82['Targets']),_0x13a2b7=_0x45dc82['ChargeRate'],_0x383eec=_0x45dc82[_0x321c17(0x687)],_0x4aee75=_0x45dc82[_0x321c17(0xa1f)];for(const _0x2653f4 of _0x95f13d){if(!_0x2653f4)continue;if(_0x2653f4[_0x321c17(0x11d)]())_0x2653f4[_0x321c17(0x354)](_0x13a2b7);else{if(_0x2653f4[_0x321c17(0x560)]()){_0x2653f4[_0x321c17(0xad7)](_0x383eec);if(_0x4aee75)_0x2653f4[_0x321c17(0x2e8)]();}}}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x75c),_0xcc22be=>{const _0x12423b=_0x588453;if(!SceneManager[_0x12423b(0x8b8)]())return;if(!Imported[_0x12423b(0x7d0)])return;VisuMZ[_0x12423b(0x5f6)](_0xcc22be,_0xcc22be);const _0x12aac0=VisuMZ[_0x12423b(0xa11)](_0xcc22be[_0x12423b(0x77c)]),_0x14cb74=_0xcc22be[_0x12423b(0x1c0)];for(const _0x1ea139 of _0x12aac0){if(!_0x1ea139)continue;_0x1ea139[_0x12423b(0x81d)](_0x14cb74);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x3e2),_0x16620b=>{const _0x5bd61c=_0x588453;if(!SceneManager[_0x5bd61c(0x8b8)]())return;if(!Imported[_0x5bd61c(0x7d0)])return;if(!BattleManager[_0x5bd61c(0x5a9)])return;VisuMZ[_0x5bd61c(0x5f6)](_0x16620b,_0x16620b);const _0x37307d=_0x16620b[_0x5bd61c(0x906)];$gameVariables[_0x5bd61c(0x466)](_0x37307d,BattleManager[_0x5bd61c(0x5a9)][_0x5bd61c(0x403)]());}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_BreakShieldChange',_0x5e3bb1=>{const _0x1cb99f=_0x588453;if(!SceneManager[_0x1cb99f(0x8b8)]())return;if(!Imported[_0x1cb99f(0x6b8)])return;VisuMZ[_0x1cb99f(0x5f6)](_0x5e3bb1,_0x5e3bb1);const _0x13ad9f=VisuMZ[_0x1cb99f(0xa11)](_0x5e3bb1[_0x1cb99f(0x77c)]),_0xf96ce2=_0x5e3bb1['BreakShields'];for(const _0x17c3d8 of _0x13ad9f){if(!_0x17c3d8)continue;if(_0x17c3d8[_0x1cb99f(0x9a0)]())continue;if(!_0x17c3d8[_0x1cb99f(0x87f)]())continue;_0x17c3d8[_0x1cb99f(0x1c5)](_0xf96ce2);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xa89),_0x45b426=>{const _0x18b924=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x45b426,_0x45b426);const _0x5a0359=VisuMZ[_0x18b924(0xa11)](_0x45b426[_0x18b924(0x77c)]);for(const _0x4a4493 of _0x5a0359){if(!_0x4a4493)continue;if(_0x4a4493[_0x18b924(0x9a0)]())continue;if(!_0x4a4493[_0x18b924(0x87f)]())continue;_0x4a4493['resetBreakShield']();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_BtbGain',_0x2445af=>{const _0x4d6fc2=_0x588453;if(!SceneManager[_0x4d6fc2(0x8b8)]())return;if(!Imported[_0x4d6fc2(0x903)])return;if(!BattleManager[_0x4d6fc2(0x4b7)]())return;VisuMZ['ConvertParams'](_0x2445af,_0x2445af);const _0x762f3b=VisuMZ[_0x4d6fc2(0xa11)](_0x2445af[_0x4d6fc2(0x77c)]),_0xf530d0=_0x2445af[_0x4d6fc2(0x766)];for(const _0x2b1bc6 of _0x762f3b){if(!_0x2b1bc6)continue;_0x2b1bc6[_0x4d6fc2(0x1c9)](_0xf530d0);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_Collapse',_0x5154d6=>{const _0x22a4b7=_0x588453;if(!SceneManager[_0x22a4b7(0x8b8)]())return;VisuMZ['ConvertParams'](_0x5154d6,_0x5154d6);const _0x52e0b4=$gameTemp[_0x22a4b7(0x26a)](),_0x50b14c=BattleManager[_0x22a4b7(0x2a8)],_0x207f37=BattleManager['_subject'];if(!_0x52e0b4||!_0x50b14c||!_0x207f37)return;if(!_0x50b14c['item']())return;const _0x24d35c=VisuMZ[_0x22a4b7(0xa11)](_0x5154d6[_0x22a4b7(0x77c)]);for(const _0x115da5 of _0x24d35c){if(!_0x115da5)continue;_0x5154d6['ForceDeath']&&(_0x115da5[_0x22a4b7(0x1bf)](),_0x115da5[_0x22a4b7(0x3ac)](_0x115da5[_0x22a4b7(0xdc)]())),_0x115da5[_0x22a4b7(0x7eb)]()&&_0x115da5['performCollapse']();}_0x52e0b4[_0x22a4b7(0xa68)](_0x22a4b7(0x497));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x13a),_0x46da16=>{const _0x493576=_0x588453;if(!SceneManager[_0x493576(0x8b8)]())return;if(!Imported[_0x493576(0x731)])return;if(!BattleManager[_0x493576(0x764)]())return;VisuMZ[_0x493576(0x5f6)](_0x46da16,_0x46da16);const _0x469e97=VisuMZ[_0x493576(0xa11)](_0x46da16[_0x493576(0x77c)]),_0x200eb8=_0x46da16[_0x493576(0x8c0)];for(const _0x58ce88 of _0x469e97){if(!_0x58ce88)continue;_0x58ce88[_0x493576(0x9db)](_0x200eb8);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x61c),_0xf59d80=>{const _0x590a8e=_0x588453;if(!SceneManager[_0x590a8e(0x8b8)]())return;if(!Imported[_0x590a8e(0x731)])return;if(!BattleManager[_0x590a8e(0x764)]())return;VisuMZ[_0x590a8e(0x5f6)](_0xf59d80,_0xf59d80);const _0x51ffd6=VisuMZ['CreateActionSequenceTargets'](_0xf59d80['Targets']),_0x44a8ad=_0xf59d80['ChargeRate'],_0x96ef14=_0xf59d80[_0x590a8e(0x687)];for(const _0x5d3337 of _0x51ffd6){if(!_0x5d3337)continue;if(_0x5d3337['_tpbState']==='charging')_0x5d3337[_0x590a8e(0x550)](_0x44a8ad);else _0x5d3337[_0x590a8e(0xec)]===_0x590a8e(0xa9a)&&_0x5d3337[_0x590a8e(0x475)](_0x96ef14);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x7e6),_0x4d74f5=>{const _0x2f367f=_0x588453;if(!SceneManager[_0x2f367f(0x8b8)]())return;VisuMZ['ConvertParams'](_0x4d74f5,_0x4d74f5);const _0x5af079=BattleManager[_0x2f367f(0x2a8)];if(!_0x5af079)return;let _0xf15833=_0x4d74f5[_0x2f367f(0x6d1)];_0x5af079[_0x2f367f(0x2bb)](_0xf15833);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x8f3),_0x2cc193=>{const _0x1c2d4a=_0x588453;if(!SceneManager[_0x1c2d4a(0x8b8)]())return;VisuMZ[_0x1c2d4a(0x5f6)](_0x2cc193,_0x2cc193);const _0x8e103f=VisuMZ[_0x1c2d4a(0xa11)](_0x2cc193[_0x1c2d4a(0x77c)]);for(const _0x56bac5 of _0x8e103f){if(!_0x56bac5)continue;if(_0x56bac5[_0x1c2d4a(0x127)]())_0x56bac5[_0x1c2d4a(0x245)]();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x70a),_0x1de9f8=>{const _0x413265=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x413265(0x5f6)](_0x1de9f8,_0x1de9f8);const _0x1e32b0=$gameTemp[_0x413265(0x26a)](),_0x492321=BattleManager[_0x413265(0x5a9)],_0x2482e6=_0x1de9f8[_0x413265(0x9d4)];if(!_0x1e32b0)return;if(!_0x492321)return;_0x492321&&_0x492321[_0x413265(0x8c6)]()&&_0x2482e6['toUpperCase']()['trim']()!=='UNTITLED'&&_0x1e32b0[_0x413265(0x453)]([_0x2482e6]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x32c),_0x2a78e6=>{const _0x5ec589=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2a78e6,_0x2a78e6);const _0x5915ea=$gameTemp[_0x5ec589(0x26a)](),_0x4c967a=BattleManager[_0x5ec589(0x944)];if(!_0x5915ea)return;const _0x3af422=VisuMZ['CreateActionSequenceTargets'](_0x2a78e6[_0x5ec589(0x318)]),_0x43f84d=VisuMZ[_0x5ec589(0xa11)](_0x2a78e6['Targets']);for(const _0x29ceea of _0x3af422){for(const _0x3bcc94 of _0x43f84d){if(!_0x3bcc94)continue;const _0x1ed11d=$dataSkills[_0x29ceea[_0x5ec589(0x3e9)]()];_0x4c967a['push'](_0x5ec589(0x89d),_0x29ceea,_0x3bcc94,_0x1ed11d);}}_0x5915ea[_0x5ec589(0xa68)](_0x5ec589(0x47f));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x758),_0xb3afd6=>{const _0x27e93b=_0x588453;if(!SceneManager[_0x27e93b(0x8b8)]())return;VisuMZ[_0x27e93b(0x5f6)](_0xb3afd6,_0xb3afd6);const _0x338a52=$gameTemp[_0x27e93b(0x26a)](),_0x2a18c4=BattleManager[_0x27e93b(0x944)];if(!_0x338a52)return;const _0x51d815=VisuMZ[_0x27e93b(0xa11)](_0xb3afd6[_0x27e93b(0x318)]),_0x112fcb=VisuMZ[_0x27e93b(0xa11)](_0xb3afd6[_0x27e93b(0x77c)]);for(const _0x182fcf of _0x51d815){for(const _0x1ea281 of _0x112fcb){if(!_0x1ea281)continue;const _0x2d72c3=$dataSkills[_0x182fcf[_0x27e93b(0x9a7)]()];_0x2a18c4[_0x27e93b(0x2b9)](_0x27e93b(0x89d),_0x182fcf,_0x1ea281,_0x2d72c3);}}_0x338a52[_0x27e93b(0xa68)](_0x27e93b(0x47f));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x68f),_0x118ae6=>{const _0x5f02c5=_0x588453;if(!SceneManager[_0x5f02c5(0x8b8)]())return;VisuMZ[_0x5f02c5(0x5f6)](_0x118ae6,_0x118ae6);const _0x272a13=$gameTemp[_0x5f02c5(0x26a)](),_0x7a334=BattleManager[_0x5f02c5(0x944)],_0xe9e5c1=Number(_0x118ae6[_0x5f02c5(0x95b)]||0x1),_0x504070=$dataItems[_0xe9e5c1];if(!_0x272a13)return;if(!_0x504070)return;const _0x3c911b=VisuMZ[_0x5f02c5(0xa11)](_0x118ae6[_0x5f02c5(0x318)]),_0x45115a=VisuMZ[_0x5f02c5(0xa11)](_0x118ae6[_0x5f02c5(0x77c)]);for(const _0xfe320a of _0x3c911b){for(const _0x13716f of _0x45115a){if(!_0x13716f)continue;_0x7a334[_0x5f02c5(0x2b9)]('emulateActionEffect',_0xfe320a,_0x13716f,_0x504070);}}_0x272a13[_0x5f02c5(0xa68)](_0x5f02c5(0x47f));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xa0a),_0x5604ff=>{const _0x4c6382=_0x588453;if(!SceneManager[_0x4c6382(0x8b8)]())return;VisuMZ['ConvertParams'](_0x5604ff,_0x5604ff);let _0x455540=Number(_0x5604ff[_0x4c6382(0x436)]||0x0);if(_0x455540<=0x0){const _0xa8496f=BattleManager[_0x4c6382(0x2a8)];if(_0xa8496f&&_0xa8496f[_0x4c6382(0x8c8)]())_0x455540=_0xa8496f[_0x4c6382(0x343)]()['id'];else return;}const _0x175f3f=$dataSkills[_0x455540];if(!_0x175f3f)return;const _0x60b4bf=VisuMZ[_0x4c6382(0xa11)](_0x5604ff['Users']);for(const _0x453090 of _0x60b4bf){_0x453090['paySkillCost'](_0x175f3f);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x2c2),_0x8a57a9=>{const _0x1031de=_0x588453;if(!SceneManager[_0x1031de(0x8b8)]())return;VisuMZ[_0x1031de(0x5f6)](_0x8a57a9,_0x8a57a9);const _0x56ce3e=$gameTemp[_0x1031de(0x26a)](),_0x547dd4=BattleManager['_logWindow'],_0x3eaea4=Number(_0x8a57a9[_0x1031de(0x436)]||0x1),_0x1f085b=$dataSkills[_0x3eaea4];if(!_0x56ce3e)return;if(!_0x1f085b)return;const _0x21bc61=VisuMZ[_0x1031de(0xa11)](_0x8a57a9[_0x1031de(0x318)]),_0x1aa13c=VisuMZ[_0x1031de(0xa11)](_0x8a57a9[_0x1031de(0x77c)]);for(const _0x2b8ae6 of _0x21bc61){for(const _0x339554 of _0x1aa13c){if(!_0x339554)continue;_0x547dd4[_0x1031de(0x2b9)]('emulateActionEffect',_0x2b8ae6,_0x339554,_0x1f085b);}}_0x56ce3e[_0x1031de(0xa68)](_0x1031de(0x47f));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x588),_0x580f92=>{const _0x2ba821=_0x588453;if(!SceneManager[_0x2ba821(0x8b8)]())return;VisuMZ[_0x2ba821(0x5f6)](_0x580f92,_0x580f92);const _0x9a5351=VisuMZ[_0x2ba821(0xa11)](_0x580f92[_0x2ba821(0x77c)]);for(const _0x23dafd of _0x9a5351){if(!_0x23dafd)continue;if(!_0x23dafd[_0x2ba821(0x4ad)]())continue;_0x23dafd['escape']();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x483),_0x3eeab1=>{const _0x4cf6dd=_0x588453;if(!SceneManager[_0x4cf6dd(0x8b8)]())return;if(!Imported[_0x4cf6dd(0x960)])return;if(!BattleManager[_0x4cf6dd(0x78f)]())return;VisuMZ[_0x4cf6dd(0x5f6)](_0x3eeab1,_0x3eeab1);const _0x249a13=_0x3eeab1[_0x4cf6dd(0x7a2)];BattleManager[_0x4cf6dd(0x5a9)]&&BattleManager[_0x4cf6dd(0x5a9)][_0x4cf6dd(0x6f5)]()[_0x4cf6dd(0x658)](_0x249a13);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x99e),_0x200077=>{const _0x1c75e6=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c75e6(0x9cd)])return;if(!BattleManager[_0x1c75e6(0x540)]())return;VisuMZ[_0x1c75e6(0x5f6)](_0x200077,_0x200077);const _0x2afa68=_0x200077[_0x1c75e6(0x7a2)];BattleManager['_subject']&&BattleManager[_0x1c75e6(0x5a9)]['friendsUnit']()['gainCurrentActionsFTB'](_0x2afa68);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x2b7),_0x27ddb1=>{const _0x137fa8=_0x588453;if(!SceneManager[_0x137fa8(0x8b8)]())return;VisuMZ[_0x137fa8(0x5f6)](_0x27ddb1,_0x27ddb1);const _0x22ed29=VisuMZ[_0x137fa8(0xa11)](_0x27ddb1[_0x137fa8(0x77c)]),_0x473aab=_0x27ddb1[_0x137fa8(0x55a)],_0x7a6efa=_0x27ddb1[_0x137fa8(0xa8f)],_0x5d742f=_0x27ddb1['MP_Rate'],_0x50a4c8=_0x27ddb1['MP_Flat'],_0x39b4f7=_0x27ddb1['TP_Rate'],_0x140d2b=_0x27ddb1[_0x137fa8(0xa80)],_0xb256f2=_0x27ddb1[_0x137fa8(0x955)];for(const _0x346bf5 of _0x22ed29){if(!_0x346bf5)continue;const _0x16135a=_0x346bf5[_0x137fa8(0x610)](),_0x1b4ca2=Math[_0x137fa8(0x422)](_0x473aab*_0x346bf5['mhp']+_0x7a6efa),_0x2c0ab8=Math[_0x137fa8(0x422)](_0x5d742f*_0x346bf5[_0x137fa8(0x803)]+_0x50a4c8),_0x2f4c04=Math[_0x137fa8(0x422)](_0x39b4f7*_0x346bf5['maxTp']()+_0x140d2b);if(_0x1b4ca2!==0x0)_0x346bf5[_0x137fa8(0x9cb)](_0x1b4ca2);if(_0x2c0ab8!==0x0)_0x346bf5[_0x137fa8(0xd9)](_0x2c0ab8);if(_0x2f4c04!==0x0)_0x346bf5['gainTp'](_0x2f4c04);if(_0xb256f2)_0x346bf5[_0x137fa8(0x245)]();_0x16135a&&_0x346bf5[_0x137fa8(0x8c6)]()&&_0x346bf5[_0x137fa8(0x195)]();}}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x818),_0x5ece5f=>{const _0x1ac27f=_0x588453;if(!SceneManager[_0x1ac27f(0x8b8)]())return;VisuMZ[_0x1ac27f(0x5f6)](_0x5ece5f,_0x5ece5f);const _0x23ce63=VisuMZ[_0x1ac27f(0xa11)](_0x5ece5f[_0x1ac27f(0x77c)]);for(const _0x34c301 of _0x23ce63){if(!_0x34c301)continue;_0x34c301[_0x1ac27f(0xabc)](_0x5ece5f['Immortal']);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x3ea),_0x5f5392=>{const _0x28d559=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x28d559(0x5f6)](_0x5f5392,_0x5f5392);const _0x18fd6b=BattleManager[_0x28d559(0x2a8)],_0x2776f0={'criticalHitRate':_0x5f5392[_0x28d559(0x345)],'criticalHitFlat':_0x5f5392[_0x28d559(0x8fc)],'criticalDmgRate':_0x5f5392[_0x28d559(0x9fb)],'criticalDmgFlat':_0x5f5392['CriticalDmgFlat'],'damageRate':_0x5f5392[_0x28d559(0x297)],'damageFlat':_0x5f5392[_0x28d559(0x98a)],'hitRate':_0x5f5392[_0x28d559(0x66a)],'hitFlat':_0x5f5392[_0x28d559(0x27b)]};_0x18fd6b[_0x28d559(0x320)]=_0x2776f0;}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x785),_0x3345a9=>{const _0x5fd0de=_0x588453;if(!SceneManager[_0x5fd0de(0x8b8)]())return;VisuMZ[_0x5fd0de(0x5f6)](_0x3345a9,_0x3345a9);const _0x4ddd50=_0x3345a9[_0x5fd0de(0x312)];SceneManager['_scene'][_0x5fd0de(0xa0e)](_0x4ddd50);}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x43b),_0x2bdb57=>{const _0x55e916=_0x588453;if(!SceneManager[_0x55e916(0x8b8)]())return;if(!Imported[_0x55e916(0xc7)])return;if(!BattleManager[_0x55e916(0x1fc)]())return;VisuMZ[_0x55e916(0x5f6)](_0x2bdb57,_0x2bdb57);const _0x5106ba=VisuMZ['CreateActionSequenceTargets'](_0x2bdb57[_0x55e916(0x77c)]);for(const _0x50211d of _0x5106ba){if(!_0x50211d)continue;let _0x32161e=_0x2bdb57[_0x55e916(0x885)],_0x28a662=_0x2bdb57[_0x55e916(0x7da)],_0x26da6f=_0x2bdb57[_0x55e916(0x2b0)];BattleManager['_actionBattlers'][_0x55e916(0x51e)](_0x50211d)?_0x32161e+=_0x26da6f:_0x28a662+=_0x26da6f,BattleManager['turnOrderChangeOTB'](_0x50211d,-_0x32161e,![]),BattleManager[_0x55e916(0x1b1)](_0x50211d,-_0x28a662,!![]);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x3b0),_0x2dc765=>{const _0x29cc22=_0x588453;if(!SceneManager[_0x29cc22(0x8b8)]())return;if(!Imported[_0x29cc22(0x865)])return;if(!BattleManager[_0x29cc22(0xa3e)]())return;VisuMZ['ConvertParams'](_0x2dc765,_0x2dc765);const _0x46b8c6=BattleManager[_0x29cc22(0x5a9)][_0x29cc22(0x6f5)](),_0x416ca7=_0x2dc765[_0x29cc22(0xa9c)],_0x393356=_0x2dc765['alterChange']||'unchanged',_0x56aede=_0x2dc765[_0x29cc22(0x402)]||'unchanged',_0x36d26e=_0x2dc765[_0x29cc22(0x5c6)]||0x0,_0x24b2c5=_0x2dc765['alterPriority']||0x0;(_0x46b8c6['canAlterActionCostPTB']()||_0x416ca7)&&(_0x416ca7&&(_0x46b8c6['_ptbActionCost']=_0x46b8c6[_0x29cc22(0x2fb)]||{},_0x46b8c6[_0x29cc22(0x2fb)]['priority']=0x0),_0x46b8c6[_0x29cc22(0x5f3)](_0x393356,_0x56aede,_0x36d26e,_0x24b2c5));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_PtbConvert',_0x11de26=>{const _0x5a3195=_0x588453;if(!SceneManager[_0x5a3195(0x8b8)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x5a3195(0xa3e)]())return;VisuMZ[_0x5a3195(0x5f6)](_0x11de26,_0x11de26);const _0x3c1b88=BattleManager['_subject'][_0x5a3195(0x6f5)]();let _0x56dea5=Math[_0x5a3195(0x85e)](_0x11de26['ConvertCount'],0x0),_0x49b87a=_0x3c1b88[_0x5a3195(0x5d9)](),_0x29b47b=_0x3c1b88[_0x5a3195(0x9c6)]();while(_0x56dea5--){if(_0x49b87a<=0x0&&_0x29b47b<=0x0)break;else _0x49b87a>0x0?(_0x49b87a--,_0x29b47b++):_0x29b47b--;}_0x3c1b88[_0x5a3195(0x4e4)](_0x49b87a),_0x3c1b88[_0x5a3195(0x8ec)](_0x29b47b);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x3b5),_0x19e759=>{const _0x2319d9=_0x588453;if(!SceneManager[_0x2319d9(0x8b8)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x2319d9(0xa3e)]())return;VisuMZ[_0x2319d9(0x5f6)](_0x19e759,_0x19e759);const _0x55cac0=BattleManager['_subject'][_0x2319d9(0x6f5)]();let _0x6da790=_0x19e759['FullActions'],_0x32fafb=_0x19e759[_0x2319d9(0x1a0)];_0x55cac0[_0x2319d9(0x264)](_0x6da790),_0x55cac0[_0x2319d9(0x659)](_0x32fafb);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x34c693=>{const _0x1ed0a9=_0x588453;if(!SceneManager[_0x1ed0a9(0x8b8)]())return;VisuMZ['ConvertParams'](_0x34c693,_0x34c693);const _0x19f228=['MAXHP',_0x1ed0a9(0xada),_0x1ed0a9(0x708),_0x1ed0a9(0x6e0),'MAT',_0x1ed0a9(0x6b4),_0x1ed0a9(0x852),_0x1ed0a9(0x992)],_0x244eab=_0x34c693[_0x1ed0a9(0x85b)],_0x30b346=_0x34c693[_0x1ed0a9(0x993)],_0x5f0d5a=VisuMZ[_0x1ed0a9(0xa11)](_0x34c693[_0x1ed0a9(0x77c)]);for(const _0x53d6e6 of _0x5f0d5a){if(!_0x53d6e6)continue;for(const _0x3d98bc of _0x244eab){const _0x4b8a14=_0x19f228[_0x1ed0a9(0x512)](_0x3d98bc[_0x1ed0a9(0x3c2)]()[_0x1ed0a9(0x4f2)]());_0x4b8a14>=0x0&&_0x4b8a14<=0x7&&_0x53d6e6['isBuffAffected'](_0x4b8a14)&&_0x53d6e6[_0x1ed0a9(0xa22)](_0x4b8a14);}for(const _0x2a3248 of _0x30b346){const _0x2068b5=_0x19f228['indexOf'](_0x2a3248[_0x1ed0a9(0x3c2)]()[_0x1ed0a9(0x4f2)]());_0x2068b5>=0x0&&_0x2068b5<=0x7&&_0x53d6e6['isDebuffAffected'](_0x2068b5)&&_0x53d6e6[_0x1ed0a9(0xa22)](_0x2068b5);}}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_RemoveState',_0xfc7cd6=>{const _0x95713b=_0x588453;if(!SceneManager[_0x95713b(0x8b8)]())return;VisuMZ[_0x95713b(0x5f6)](_0xfc7cd6,_0xfc7cd6);const _0x418c2b=_0xfc7cd6[_0x95713b(0x8c3)],_0x45014f=VisuMZ[_0x95713b(0xa11)](_0xfc7cd6[_0x95713b(0x77c)]);for(const _0x388d38 of _0x45014f){if(!_0x388d38)continue;for(const _0xd8caa8 of _0x418c2b){_0x388d38[_0x95713b(0xf0)](_0xd8caa8);}}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x439),_0x3322d1=>{const _0xae50e0=_0x588453;if(!SceneManager[_0xae50e0(0x8b8)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0xae50e0(0x5f6)](_0x3322d1,_0x3322d1);const _0x12a083=VisuMZ[_0xae50e0(0xa11)](_0x3322d1[_0xae50e0(0x77c)]),_0x11fe9f=Number(_0x3322d1[_0xae50e0(0x9c3)]),_0x1b96f7=Number(_0x3322d1[_0xae50e0(0x3fc)]),_0x4874c2=_0x3322d1['AutoAddState'];for(const _0x5d2cf8 of _0x12a083){if(!_0x5d2cf8)continue;_0x4874c2&&!_0x5d2cf8[_0xae50e0(0x104)](_0x11fe9f)?(_0x5d2cf8['addState'](_0x11fe9f),_0x5d2cf8[_0xae50e0(0x970)](_0x11fe9f,_0x1b96f7)):_0x5d2cf8['addStateTurns'](_0x11fe9f,_0x1b96f7);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x4ce),_0xe80621=>{const _0x5aa09d=_0x588453;if(!SceneManager[_0x5aa09d(0x8b8)]())return;if(!Imported[_0x5aa09d(0x384)])return;VisuMZ[_0x5aa09d(0x5f6)](_0xe80621,_0xe80621);const _0x535fb0=VisuMZ[_0x5aa09d(0xa11)](_0xe80621['Targets']),_0x2548e6=Number(_0xe80621[_0x5aa09d(0x9c3)]),_0x233c0b=Math['max'](Number(_0xe80621['Turns']),0x0),_0x440c62=_0xe80621['AutoAddState'];for(const _0x310901 of _0x535fb0){if(!_0x310901)continue;_0x440c62&&!_0x310901[_0x5aa09d(0x104)](_0x2548e6)&&_0x310901['addState'](_0x2548e6),_0x310901[_0x5aa09d(0x970)](_0x2548e6,_0x233c0b);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Mechanics_StbExploit',_0x1ae401=>{const _0x366be7=_0x588453;if(!SceneManager[_0x366be7(0x8b8)]())return;if(!Imported[_0x366be7(0x88e)])return;if(!BattleManager[_0x366be7(0x690)]())return;VisuMZ[_0x366be7(0x5f6)](_0x1ae401,_0x1ae401);const _0x50ac74=_0x1ae401[_0x366be7(0x8a4)],_0x50b188=VisuMZ['CreateActionSequenceTargets'](_0x1ae401[_0x366be7(0x77c)]),_0x40ab5a=_0x1ae401[_0x366be7(0x5c9)],_0x383fe9=_0x1ae401['Exploiter'],_0x134731=_0x1ae401[_0x366be7(0x21c)],_0x7ab450=BattleManager[_0x366be7(0x2a8)];if(_0x50ac74)for(const _0x2423f1 of _0x50b188){if(!_0x2423f1)continue;if(_0x2423f1===user)continue;if(_0x40ab5a)_0x2423f1['setSTBExploited'](![]);_0x2423f1[_0x366be7(0x1df)](BattleManager[_0x366be7(0x5a9)],_0x7ab450);}if(_0x383fe9&&BattleManager[_0x366be7(0x5a9)]){if(_0x134731)BattleManager['_subject'][_0x366be7(0xa13)](![]);const _0x4eeaed=_0x50b188[0x0];BattleManager['performSTBExploiter'](_0x4eeaed,_0x7ab450);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x8d4),_0x457a90=>{const _0x9ab185=_0x588453;if(!SceneManager[_0x9ab185(0x8b8)]())return;if(!Imported[_0x9ab185(0x88e)])return;if(!BattleManager[_0x9ab185(0x690)]())return;VisuMZ[_0x9ab185(0x5f6)](_0x457a90,_0x457a90);const _0x2212d6=_0x457a90[_0x9ab185(0x60f)];BattleManager['_subject']&&BattleManager[_0x9ab185(0x5a9)]['stbGainInstant'](_0x2212d6);}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x6ea),_0x583193=>{const _0xc87916=_0x588453;if(!SceneManager[_0xc87916(0x8b8)]())return;if(!Imported[_0xc87916(0x88e)])return;if(!BattleManager[_0xc87916(0x690)]())return;VisuMZ[_0xc87916(0x5f6)](_0x583193,_0x583193);let _0x13caf2=_0x583193[_0xc87916(0x60f)];if(BattleManager[_0xc87916(0x5a9)]){BattleManager[_0xc87916(0x5a9)][_0xc87916(0x6ee)]=BattleManager['_subject'][_0xc87916(0x6ee)]||[];while(_0x13caf2--){if(BattleManager[_0xc87916(0x5a9)][_0xc87916(0x6ee)][_0xc87916(0x6e3)]<=0x0)break;BattleManager[_0xc87916(0x5a9)]['_actions'][_0xc87916(0x41a)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x52a),_0x1949ef=>{const _0xfad6f4=_0x588453;if(!SceneManager[_0xfad6f4(0x8b8)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0xfad6f4(0x5f6)](_0x1949ef,_0x1949ef);const _0x2ff78b=VisuMZ[_0xfad6f4(0xa11)](_0x1949ef[_0xfad6f4(0x77c)]),_0x387472=_0x1949ef['WeaponTypeID'];for(const _0x425841 of _0x2ff78b){if(!_0x425841)continue;if(!_0x425841[_0xfad6f4(0xa52)]())continue;_0x425841[_0xfad6f4(0x226)](_0x387472);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x4fa),_0x53b138=>{const _0x3bd1d6=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x53b138,_0x53b138);const _0xeb2756=VisuMZ[_0x3bd1d6(0xa11)](_0x53b138[_0x3bd1d6(0x77c)]),_0x420255=_0x53b138[_0x3bd1d6(0x11f)],_0x4d8272={'textColor':ColorManager[_0x3bd1d6(0x74a)](_0x53b138['TextColor']),'flashColor':_0x53b138[_0x3bd1d6(0x446)],'flashDuration':_0x53b138[_0x3bd1d6(0x37d)]};for(const _0x251527 of _0xeb2756){if(!_0x251527)continue;_0x251527['setupTextPopup'](_0x420255,_0x4d8272);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x71a),_0x222a30=>{const _0x1bfa3a=_0x588453;if(!SceneManager[_0x1bfa3a(0x8b8)]())return;VisuMZ[_0x1bfa3a(0x5f6)](_0x222a30,_0x222a30);const _0x11d582=VisuMZ['CreateActionSequenceTargets'](_0x222a30[_0x1bfa3a(0x77c)]);let _0x45fd17=$gameVariables[_0x1bfa3a(0xab9)](_0x222a30['Variable']);Imported[_0x1bfa3a(0xe0)]&&_0x222a30[_0x1bfa3a(0x4e7)]&&(_0x45fd17=VisuMZ['GroupDigits'](_0x45fd17));const _0x566da5=String(_0x45fd17),_0x3c8def={'textColor':ColorManager[_0x1bfa3a(0x74a)](_0x222a30[_0x1bfa3a(0x623)]),'flashColor':_0x222a30[_0x1bfa3a(0x446)],'flashDuration':_0x222a30[_0x1bfa3a(0x37d)]};for(const _0x312fbf of _0x11d582){if(!_0x312fbf)continue;_0x312fbf['setupTextPopup'](_0x566da5,_0x3c8def);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x7a8),_0x383638=>{const _0x570c0e=_0x588453;if(!SceneManager[_0x570c0e(0x8b8)]())return;const _0x5afc41=$gameTemp[_0x570c0e(0x26a)]();if(!_0x5afc41)return;_0x5afc41[_0x570c0e(0xa68)]('battleEffect');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x461),_0x3adcc5=>{const _0x4c92be=_0x588453;if(!SceneManager[_0x4c92be(0x8b8)]())return;VisuMZ[_0x4c92be(0x5f6)](_0x3adcc5,_0x3adcc5);const _0x462f76=VisuMZ[_0x4c92be(0xa11)](_0x3adcc5[_0x4c92be(0x77c)]);for(const _0x5166b0 of _0x462f76){if(!_0x5166b0)continue;_0x5166b0[_0x4c92be(0x745)]();}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Motion_FreezeMotionFrame',_0x4483f3=>{const _0x3f0f7a=_0x588453;if(!SceneManager[_0x3f0f7a(0x8b8)]())return;VisuMZ[_0x3f0f7a(0x5f6)](_0x4483f3,_0x4483f3);const _0x1bc1a4=VisuMZ['CreateActionSequenceTargets'](_0x4483f3[_0x3f0f7a(0x77c)]),_0xfd4944=_0x4483f3[_0x3f0f7a(0xa7b)]['toLowerCase']()[_0x3f0f7a(0x4f2)]();let _0x51a122=_0x4483f3[_0x3f0f7a(0x315)];const _0x3eab6d=_0x4483f3[_0x3f0f7a(0x75e)];![_0x3f0f7a(0x246),_0x3f0f7a(0xaa4),_0x3f0f7a(0xaa0),_0x3f0f7a(0x3b1)][_0x3f0f7a(0x51e)](_0xfd4944)&&(_0x51a122=![]);for(const _0x116ce1 of _0x1bc1a4){if(!_0x116ce1)continue;_0x116ce1['freezeMotion'](_0xfd4944,_0x51a122,_0x3eab6d);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x44c),_0x2902ec=>{const _0x11ed44=_0x588453;if(!SceneManager[_0x11ed44(0x8b8)]())return;VisuMZ[_0x11ed44(0x5f6)](_0x2902ec,_0x2902ec);const _0x46289a=VisuMZ[_0x11ed44(0xa11)](_0x2902ec[_0x11ed44(0x77c)]),_0x20e47e=_0x2902ec['MotionType'][_0x11ed44(0x939)]()[_0x11ed44(0x4f2)](),_0x34f23d=_0x2902ec[_0x11ed44(0x315)];for(const _0x385d02 of _0x46289a){if(!_0x385d02)continue;_0x385d02[_0x11ed44(0x26b)]=_0x34f23d;if(_0x20e47e['match'](/ATTACK[ ](\d+)/i))_0x385d02[_0x11ed44(0x2f2)](Number(RegExp['$1']));else _0x20e47e===_0x11ed44(0x246)?_0x385d02[_0x11ed44(0x3cb)]():_0x385d02['requestMotion'](_0x20e47e);if(!_0x34f23d)_0x385d02[_0x11ed44(0x305)](0x0);else{if(_0x34f23d&&['thrust','swing','missle']['includes'](_0x20e47e)){}}_0x385d02[_0x11ed44(0x26b)]=undefined;}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x5b3),_0x5b0dc9=>{const _0x1dfb7d=_0x588453;if(!SceneManager[_0x1dfb7d(0x8b8)]())return;VisuMZ[_0x1dfb7d(0x5f6)](_0x5b0dc9,_0x5b0dc9);const _0x527d13=BattleManager[_0x1dfb7d(0x2a8)];if(!_0x527d13)return;if(!_0x527d13['item']())return;const _0x39c6e8=VisuMZ[_0x1dfb7d(0xa11)](_0x5b0dc9[_0x1dfb7d(0x77c)]);for(const _0x3c38c1 of _0x39c6e8){if(!_0x3c38c1)continue;_0x3c38c1['performAction'](_0x527d13);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Motion_RefreshMotion',_0x1e3f6c=>{const _0x61a67e=_0x588453;if(!SceneManager[_0x61a67e(0x8b8)]())return;VisuMZ[_0x61a67e(0x5f6)](_0x1e3f6c,_0x1e3f6c);const _0x6bed22=VisuMZ['CreateActionSequenceTargets'](_0x1e3f6c[_0x61a67e(0x77c)]);for(const _0x7b77d5 of _0x6bed22){if(!_0x7b77d5)continue;if(!_0x7b77d5[_0x61a67e(0xabe)]())continue;_0x7b77d5['battler']()['refreshMotion']();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x2a2),_0x5e803b=>{const _0x34ed62=_0x588453;if(!SceneManager[_0x34ed62(0x8b8)]())return;VisuMZ[_0x34ed62(0x5f6)](_0x5e803b,_0x5e803b);const _0xafee73=$gameTemp[_0x34ed62(0x26a)](),_0x40ccbc=_0x5e803b[_0x34ed62(0x681)]*Sprite_Battler['_motionSpeed'];_0xafee73['wait'](_0x40ccbc);}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0xa30),_0xe6c721=>{const _0x5038b3=_0x588453;if(!SceneManager[_0x5038b3(0x8b8)]())return;VisuMZ['ConvertParams'](_0xe6c721,_0xe6c721);const _0x9b0821=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f6ae7=BattleManager[_0x5038b3(0x2a8)];if(!_0x9b0821||!_0x1f6ae7)return;if(!_0x1f6ae7[_0x5038b3(0x343)]())return;const _0x32850c=VisuMZ['CreateActionSequenceTargets'](_0xe6c721['Targets']);for(const _0x4edc0c of _0x32850c){if(!_0x4edc0c)continue;_0x4edc0c[_0x5038b3(0x5ec)](_0x1f6ae7);}if(_0xe6c721[_0x5038b3(0x30c)])_0x9b0821[_0x5038b3(0xa68)](_0x5038b3(0x381));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x7b5),_0x3b162a=>{const _0x276d36=_0x588453;if(!SceneManager[_0x276d36(0x8b8)]())return;if(!$gameSystem[_0x276d36(0x879)]())return;VisuMZ[_0x276d36(0x5f6)](_0x3b162a,_0x3b162a);const _0x4f1c2d=$gameTemp['getLastPluginCommandInterpreter'](),_0x4208ea=VisuMZ[_0x276d36(0xa11)](_0x3b162a['Targets']),_0x254da8=_0x3b162a[_0x276d36(0x2e5)],_0x24a410=_0x3b162a[_0x276d36(0x330)],_0x145595=_0x3b162a[_0x276d36(0x1f7)],_0x1bcbae=_0x3b162a[_0x276d36(0x84a)],_0x23aa11=_0x3b162a['FaceDirection'],_0x49d595=_0x3b162a[_0x276d36(0x884)],_0x502968=_0x3b162a[_0x276d36(0xa7b)],_0x81174d=_0x3b162a[_0x276d36(0x30c)];if(!_0x4f1c2d)return;for(const _0x4d8fd7 of _0x4208ea){if(!_0x4d8fd7)continue;let _0x53a25f=_0x24a410,_0x12c6c4=_0x145595;if(_0x254da8[_0x276d36(0x809)](/horz/i))_0x53a25f*=_0x4d8fd7[_0x276d36(0xa52)]()?-0x1:0x1;if(_0x254da8['match'](/vert/i))_0x12c6c4*=_0x4d8fd7[_0x276d36(0xa52)]()?-0x1:0x1;_0x4d8fd7[_0x276d36(0xad5)](_0x53a25f,_0x12c6c4,_0x1bcbae,_0x23aa11,_0x49d595),_0x4d8fd7[_0x276d36(0x573)](_0x502968);}if(_0x81174d)_0x4f1c2d[_0x276d36(0xa68)](_0x276d36(0x381));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x860),_0x2c7c6=>{const _0x79173d=_0x588453;if(!SceneManager[_0x79173d(0x8b8)]())return;if(!$gameSystem[_0x79173d(0x879)]())return;VisuMZ['ConvertParams'](_0x2c7c6,_0x2c7c6);const _0x1dad43=$gameTemp[_0x79173d(0x26a)](),_0x5a6b7b=VisuMZ[_0x79173d(0xa11)](_0x2c7c6[_0x79173d(0x77c)]),_0xd9bee2=_0x2c7c6[_0x79173d(0x763)],_0x69a61=_0x2c7c6['OffsetX'],_0x4994e6=_0x2c7c6[_0x79173d(0xcb)],_0x54f7e2=_0x2c7c6[_0x79173d(0x84a)],_0x3d6627=_0x2c7c6['FaceDirection'],_0x1155cc=_0x2c7c6['EasingType'],_0x4ab963=_0x2c7c6[_0x79173d(0xa7b)],_0x5df3a8=_0x2c7c6[_0x79173d(0x30c)];if(!_0x1dad43)return;for(const _0xa41c65 of _0x5a6b7b){if(!_0xa41c65)continue;const _0x18156d=_0x2c7c6['DestinationJS'](_0xa41c65)||{'x':0x0,'y':0x0};let _0xd4de6d=_0x18156d['x'],_0x347317=_0x18156d['y'];if(_0xd9bee2[_0x79173d(0x809)](/none/i))_0xd4de6d+=_0x69a61,_0x347317+=_0x4994e6;else{if(_0xd9bee2['match'](/horz/i)&&_0xd9bee2[_0x79173d(0x809)](/vert/i))_0xd4de6d+=_0xa41c65[_0x79173d(0xa52)]()?-_0x69a61:_0x69a61,_0x347317+=_0xa41c65[_0x79173d(0xa52)]()?-_0x4994e6:_0x4994e6;else{if(_0xd9bee2[_0x79173d(0x809)](/horz/i))_0xd4de6d+=_0xa41c65[_0x79173d(0xa52)]()?-_0x69a61:_0x69a61,_0x347317+=_0x4994e6;else _0xd9bee2[_0x79173d(0x809)](/vert/i)&&(_0xd4de6d+=_0x69a61,_0x347317+=_0xa41c65[_0x79173d(0xa52)]()?-_0x4994e6:_0x4994e6);}}_0xa41c65[_0x79173d(0x8c4)](_0xd4de6d,_0x347317,_0x54f7e2,_0x3d6627,_0x1155cc,-0x1),_0xa41c65['requestMotion'](_0x4ab963);}if(_0x5df3a8)_0x1dad43[_0x79173d(0xa68)](_0x79173d(0x381));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x967),_0x325493=>{const _0x1d5cf8=_0x588453;if(!SceneManager[_0x1d5cf8(0x8b8)]())return;if(!$gameSystem[_0x1d5cf8(0x879)]())return;VisuMZ[_0x1d5cf8(0x5f6)](_0x325493,_0x325493);const _0x4a6370=$gameTemp[_0x1d5cf8(0x26a)](),_0xd761a0=VisuMZ[_0x1d5cf8(0xa11)](_0x325493[_0x1d5cf8(0x77c)]),_0x5c4274=_0x325493[_0x1d5cf8(0x8bf)],_0x2e3e68=_0x325493['OffsetAdjust'],_0x37334d=_0x325493[_0x1d5cf8(0x4f7)],_0x1f80e8=_0x325493[_0x1d5cf8(0xcb)],_0xfb1d64=_0x325493[_0x1d5cf8(0x84a)],_0x58381b=_0x325493['FaceDirection'],_0x2f349b=_0x325493['EasingType'],_0x2b384a=_0x325493['MotionType'],_0x9c72e9=_0x325493[_0x1d5cf8(0x30c)];if(!_0x4a6370)return;for(const _0x1b5299 of _0xd761a0){if(!_0x1b5299)continue;let _0x1efd14=_0x1b5299['battler']()[_0x1d5cf8(0x494)],_0x1a6fca=_0x1b5299['battler']()[_0x1d5cf8(0xaba)];if(_0x5c4274['match'](/home/i))_0x1efd14=_0x1b5299['battler']()['_homeX'],_0x1a6fca=_0x1b5299[_0x1d5cf8(0xabe)]()[_0x1d5cf8(0x628)];else{if(_0x5c4274['match'](/center/i))_0x1efd14=Graphics[_0x1d5cf8(0x586)]/0x2,_0x1a6fca=Graphics[_0x1d5cf8(0x571)]/0x2;else _0x5c4274[_0x1d5cf8(0x809)](/point (\d+), (\d+)/i)&&(_0x1efd14=Number(RegExp['$1']),_0x1a6fca=Number(RegExp['$2']));}if(_0x2e3e68[_0x1d5cf8(0x809)](/none/i))_0x1efd14+=_0x37334d,_0x1a6fca+=_0x1f80e8;else{if(_0x2e3e68[_0x1d5cf8(0x809)](/horz/i)&&_0x2e3e68['match'](/vert/i))_0x1efd14+=_0x1b5299['isActor']()?-_0x37334d:_0x37334d,_0x1a6fca+=_0x1b5299[_0x1d5cf8(0xa52)]()?-_0x1f80e8:_0x1f80e8;else{if(_0x2e3e68[_0x1d5cf8(0x809)](/horz/i))_0x1efd14+=_0x1b5299[_0x1d5cf8(0xa52)]()?-_0x37334d:_0x37334d,_0x1a6fca+=_0x1f80e8;else _0x2e3e68[_0x1d5cf8(0x809)](/vert/i)&&(_0x1efd14+=_0x37334d,_0x1a6fca+=_0x1b5299[_0x1d5cf8(0xa52)]()?-_0x1f80e8:_0x1f80e8);}}_0x1b5299[_0x1d5cf8(0x8c4)](_0x1efd14,_0x1a6fca,_0xfb1d64,_0x58381b,_0x2f349b,-0x1),_0x1b5299['requestMotion'](_0x2b384a);}if(_0x9c72e9)_0x4a6370[_0x1d5cf8(0xa68)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_HomeMoveToTarget',_0xc69680=>{const _0x58365c=_0x588453;if(!SceneManager[_0x58365c(0x8b8)]())return;if(!$gameSystem[_0x58365c(0x879)]())return;VisuMZ[_0x58365c(0x5f6)](_0xc69680,_0xc69680);const _0x1d27ad=$gameTemp[_0x58365c(0x26a)](),_0x21492e=VisuMZ[_0x58365c(0xa11)](_0xc69680[_0x58365c(0x915)]),_0x4334f8=VisuMZ['CreateActionSequenceTargets'](_0xc69680[_0x58365c(0x9ec)]),_0x3fc172=_0xc69680[_0x58365c(0x55c)];let _0x1ab207=_0xc69680['MeleeDistance'];const _0x4c4942=_0xc69680[_0x58365c(0x763)],_0x4cae7b=_0xc69680['OffsetX'],_0x201c55=_0xc69680['OffsetY'],_0x423a1c=_0xc69680[_0x58365c(0x84a)],_0x4ac537=_0xc69680[_0x58365c(0x452)],_0x47dc70=_0xc69680[_0x58365c(0x884)],_0x48f364=_0xc69680[_0x58365c(0xa7b)],_0x463f2e=_0xc69680['WaitForMovement'],_0x43e76e=Math[_0x58365c(0x31b)](..._0x4334f8[_0x58365c(0x89e)](_0x36144c=>_0x36144c['battler']()['_baseX']-_0x36144c[_0x58365c(0xabe)]()[_0x58365c(0xae1)]()/0x2)),_0x312f62=Math['max'](..._0x4334f8[_0x58365c(0x89e)](_0x2dc43b=>_0x2dc43b['battler']()['_baseX']+_0x2dc43b['battler']()['mainSpriteWidth']()/0x2)),_0x31e62a=Math[_0x58365c(0x31b)](..._0x4334f8[_0x58365c(0x89e)](_0x3886ce=>_0x3886ce[_0x58365c(0xabe)]()[_0x58365c(0xaba)]-_0x3886ce[_0x58365c(0xabe)]()['mainSpriteHeight']())),_0x5f1fd7=Math[_0x58365c(0x85e)](..._0x4334f8[_0x58365c(0x89e)](_0x26c98b=>_0x26c98b[_0x58365c(0xabe)]()[_0x58365c(0xaba)])),_0x10d957=_0x4334f8[_0x58365c(0x38d)](_0x8fb764=>_0x8fb764[_0x58365c(0xa52)]())[_0x58365c(0x6e3)],_0x5e9dc1=_0x4334f8[_0x58365c(0x38d)](_0x1e715e=>_0x1e715e['isEnemy']())[_0x58365c(0x6e3)];let _0x515b1c=0x0,_0x47f9ab=0x0;if(_0x3fc172[_0x58365c(0x809)](/front/i))_0x515b1c=_0x10d957>=_0x5e9dc1?_0x43e76e:_0x312f62;else{if(_0x3fc172[_0x58365c(0x809)](/middle/i))_0x515b1c=(_0x43e76e+_0x312f62)/0x2,_0x1ab207=-0x1;else _0x3fc172['match'](/back/i)&&(_0x515b1c=_0x10d957>=_0x5e9dc1?_0x312f62:_0x43e76e);}if(_0x3fc172['match'](/head/i))_0x47f9ab=_0x31e62a;else{if(_0x3fc172[_0x58365c(0x809)](/center/i))_0x47f9ab=(_0x31e62a+_0x5f1fd7)/0x2;else _0x3fc172['match'](/base/i)&&(_0x47f9ab=_0x5f1fd7);}if(!_0x1d27ad)return;for(const _0x3f27e2 of _0x21492e){if(!_0x3f27e2)continue;let _0x5de0f2=_0x515b1c,_0x3e41b1=_0x47f9ab;if(_0x4c4942[_0x58365c(0x809)](/none/i))_0x5de0f2+=_0x4cae7b,_0x3e41b1+=_0x201c55;else{if(_0x4c4942[_0x58365c(0x809)](/horz/i)&&_0x4c4942['match'](/vert/i))_0x5de0f2+=_0x3f27e2['isActor']()?-_0x4cae7b:_0x4cae7b,_0x3e41b1+=_0x3f27e2[_0x58365c(0xa52)]()?-_0x201c55:_0x201c55;else{if(_0x4c4942[_0x58365c(0x809)](/horz/i))_0x5de0f2+=_0x3f27e2[_0x58365c(0xa52)]()?-_0x4cae7b:_0x4cae7b,_0x3e41b1+=_0x201c55;else _0x4c4942[_0x58365c(0x809)](/vert/i)&&(_0x5de0f2+=_0x4cae7b,_0x3e41b1+=_0x3f27e2[_0x58365c(0xa52)]()?-_0x201c55:_0x201c55);}}_0x3f27e2[_0x58365c(0x8c4)](_0x5de0f2,_0x3e41b1,_0x423a1c,_0x4ac537,_0x47dc70,_0x1ab207),_0x3f27e2[_0x58365c(0x573)](_0x48f364);}if(_0x463f2e)_0x1d27ad[_0x58365c(0xa68)](_0x58365c(0x381));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x644),_0x129d95=>{const _0x1c349a=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1c349a(0x5f6)](_0x129d95,_0x129d95);const _0x4943e6=VisuMZ['CreateActionSequenceTargets'](_0x129d95['Targets']);let _0x488a40=_0x129d95[_0x1c349a(0x414)][_0x1c349a(0x809)](/back/i);for(const _0x5226e2 of _0x4943e6){if(!_0x5226e2)continue;if(_0x129d95[_0x1c349a(0x414)][_0x1c349a(0x809)](/rand/i))_0x488a40=Math[_0x1c349a(0xaa2)](0x2);_0x5226e2['setBattlerFlip'](!!_0x488a40);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x869),_0x4ae031=>{const _0x27390c=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x27390c(0x879)]())return;VisuMZ[_0x27390c(0x5f6)](_0x4ae031,_0x4ae031);const _0x12213e=VisuMZ[_0x27390c(0xa11)](_0x4ae031[_0x27390c(0x77c)]),_0x2ced8f=_0x4ae031[_0x27390c(0x15d)];for(const _0x3b5522 of _0x12213e){if(!_0x3b5522)continue;const _0x553f23=_0x4ae031[_0x27390c(0x722)](_0x3b5522)||{'x':0x0,'y':0x0};let _0x2b032b=_0x553f23['x'],_0x19cf73=_0x553f23['y'];_0x3b5522['setBattlerFacePoint'](Math[_0x27390c(0x422)](_0x2b032b),Math[_0x27390c(0x422)](_0x19cf73),!!_0x2ced8f);}}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Movement_FacePoint',_0x239c6a=>{const _0x3d9a15=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x3d9a15(0x879)]())return;VisuMZ[_0x3d9a15(0x5f6)](_0x239c6a,_0x239c6a);const _0x18a212=VisuMZ[_0x3d9a15(0xa11)](_0x239c6a[_0x3d9a15(0x77c)]);let _0x2c9fa8=_0x239c6a['Point'];const _0x2dcd77=_0x239c6a[_0x3d9a15(0x15d)];for(const _0x50c8a0 of _0x18a212){if(!_0x50c8a0)continue;let _0x236e02=_0x50c8a0['battler']()[_0x3d9a15(0x494)],_0x232448=_0x50c8a0[_0x3d9a15(0xabe)]()[_0x3d9a15(0xaba)];if(_0x2c9fa8['match'](/home/i))_0x236e02=_0x50c8a0[_0x3d9a15(0xabe)]()[_0x3d9a15(0x482)],_0x232448=_0x50c8a0['battler']()[_0x3d9a15(0x628)];else{if(_0x2c9fa8[_0x3d9a15(0x809)](/center/i))_0x236e02=Graphics[_0x3d9a15(0x586)]/0x2,_0x232448=Graphics[_0x3d9a15(0x571)]/0x2;else _0x2c9fa8['match'](/point (\d+), (\d+)/i)&&(_0x236e02=Number(RegExp['$1']),_0x232448=Number(RegExp['$2']));}_0x50c8a0[_0x3d9a15(0x90f)](Math[_0x3d9a15(0x422)](_0x236e02),Math[_0x3d9a15(0x422)](_0x232448),!!_0x2dcd77);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x45b),_0x2ab61a=>{const _0x562269=_0x588453;if(!SceneManager[_0x562269(0x8b8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x562269(0x5f6)](_0x2ab61a,_0x2ab61a);const _0x255a5f=VisuMZ['CreateActionSequenceTargets'](_0x2ab61a[_0x562269(0x915)]),_0x2ef795=VisuMZ[_0x562269(0xa11)](_0x2ab61a[_0x562269(0x9ec)]),_0x53b4c6=_0x2ef795[_0x562269(0x89e)](_0x4edc4e=>_0x4edc4e&&_0x4edc4e[_0x562269(0xabe)]()?_0x4edc4e['battler']()[_0x562269(0x494)]:0x0)/(_0x2ef795[_0x562269(0x6e3)]||0x1),_0x2d8547=_0x2ef795[_0x562269(0x89e)](_0x905ee4=>_0x905ee4&&_0x905ee4[_0x562269(0xabe)]()?_0x905ee4[_0x562269(0xabe)]()[_0x562269(0xaba)]:0x0)/(_0x2ef795[_0x562269(0x6e3)]||0x1),_0x1634b5=_0x2ab61a[_0x562269(0x15d)];for(const _0x590981 of _0x255a5f){if(!_0x590981)continue;_0x590981['setBattlerFacePoint'](Math[_0x562269(0x422)](_0x53b4c6),Math['round'](_0x2d8547),!!_0x1634b5);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xaec),_0xd1a7f7=>{const _0x18ee2f=_0x588453;if(!SceneManager[_0x18ee2f(0x8b8)]())return;VisuMZ[_0x18ee2f(0x5f6)](_0xd1a7f7,_0xd1a7f7);const _0x4f5d93=$gameTemp['getLastPluginCommandInterpreter'](),_0xf14244=VisuMZ[_0x18ee2f(0xa11)](_0xd1a7f7[_0x18ee2f(0x77c)]),_0x847285=_0xd1a7f7[_0x18ee2f(0x121)],_0x160a64=_0xd1a7f7[_0x18ee2f(0x84a)],_0xa8f3d6=_0xd1a7f7[_0x18ee2f(0x884)],_0x9c985c=_0xd1a7f7[_0x18ee2f(0x3cc)];if(!_0x4f5d93)return;for(const _0x24f335 of _0xf14244){if(!_0x24f335)continue;_0x24f335[_0x18ee2f(0x220)](_0x847285,_0x160a64,_0xa8f3d6);}if(_0x9c985c)_0x4f5d93[_0x18ee2f(0xa68)](_0x18ee2f(0x65d));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x654),_0x3be447=>{const _0x433bfe=_0x588453;if(!SceneManager[_0x433bfe(0x8b8)]())return;VisuMZ[_0x433bfe(0x5f6)](_0x3be447,_0x3be447);const _0x517a7e=$gameTemp[_0x433bfe(0x26a)]();if(!_0x517a7e)return;const _0x317fba=VisuMZ['CreateActionSequenceTargets'](_0x3be447[_0x433bfe(0x77c)]);for(const _0x405029 of _0x317fba){if(!_0x405029)continue;_0x405029[_0x433bfe(0x8b3)]();}BattleManager[_0x433bfe(0x5a9)]&&BattleManager[_0x433bfe(0x5a9)][_0x433bfe(0x5c3)]();if(_0x3be447['WaitForMovement'])_0x517a7e[_0x433bfe(0xa68)](_0x433bfe(0x381));}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x186),_0x14cf53=>{const _0x1be350=_0x588453;if(!SceneManager[_0x1be350(0x8b8)]())return;VisuMZ[_0x1be350(0x5f6)](_0x14cf53,_0x14cf53);const _0x2bd0ee=$gameTemp[_0x1be350(0x26a)](),_0x40d171=VisuMZ[_0x1be350(0xa11)](_0x14cf53[_0x1be350(0x77c)]),_0x58ca8c=_0x14cf53['Height'],_0x507d78=_0x14cf53['Duration'],_0x1f6c9a=_0x14cf53[_0x1be350(0x47e)];if(!_0x2bd0ee)return;for(const _0x52cf39 of _0x40d171){if(!_0x52cf39)continue;_0x52cf39[_0x1be350(0x6e8)](_0x58ca8c,_0x507d78);}if(_0x1f6c9a)_0x2bd0ee['setWaitMode']('battleJump');}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Movement_MoveBy',_0x5dd688=>{const _0x3a8c40=_0x588453;if(!SceneManager[_0x3a8c40(0x8b8)]())return;if(!$gameSystem[_0x3a8c40(0x879)]())return;VisuMZ[_0x3a8c40(0x5f6)](_0x5dd688,_0x5dd688);const _0x3be7f3=$gameTemp[_0x3a8c40(0x26a)](),_0x498d73=VisuMZ[_0x3a8c40(0xa11)](_0x5dd688[_0x3a8c40(0x77c)]),_0x3d4e20=_0x5dd688[_0x3a8c40(0x2e5)],_0x5a5adb=_0x5dd688[_0x3a8c40(0x330)],_0x36b487=_0x5dd688['DistanceY'],_0x14aa87=_0x5dd688['Duration'],_0xb6c084=_0x5dd688[_0x3a8c40(0x452)],_0x56f66c=_0x5dd688['EasingType'],_0x5195ce=_0x5dd688[_0x3a8c40(0xa7b)],_0x56b402=_0x5dd688[_0x3a8c40(0x30c)];if(!_0x3be7f3)return;for(const _0x30bcb4 of _0x498d73){if(!_0x30bcb4)continue;let _0xd71779=_0x5a5adb,_0x32143f=_0x36b487;if(_0x3d4e20['match'](/horz/i))_0xd71779*=_0x30bcb4[_0x3a8c40(0xa52)]()?-0x1:0x1;if(_0x3d4e20[_0x3a8c40(0x809)](/vert/i))_0x32143f*=_0x30bcb4['isActor']()?-0x1:0x1;_0x30bcb4['moveBattlerDistance'](_0xd71779,_0x32143f,_0x14aa87,_0xb6c084,_0x56f66c),_0x30bcb4[_0x3a8c40(0x573)](_0x5195ce);}if(_0x56b402)_0x3be7f3[_0x3a8c40(0xa68)](_0x3a8c40(0x381));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x603),_0x5cf791=>{const _0x1f3dc5=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1f3dc5(0x5f6)](_0x5cf791,_0x5cf791);const _0x552896=$gameTemp[_0x1f3dc5(0x26a)](),_0x213a13=VisuMZ[_0x1f3dc5(0xa11)](_0x5cf791[_0x1f3dc5(0x77c)]),_0x385839=_0x5cf791[_0x1f3dc5(0x763)],_0x30c100=_0x5cf791[_0x1f3dc5(0x4f7)],_0x29983d=_0x5cf791['OffsetY'],_0x319ead=_0x5cf791[_0x1f3dc5(0x84a)],_0x26148f=_0x5cf791[_0x1f3dc5(0x452)],_0x17d377=_0x5cf791[_0x1f3dc5(0x884)],_0xe63fa7=_0x5cf791[_0x1f3dc5(0xa7b)],_0x3003ae=_0x5cf791[_0x1f3dc5(0x30c)];if(!_0x552896)return;for(const _0xdcd823 of _0x213a13){if(!_0xdcd823)continue;const _0x35fcd7=_0x5cf791[_0x1f3dc5(0x779)](_0xdcd823)||{'x':0x0,'y':0x0};let _0x128fe0=_0x35fcd7['x'],_0x510269=_0x35fcd7['y'];if(_0x385839['match'](/none/i))_0x128fe0+=_0x30c100,_0x510269+=_0x29983d;else{if(_0x385839['match'](/horz/i)&&_0x385839[_0x1f3dc5(0x809)](/vert/i))_0x128fe0+=_0xdcd823[_0x1f3dc5(0xa52)]()?-_0x30c100:_0x30c100,_0x510269+=_0xdcd823[_0x1f3dc5(0xa52)]()?-_0x29983d:_0x29983d;else{if(_0x385839['match'](/horz/i))_0x128fe0+=_0xdcd823['isActor']()?-_0x30c100:_0x30c100,_0x510269+=_0x29983d;else _0x385839[_0x1f3dc5(0x809)](/vert/i)&&(_0x128fe0+=_0x30c100,_0x510269+=_0xdcd823[_0x1f3dc5(0xa52)]()?-_0x29983d:_0x29983d);}}_0xdcd823[_0x1f3dc5(0x2dc)](_0x128fe0,_0x510269,_0x319ead,_0x26148f,_0x17d377,-0x1),_0xdcd823['requestMotion'](_0xe63fa7);}if(_0x3003ae)_0x552896[_0x1f3dc5(0xa68)]('battleMove');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x9ef),_0x3fee81=>{const _0x1d688c=_0x588453;if(!SceneManager[_0x1d688c(0x8b8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x3fee81,_0x3fee81);const _0x2c6e4d=$gameTemp['getLastPluginCommandInterpreter'](),_0x14e4b4=VisuMZ['CreateActionSequenceTargets'](_0x3fee81['Targets']),_0x4d146f=_0x3fee81[_0x1d688c(0x8bf)],_0x745b1c=_0x3fee81[_0x1d688c(0x763)],_0x456551=_0x3fee81['OffsetX'],_0x3082c9=_0x3fee81['OffsetY'],_0x71e907=_0x3fee81[_0x1d688c(0x84a)],_0x15d066=_0x3fee81[_0x1d688c(0x452)],_0x59460c=_0x3fee81[_0x1d688c(0x884)],_0x49e07b=_0x3fee81[_0x1d688c(0xa7b)],_0x39abfe=_0x3fee81[_0x1d688c(0x30c)];if(!_0x2c6e4d)return;for(const _0x1eb425 of _0x14e4b4){if(!_0x1eb425)continue;let _0x34f9a4=_0x1eb425[_0x1d688c(0xabe)]()[_0x1d688c(0x494)],_0x5dc83a=_0x1eb425['battler']()['_baseY'];if(_0x4d146f[_0x1d688c(0x809)](/home/i))_0x34f9a4=_0x1eb425[_0x1d688c(0xabe)]()[_0x1d688c(0x482)],_0x5dc83a=_0x1eb425['battler']()[_0x1d688c(0x628)];else{if(_0x4d146f[_0x1d688c(0x809)](/center/i))_0x34f9a4=Graphics[_0x1d688c(0x586)]/0x2,_0x5dc83a=Graphics[_0x1d688c(0x571)]/0x2;else _0x4d146f[_0x1d688c(0x809)](/point (\d+), (\d+)/i)&&(_0x34f9a4=Number(RegExp['$1']),_0x5dc83a=Number(RegExp['$2']));}if(_0x745b1c[_0x1d688c(0x809)](/none/i))_0x34f9a4+=_0x456551,_0x5dc83a+=_0x3082c9;else{if(_0x745b1c[_0x1d688c(0x809)](/horz/i)&&_0x745b1c[_0x1d688c(0x809)](/vert/i))_0x34f9a4+=_0x1eb425['isActor']()?-_0x456551:_0x456551,_0x5dc83a+=_0x1eb425[_0x1d688c(0xa52)]()?-_0x3082c9:_0x3082c9;else{if(_0x745b1c[_0x1d688c(0x809)](/horz/i))_0x34f9a4+=_0x1eb425[_0x1d688c(0xa52)]()?-_0x456551:_0x456551,_0x5dc83a+=_0x3082c9;else _0x745b1c[_0x1d688c(0x809)](/vert/i)&&(_0x34f9a4+=_0x456551,_0x5dc83a+=_0x1eb425[_0x1d688c(0xa52)]()?-_0x3082c9:_0x3082c9);}}_0x1eb425[_0x1d688c(0x2dc)](_0x34f9a4,_0x5dc83a,_0x71e907,_0x15d066,_0x59460c,-0x1),_0x1eb425['requestMotion'](_0x49e07b);}if(_0x39abfe)_0x2c6e4d['setWaitMode'](_0x1d688c(0x381));}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Movement_MoveToTarget',_0xc8326c=>{const _0x5f2ed4=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5f2ed4(0x879)]())return;VisuMZ[_0x5f2ed4(0x5f6)](_0xc8326c,_0xc8326c);const _0x9bb65e=$gameTemp[_0x5f2ed4(0x26a)](),_0x56e0e4=VisuMZ[_0x5f2ed4(0xa11)](_0xc8326c[_0x5f2ed4(0x915)]),_0xf6cb02=VisuMZ[_0x5f2ed4(0xa11)](_0xc8326c[_0x5f2ed4(0x9ec)]),_0x25e0cb=_0xc8326c[_0x5f2ed4(0x55c)];let _0x3d67b3=_0xc8326c[_0x5f2ed4(0x9f7)];const _0x56870b=_0xc8326c[_0x5f2ed4(0x763)],_0x4c6cc9=_0xc8326c[_0x5f2ed4(0x4f7)],_0x37ba7c=_0xc8326c[_0x5f2ed4(0xcb)],_0x27c07f=_0xc8326c[_0x5f2ed4(0x84a)],_0x318e7d=_0xc8326c[_0x5f2ed4(0x452)],_0x3a511a=_0xc8326c[_0x5f2ed4(0x884)],_0x56e4c7=_0xc8326c[_0x5f2ed4(0xa7b)],_0x1a5c3a=_0xc8326c[_0x5f2ed4(0x30c)],_0x36e7f8=Math[_0x5f2ed4(0x31b)](..._0xf6cb02[_0x5f2ed4(0x89e)](_0x4b3bbf=>_0x4b3bbf[_0x5f2ed4(0xabe)]()[_0x5f2ed4(0x494)]-_0x4b3bbf[_0x5f2ed4(0xabe)]()['mainSpriteWidth']()/0x2)),_0x27f595=Math[_0x5f2ed4(0x85e)](..._0xf6cb02['map'](_0x43738a=>_0x43738a[_0x5f2ed4(0xabe)]()['_baseX']+_0x43738a[_0x5f2ed4(0xabe)]()[_0x5f2ed4(0xae1)]()/0x2)),_0x41e2ed=Math['min'](..._0xf6cb02['map'](_0xdf6834=>_0xdf6834[_0x5f2ed4(0xabe)]()[_0x5f2ed4(0xaba)]-_0xdf6834[_0x5f2ed4(0xabe)]()[_0x5f2ed4(0x7cf)]())),_0x2f2d44=Math[_0x5f2ed4(0x85e)](..._0xf6cb02[_0x5f2ed4(0x89e)](_0x51ed5e=>_0x51ed5e[_0x5f2ed4(0xabe)]()[_0x5f2ed4(0xaba)])),_0x80a688=_0xf6cb02[_0x5f2ed4(0x38d)](_0x35ba63=>_0x35ba63[_0x5f2ed4(0xa52)]())['length'],_0x345f9e=_0xf6cb02[_0x5f2ed4(0x38d)](_0x282e4e=>_0x282e4e['isEnemy']())['length'];let _0x154ba3=0x0,_0x40a042=0x0;if(_0x25e0cb['match'](/front/i))_0x154ba3=_0x80a688>=_0x345f9e?_0x36e7f8:_0x27f595;else{if(_0x25e0cb['match'](/middle/i))_0x154ba3=(_0x36e7f8+_0x27f595)/0x2,_0x3d67b3=-0x1;else _0x25e0cb[_0x5f2ed4(0x809)](/back/i)&&(_0x154ba3=_0x80a688>=_0x345f9e?_0x27f595:_0x36e7f8);}if(_0x25e0cb[_0x5f2ed4(0x809)](/head/i))_0x40a042=_0x41e2ed;else{if(_0x25e0cb['match'](/center/i))_0x40a042=(_0x41e2ed+_0x2f2d44)/0x2;else _0x25e0cb[_0x5f2ed4(0x809)](/base/i)&&(_0x40a042=_0x2f2d44);}if(!_0x9bb65e)return;for(const _0x11b59e of _0x56e0e4){if(!_0x11b59e)continue;let _0x587ea6=_0x154ba3,_0xac685=_0x40a042;if(_0x56870b[_0x5f2ed4(0x809)](/none/i))_0x587ea6+=_0x4c6cc9,_0xac685+=_0x37ba7c;else{if(_0x56870b['match'](/horz/i)&&_0x56870b[_0x5f2ed4(0x809)](/vert/i))_0x587ea6+=_0x11b59e[_0x5f2ed4(0xa52)]()?-_0x4c6cc9:_0x4c6cc9,_0xac685+=_0x11b59e[_0x5f2ed4(0xa52)]()?-_0x37ba7c:_0x37ba7c;else{if(_0x56870b[_0x5f2ed4(0x809)](/horz/i))_0x587ea6+=_0x11b59e[_0x5f2ed4(0xa52)]()?-_0x4c6cc9:_0x4c6cc9,_0xac685+=_0x37ba7c;else _0x56870b['match'](/vert/i)&&(_0x587ea6+=_0x4c6cc9,_0xac685+=_0x11b59e[_0x5f2ed4(0xa52)]()?-_0x37ba7c:_0x37ba7c);}}_0x11b59e[_0x5f2ed4(0x2dc)](_0x587ea6,_0xac685,_0x27c07f,_0x318e7d,_0x3a511a,_0x3d67b3),_0x11b59e[_0x5f2ed4(0x573)](_0x56e4c7);}if(_0x1a5c3a)_0x9bb65e[_0x5f2ed4(0xa68)]('battleMove');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x2cb),_0xe41d96=>{const _0x50e821=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x50e821(0x5f6)](_0xe41d96,_0xe41d96);const _0x44adc6=$gameTemp['getLastPluginCommandInterpreter'](),_0x4962ee=VisuMZ[_0x50e821(0xa11)](_0xe41d96[_0x50e821(0x77c)]),_0x25b303=_0xe41d96[_0x50e821(0x267)],_0x42fa85=_0xe41d96['Duration'],_0x13deea=_0xe41d96[_0x50e821(0x884)],_0x8be692=_0xe41d96[_0x50e821(0xd5)];if(!_0x44adc6)return;for(const _0x4625ef of _0x4962ee){if(!_0x4625ef)continue;_0x4625ef[_0x50e821(0x30b)](_0x25b303,_0x42fa85,_0x13deea);}if(_0x8be692)_0x44adc6['setWaitMode'](_0x50e821(0x9ad));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Movement_Scale',_0x5819b5=>{const _0xdf2bcf=_0x588453;if(!SceneManager[_0xdf2bcf(0x8b8)]())return;VisuMZ[_0xdf2bcf(0x5f6)](_0x5819b5,_0x5819b5);const _0x1e11c5=$gameTemp['getLastPluginCommandInterpreter'](),_0x2ab572=VisuMZ['CreateActionSequenceTargets'](_0x5819b5[_0xdf2bcf(0x77c)]),_0x67c7dc=_0x5819b5[_0xdf2bcf(0x76a)],_0x33da37=_0x5819b5[_0xdf2bcf(0xe3)],_0x1f48b5=_0x5819b5[_0xdf2bcf(0x84a)],_0x24c3e6=_0x5819b5[_0xdf2bcf(0x884)],_0x1bb24d=_0x5819b5[_0xdf2bcf(0x8b4)];if(!_0x1e11c5)return;for(const _0x1b72da of _0x2ab572){if(!_0x1b72da)continue;_0x1b72da[_0xdf2bcf(0x132)](_0x67c7dc,_0x33da37,_0x1f48b5,_0x24c3e6);}if(_0x1bb24d)_0x1e11c5[_0xdf2bcf(0xa68)]('battleGrow');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x2b8),_0x4724cd=>{const _0x1a6928=_0x588453;if(!SceneManager[_0x1a6928(0x8b8)]())return;VisuMZ[_0x1a6928(0x5f6)](_0x4724cd,_0x4724cd);const _0x585e80=$gameTemp['getLastPluginCommandInterpreter'](),_0x94bbef=VisuMZ[_0x1a6928(0xa11)](_0x4724cd['Targets']),_0x536b2b=_0x4724cd[_0x1a6928(0xa06)],_0x4eb955=_0x4724cd[_0x1a6928(0xcf)],_0x33649c=_0x4724cd['Duration'],_0x41dae9=_0x4724cd[_0x1a6928(0x884)],_0x54b82e=_0x4724cd['WaitForSkew'];if(!_0x585e80)return;for(const _0x271c02 of _0x94bbef){if(!_0x271c02)continue;_0x271c02[_0x1a6928(0x3d8)](_0x536b2b,_0x4eb955,_0x33649c,_0x41dae9);}if(_0x54b82e)_0x585e80[_0x1a6928(0xa68)](_0x1a6928(0x8cb));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x831),_0x5053f3=>{const _0x1e8bdd=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1e8bdd(0x5f6)](_0x5053f3,_0x5053f3);const _0x32e5a6=$gameTemp[_0x1e8bdd(0x26a)](),_0x16fce9=VisuMZ[_0x1e8bdd(0xa11)](_0x5053f3[_0x1e8bdd(0x77c)]),_0x3f14df=_0x5053f3[_0x1e8bdd(0xa5e)],_0x1e3fea=_0x5053f3[_0x1e8bdd(0x84a)],_0x116509=_0x5053f3[_0x1e8bdd(0x884)],_0xeae7ed=_0x5053f3['RevertAngle'],_0x42344e=_0x5053f3[_0x1e8bdd(0x2f8)];if(!_0x32e5a6)return;for(const _0x5796ec of _0x16fce9){if(!_0x5796ec)continue;_0x5796ec[_0x1e8bdd(0xa25)](_0x3f14df,_0x1e3fea,_0x116509,_0xeae7ed);}if(_0x42344e)_0x32e5a6[_0x1e8bdd(0xa68)]('battleSpin');}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x2b6),_0x50d016=>{const _0x32bf76=_0x588453;if(!SceneManager[_0x32bf76(0x8b8)]())return;const _0x479769=$gameTemp[_0x32bf76(0x26a)]();if(!_0x479769)return;_0x479769[_0x32bf76(0xa68)](_0x32bf76(0x65d));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x3fb),_0x2c5778=>{const _0xfe5af4=_0x588453;if(!SceneManager[_0xfe5af4(0x8b8)]())return;const _0x4a819f=$gameTemp[_0xfe5af4(0x26a)]();if(!_0x4a819f)return;_0x4a819f['setWaitMode'](_0xfe5af4(0x6f2));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Movement_WaitForMovement',_0x9ee21=>{const _0x3105c7=_0x588453;if(!SceneManager[_0x3105c7(0x8b8)]())return;const _0x432433=$gameTemp[_0x3105c7(0x26a)]();if(!_0x432433)return;_0x432433[_0x3105c7(0xa68)](_0x3105c7(0x381));}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x54a),_0x372d08=>{const _0xa6688e=_0x588453;if(!SceneManager[_0xa6688e(0x8b8)]())return;const _0x4d042b=$gameTemp[_0xa6688e(0x26a)]();if(!_0x4d042b)return;_0x4d042b[_0xa6688e(0xa68)](_0xa6688e(0x9ad));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_WaitForScale',_0x14507d=>{const _0xa8b2bd=_0x588453;if(!SceneManager[_0xa8b2bd(0x8b8)]())return;const _0x1dacf5=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1dacf5)return;_0x1dacf5['setWaitMode'](_0xa8b2bd(0x895));}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],'ActSeq_Movement_WaitForSkew',_0x3149c5=>{const _0x2a4d76=_0x588453;if(!SceneManager[_0x2a4d76(0x8b8)]())return;const _0xdb6750=$gameTemp[_0x2a4d76(0x26a)]();if(!_0xdb6750)return;_0xdb6750[_0x2a4d76(0xa68)](_0x2a4d76(0x8cb));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0xa9b),_0x310baa=>{const _0x6fe11a=_0x588453;if(!SceneManager[_0x6fe11a(0x8b8)]())return;const _0x16a88f=$gameTemp[_0x6fe11a(0x26a)]();if(!_0x16a88f)return;_0x16a88f[_0x6fe11a(0xa68)]('battleSpin');}),VisuMZ[_0x588453(0x39a)][_0x588453(0x503)]=function(){const _0x29c243=_0x588453;if(!Imported[_0x29c243(0x485)])return;if(VisuMZ[_0x29c243(0x4ef)][_0x29c243(0x4ec)]<1.08){let _0x2c54eb='';_0x2c54eb+=_0x29c243(0x1eb),_0x2c54eb+=_0x29c243(0x8b9),alert(_0x2c54eb),SceneManager[_0x29c243(0x163)]();}},PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x9eb),_0x4a4864=>{const _0x168fc9=_0x588453;if(!SceneManager[_0x168fc9(0x8b8)]())return;if(!Imported[_0x168fc9(0x485)])return;VisuMZ['ConvertParams'](_0x4a4864,_0x4a4864),VisuMZ['BattleCore'][_0x168fc9(0x503)]();const _0x481fbd=$gameTemp['getLastPluginCommandInterpreter'](),_0x63966b=_0x4a4864[_0x168fc9(0xaa3)];if(!_0x481fbd)return;const _0x48b0df=BattleManager[_0x168fc9(0x9cf)];if(!_0x48b0df)return;_0x48b0df[_0x168fc9(0x892)](_0x4a4864);if(_0x63966b)_0x481fbd[_0x168fc9(0xa68)]('battleProjectiles');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x742),_0x1fd0ec=>{const _0x1d1ec8=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d1ec8(0x485)])return;VisuMZ[_0x1d1ec8(0x5f6)](_0x1fd0ec,_0x1fd0ec),VisuMZ[_0x1d1ec8(0x39a)][_0x1d1ec8(0x503)]();const _0x4eee10=$gameTemp[_0x1d1ec8(0x26a)](),_0xe2f0ce=_0x1fd0ec[_0x1d1ec8(0xaa3)];if(!_0x4eee10)return;const _0x3cd321=BattleManager[_0x1d1ec8(0x9cf)];if(!_0x3cd321)return;_0x3cd321[_0x1d1ec8(0x892)](_0x1fd0ec);if(_0xe2f0ce)_0x4eee10['setWaitMode'](_0x1d1ec8(0xa41));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x79a),_0x12ce5a=>{const _0x1a0f7c=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a0f7c(0x485)])return;VisuMZ[_0x1a0f7c(0x5f6)](_0x12ce5a,_0x12ce5a),VisuMZ[_0x1a0f7c(0x39a)][_0x1a0f7c(0x503)]();const _0x1211ff=$gameTemp[_0x1a0f7c(0x26a)](),_0x1dc09f=_0x12ce5a[_0x1a0f7c(0xaa3)];if(!_0x1211ff)return;const _0x189916=BattleManager[_0x1a0f7c(0x9cf)];if(!_0x189916)return;_0x189916[_0x1a0f7c(0x892)](_0x12ce5a);if(_0x1dc09f)_0x1211ff[_0x1a0f7c(0xa68)](_0x1a0f7c(0xa41));}),PluginManager[_0x588453(0x520)](pluginData['name'],_0x588453(0x1c2),_0x4c2114=>{const _0x5c7418=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5c7418(0x372)])return;VisuMZ[_0x5c7418(0x5f6)](_0x4c2114,_0x4c2114);const _0x1576a7=$gameTemp[_0x5c7418(0x26a)](),_0x876e1d=_0x4c2114['WaitForSkew'];if(!_0x1576a7)return;$gameScreen['setBattleSkew'](_0x4c2114['SkewX'],_0x4c2114[_0x5c7418(0xcf)],_0x4c2114[_0x5c7418(0x84a)],_0x4c2114[_0x5c7418(0x884)]);if(_0x876e1d)_0x1576a7[_0x5c7418(0xa68)]('battleSkew');}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Skew_Reset',_0x521bfd=>{const _0x474312=_0x588453;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x474312(0x372)])return;VisuMZ[_0x474312(0x5f6)](_0x521bfd,_0x521bfd);const _0x50cd79=$gameTemp['getLastPluginCommandInterpreter'](),_0x1320ac=_0x521bfd[_0x474312(0x867)];if(!_0x50cd79)return;$gameScreen[_0x474312(0x392)](0x0,0x0,_0x521bfd['Duration'],_0x521bfd['EasingType']);if(_0x1320ac)_0x50cd79[_0x474312(0xa68)](_0x474312(0x980));}),PluginManager['registerCommand'](pluginData['name'],_0x588453(0x759),_0x2bae35=>{const _0xaf2170=_0x588453;if(!SceneManager[_0xaf2170(0x8b8)]())return;if(!Imported[_0xaf2170(0x372)])return;const _0xaac54c=$gameTemp[_0xaf2170(0x26a)]();if(!_0xaac54c)return;_0xaac54c['setWaitMode'](_0xaf2170(0x980));}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x97f),_0x434d68=>{const _0x2f9c9=_0x588453;if(!SceneManager[_0x2f9c9(0x8b8)]())return;VisuMZ['ConvertParams'](_0x434d68,_0x434d68);const _0x3a6373=$gameTemp['getLastPluginCommandInterpreter'](),_0x2927d6=_0x434d68[_0x2f9c9(0x1a7)],_0x241ba9=_0x434d68[_0x2f9c9(0x9d4)];if(!_0x3a6373)return;BattleManager['_targetIndex']=_0x2927d6,BattleManager[_0x2f9c9(0x4fb)]=BattleManager['_allTargets']?BattleManager[_0x2f9c9(0x99a)][BattleManager[_0x2f9c9(0x6ca)]]||null:null,BattleManager[_0x2f9c9(0x4fb)]&&_0x241ba9[_0x2f9c9(0x3c2)]()[_0x2f9c9(0x4f2)]()!=='UNTITLED'&&_0x3a6373[_0x2f9c9(0x453)]([_0x241ba9]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x9b7),_0x582455=>{const _0xdc4d08=_0x588453;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xdc4d08(0x5f6)](_0x582455,_0x582455);const _0x3ee2a3=$gameTemp[_0xdc4d08(0x26a)](),_0x5d6a03=_0x582455['JumpToLabel'];if(!_0x3ee2a3)return;BattleManager[_0xdc4d08(0x6ca)]++,BattleManager[_0xdc4d08(0x4fb)]=BattleManager['_allTargets'][BattleManager[_0xdc4d08(0x6ca)]]||null,BattleManager[_0xdc4d08(0x4fb)]&&_0x5d6a03[_0xdc4d08(0x3c2)]()[_0xdc4d08(0x4f2)]()!==_0xdc4d08(0xa50)&&_0x3ee2a3['command119']([_0x5d6a03]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],'ActSeq_Target_PrevTarget',_0x103b5e=>{const _0x2bff18=_0x588453;if(!SceneManager[_0x2bff18(0x8b8)]())return;VisuMZ[_0x2bff18(0x5f6)](_0x103b5e,_0x103b5e);const _0x30f77e=$gameTemp['getLastPluginCommandInterpreter'](),_0x3de2f9=_0x103b5e[_0x2bff18(0x9d4)];if(!_0x30f77e)return;BattleManager[_0x2bff18(0x6ca)]--,BattleManager[_0x2bff18(0x4fb)]=BattleManager[_0x2bff18(0x99a)][BattleManager[_0x2bff18(0x6ca)]]||null,BattleManager[_0x2bff18(0x4fb)]&&_0x3de2f9[_0x2bff18(0x3c2)]()[_0x2bff18(0x4f2)]()!=='UNTITLED'&&_0x30f77e[_0x2bff18(0x453)]([_0x3de2f9]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x80d),_0x33922f=>{const _0x2e3fd9=_0x588453;if(!SceneManager[_0x2e3fd9(0x8b8)]())return;VisuMZ[_0x2e3fd9(0x5f6)](_0x33922f,_0x33922f);const _0x55055a=$gameTemp[_0x2e3fd9(0x26a)](),_0x5396b7=_0x33922f[_0x2e3fd9(0x866)],_0xe88975=_0x33922f[_0x2e3fd9(0x9d4)];if(!_0x55055a)return;const _0x3b26a6=BattleManager['_targetIndex'];for(;;){BattleManager[_0x2e3fd9(0x6ca)]=Math[_0x2e3fd9(0xaa2)](BattleManager[_0x2e3fd9(0x99a)]['length']);if(!_0x5396b7)break;if(BattleManager[_0x2e3fd9(0x6ca)]!==_0x3b26a6)break;if(BattleManager[_0x2e3fd9(0x99a)][_0x2e3fd9(0x6e3)]<=0x1){BattleManager[_0x2e3fd9(0x6ca)]=0x0;break;}}BattleManager[_0x2e3fd9(0x4fb)]=BattleManager[_0x2e3fd9(0x99a)][BattleManager[_0x2e3fd9(0x6ca)]]||null,BattleManager[_0x2e3fd9(0x4fb)]&&_0xe88975[_0x2e3fd9(0x3c2)]()[_0x2e3fd9(0x4f2)]()!==_0x2e3fd9(0xa50)&&_0x55055a[_0x2e3fd9(0x453)]([_0xe88975]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x8d2),_0xac345b=>{const _0x3fa6fc=_0x588453;if(!SceneManager[_0x3fa6fc(0x8b8)]())return;if(!Imported[_0x3fa6fc(0x956)])return;if(!ConfigManager['battleVoices'])return;VisuMZ['ConvertParams'](_0xac345b,_0xac345b);const _0x5a85f1=VisuMZ['CreateActionSequenceTargets'](_0xac345b[_0x3fa6fc(0x77c)]);let _0x187a1d=_0xac345b['VoiceLine']||'';for(const _0x3e7c94 of _0x5a85f1){if(!_0x3e7c94)continue;_0x3e7c94['playBattleVoice'](_0x187a1d);}}),PluginManager['registerCommand'](pluginData[_0x588453(0x4cf)],_0x588453(0x9d7),_0x48dd45=>{const _0x202836=_0x588453;if(!SceneManager[_0x202836(0x8b8)]())return;if(!Imported[_0x202836(0x956)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x202836(0x5f6)](_0x48dd45,_0x48dd45);const _0x55ec4f=VisuMZ[_0x202836(0xa11)](_0x48dd45[_0x202836(0x77c)]);let _0x324c09=(_0x48dd45[_0x202836(0x6ac)]||'')+(_0x48dd45[_0x202836(0x5a6)]||'');for(const _0xcc9db3 of _0x55ec4f){if(!_0xcc9db3)continue;_0xcc9db3[_0x202836(0x2bd)](_0x324c09);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x727),_0x1fe880=>{const _0x5c210b=_0x588453;if(!SceneManager[_0x5c210b(0x8b8)]())return;VisuMZ[_0x5c210b(0x5f6)](_0x1fe880,_0x1fe880);const _0x43b6a1=VisuMZ[_0x5c210b(0xa11)](_0x1fe880[_0x5c210b(0x77c)]);for(const _0x1a11ef of _0x43b6a1){if(!_0x1a11ef)continue;if(!_0x1a11ef['isActor']())continue;_0x1a11ef[_0x5c210b(0xa7a)]();}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x5ac),_0x4b690a=>{const _0x2e698b=_0x588453;if(!SceneManager[_0x2e698b(0x8b8)]())return;VisuMZ[_0x2e698b(0x5f6)](_0x4b690a,_0x4b690a);const _0x45ba99=$gameTemp[_0x2e698b(0x26a)]();let _0xab09dd=![];const _0x4ca523=_0x4b690a[_0x2e698b(0x9d4)],_0x252081=VisuMZ['CreateActionSequenceTargets'](_0x4b690a['Targets']);for(const _0x209bf5 of _0x252081){if(!_0x209bf5)continue;if(!_0x209bf5['isActor']())continue;_0x209bf5[_0x2e698b(0x1b6)](),_0x209bf5[_0x2e698b(0x529)]()[_0x2e698b(0x6e3)]>0x0?_0xab09dd=!![]:_0x209bf5[_0x2e698b(0xa7a)]();}_0xab09dd&&_0x4ca523[_0x2e698b(0x3c2)]()[_0x2e698b(0x4f2)]()!==_0x2e698b(0xa50)&&_0x45ba99[_0x2e698b(0x453)]([_0x4ca523]);}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x2ee),_0x5caaf1=>{const _0x1f3d00=_0x588453;if(!SceneManager[_0x1f3d00(0x8b8)]())return;VisuMZ[_0x1f3d00(0x5f6)](_0x5caaf1,_0x5caaf1);let _0x496064=_0x5caaf1[_0x1f3d00(0x5aa)];_0x496064--,_0x496064=Math['max'](_0x496064,0x0);const _0x3a7cd3=VisuMZ[_0x1f3d00(0xa11)](_0x5caaf1['Targets']);for(const _0x4c538e of _0x3a7cd3){if(!_0x4c538e)continue;if(!_0x4c538e[_0x1f3d00(0xa52)]())continue;_0x4c538e[_0x1f3d00(0x7c1)](_0x496064);}}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x57b),_0x3f0ec5=>{const _0x3fb22d=_0x588453;if(!SceneManager[_0x3fb22d(0x8b8)]())return;if(!Imported[_0x3fb22d(0x372)])return;VisuMZ[_0x3fb22d(0x5f6)](_0x3f0ec5,_0x3f0ec5);const _0x5c2b12=$gameTemp[_0x3fb22d(0x26a)](),_0xd92358=_0x3f0ec5['WaitForZoom'];if(!_0x5c2b12)return;$gameScreen[_0x3fb22d(0x15a)](_0x3f0ec5[_0x3fb22d(0x5ed)],_0x3f0ec5[_0x3fb22d(0x84a)],_0x3f0ec5[_0x3fb22d(0x884)]);if(_0xd92358)_0x5c2b12['setWaitMode']('battleZoom');}),PluginManager[_0x588453(0x520)](pluginData[_0x588453(0x4cf)],_0x588453(0x965),_0x3c4f8b=>{const _0x5e38d8=_0x588453;if(!SceneManager[_0x5e38d8(0x8b8)]())return;if(!Imported[_0x5e38d8(0x372)])return;VisuMZ[_0x5e38d8(0x5f6)](_0x3c4f8b,_0x3c4f8b);const _0x5ca48a=$gameTemp[_0x5e38d8(0x26a)](),_0x203997=_0x3c4f8b[_0x5e38d8(0x899)];if(!_0x5ca48a)return;$gameScreen['setBattleZoom'](0x1,_0x3c4f8b[_0x5e38d8(0x84a)],_0x3c4f8b[_0x5e38d8(0x884)]);if(_0x203997)_0x5ca48a['setWaitMode'](_0x5e38d8(0x8f6));}),PluginManager[_0x588453(0x520)](pluginData['name'],'ActSeq_Zoom_WaitForZoom',_0x23b585=>{const _0x2a2221=_0x588453;if(!SceneManager[_0x2a2221(0x8b8)]())return;if(!Imported[_0x2a2221(0x372)])return;const _0x5de8af=$gameTemp[_0x2a2221(0x26a)]();if(!_0x5de8af)return;_0x5de8af[_0x2a2221(0xa68)](_0x2a2221(0x8f6));}),VisuMZ['BattleCore'][_0x588453(0x5a8)]=Scene_Boot[_0x588453(0x755)][_0x588453(0x76e)],Scene_Boot[_0x588453(0x755)][_0x588453(0x76e)]=function(){const _0x547eba=_0x588453;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x547eba(0x77a)](),this[_0x547eba(0x8cc)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ['BattleCore'][_0x547eba(0x5a8)][_0x547eba(0x90a)](this),this[_0x547eba(0x19c)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x547eba(0x30f)]();},Scene_Boot[_0x588453(0x755)][_0x588453(0x19c)]=function(){const _0x48952a=_0x588453;if(VisuMZ[_0x48952a(0x34e)])return;this[_0x48952a(0x95d)](),this[_0x48952a(0x4b9)](),this[_0x48952a(0x3e3)]();},Scene_Boot[_0x588453(0x755)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0xf9d9b5=_0x588453,_0x20b0a7=$dataSystem[_0xf9d9b5(0xf2)][_0xf9d9b5(0x6e3)];for(let _0x4922d0=0x0;_0x4922d0<_0x20b0a7;_0x4922d0++){const _0x53b88e=$dataSystem[_0xf9d9b5(0x5fc)][_0x4922d0];if(_0x53b88e)continue;$dataSystem[_0xf9d9b5(0x5fc)][_0x4922d0]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x588453(0x77a)]=function(){const _0xdf793e=_0x588453,_0xbf639b=VisuMZ[_0xdf793e(0x39a)]['Settings'];_0xbf639b[_0xdf793e(0x69a)]['PopupPosition']===undefined&&(_0xbf639b[_0xdf793e(0x69a)][_0xdf793e(0x1ec)]=_0xdf793e(0x25a)),_0xbf639b[_0xdf793e(0x848)][_0xdf793e(0x61b)]===undefined&&(_0xbf639b[_0xdf793e(0x848)][_0xdf793e(0x61b)]=![]),_0xbf639b['Enemy']['SmoothImage']===undefined&&(_0xbf639b['Enemy'][_0xdf793e(0x61b)]=!![]),_0xbf639b['Actor']['PrioritySortActive']===undefined&&(_0xbf639b[_0xdf793e(0x848)][_0xdf793e(0x1d2)]=![]),_0xbf639b[_0xdf793e(0x848)][_0xdf793e(0x9b0)]===undefined&&(_0xbf639b[_0xdf793e(0x848)][_0xdf793e(0x9b0)]=!![]);},VisuMZ[_0x588453(0x8fb)]={},Scene_Boot[_0x588453(0x755)][_0x588453(0x8cc)]=function(){const _0x512ca2=_0x588453;for(const _0x35215f of VisuMZ[_0x512ca2(0x39a)][_0x512ca2(0x90d)][_0x512ca2(0x69a)][_0x512ca2(0x6fc)]){if(!_0x35215f)continue;const _0x212dbb=_0x35215f[_0x512ca2(0x8e8)][_0x512ca2(0x3c2)]()['trim']();VisuMZ[_0x512ca2(0x8fb)][_0x212dbb]=_0x35215f;}},VisuMZ[_0x588453(0x39a)][_0x588453(0x9c7)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x588453(0x755)][_0x588453(0x3b9)]=function(){const _0x536edb=_0x588453,_0xd9b2c5=VisuMZ[_0x536edb(0x39a)][_0x536edb(0x9c7)],_0xf08cc9=_0x536edb(0x667),_0x5caf55=[['Pre','PRE-'],[_0x536edb(0x6fb),_0x536edb(0x616)]],_0x5c881b=[['%1Apply%2JS',_0x536edb(0x450)],[_0x536edb(0x501),_0x536edb(0x4ac)]],_0x58dea8=[['',''],[_0x536edb(0x9ba),_0x536edb(0x893)],['AsTarget',_0x536edb(0x62f)]];for(const _0x45fdfd of _0x5c881b){for(const _0x2c7890 of _0x58dea8){for(const _0x3344c6 of _0x5caf55){const _0x53a780=_0x45fdfd[0x0][_0x536edb(0x4a9)](_0x3344c6[0x0],_0x2c7890[0x0]),_0x4196db=_0x45fdfd[0x1][_0x536edb(0x4a9)](_0x3344c6[0x1],_0x2c7890[0x1])[_0x536edb(0x4f2)](),_0x2a1d82=new RegExp(_0xf08cc9[_0x536edb(0x4a9)](_0x4196db),'i');_0xd9b2c5[_0x53a780]=_0x2a1d82;}}}const _0x3a278b=[[_0x536edb(0x977),_0x536edb(0x91e)],[_0x536edb(0x95e),'JS\x20%1END\x20ACTION']];for(const _0x3a8fcb of _0x3a278b){for(const _0x294900 of _0x5caf55){const _0x569f24=_0x3a8fcb[0x0][_0x536edb(0x4a9)](_0x294900[0x0]),_0x4bdf89=_0x3a8fcb[0x1][_0x536edb(0x4a9)](_0x294900[0x1]),_0x492072=new RegExp(_0xf08cc9['format'](_0x4bdf89),'i');_0xd9b2c5[_0x569f24]=_0x492072;}}const _0x164d02=[[_0x536edb(0x1f9),_0x536edb(0x905)],[_0x536edb(0x6b6),_0x536edb(0x388)],[_0x536edb(0x8a8),_0x536edb(0x6c4)],[_0x536edb(0x6c7),_0x536edb(0xa95)],['EscapeSuccessJS',_0x536edb(0x390)],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],[_0x536edb(0x1f4),_0x536edb(0x314)],[_0x536edb(0x5af),_0x536edb(0x34a)],[_0x536edb(0x9ed),_0x536edb(0x57f)]];for(const _0x35ca3c of _0x164d02){for(const _0x2bb777 of _0x5caf55){const _0x1715f2=_0x35ca3c[0x0][_0x536edb(0x4a9)](_0x2bb777[0x0]),_0x276224=_0x35ca3c[0x1][_0x536edb(0x4a9)](_0x2bb777[0x1]),_0x13f615=new RegExp(_0xf08cc9['format'](_0x276224),'i');_0xd9b2c5[_0x1715f2]=_0x13f615;}}},Scene_Boot[_0x588453(0x755)][_0x588453(0x95d)]=function(){const _0x327da1=_0x588453,_0x3d4a97=$dataSkills[_0x327da1(0x6e2)]($dataItems);for(const _0x1f51f8 of _0x3d4a97){if(!_0x1f51f8)continue;VisuMZ[_0x327da1(0x39a)][_0x327da1(0x6a2)](_0x1f51f8);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x11b3ed=_0x588453,_0x28901f=$dataActors[_0x11b3ed(0x6e2)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x1002ed of _0x28901f){if(!_0x1002ed)continue;VisuMZ[_0x11b3ed(0x39a)]['Parse_Notetags_TraitObjects'](_0x1002ed);}},Scene_Boot[_0x588453(0x755)][_0x588453(0x69b)]=function(){const _0x10b963=_0x588453,_0x11678b=VisuMZ['BattleCore']['Settings'][_0x10b963(0x4b1)][_0x10b963(0xacb)],_0x2edf5b=[];for(const _0x185223 of _0x11678b){const _0x3d4a05=$dataTroops[_0x185223];if(_0x3d4a05)_0x2edf5b[_0x10b963(0x2b9)](JsonEx['makeDeepCopy'](_0x3d4a05));}for(const _0x3645b9 of $dataTroops){if(!_0x3645b9)continue;for(const _0x1b4555 of _0x2edf5b){if(_0x1b4555['id']===_0x3645b9['id'])continue;_0x3645b9[_0x10b963(0xdb)]=_0x3645b9[_0x10b963(0xdb)][_0x10b963(0x6e2)](_0x1b4555[_0x10b963(0xdb)]);}}},Scene_Boot[_0x588453(0x755)][_0x588453(0xa5b)]=function(){const _0x35d098=_0x588453,_0x289a41=VisuMZ[_0x35d098(0x39a)][_0x35d098(0x90d)][_0x35d098(0x4b1)];if(_0x289a41[_0x35d098(0x105)]>0x0&&$dataCommonEvents[_0x289a41[_0x35d098(0x105)]]){const _0x23ecc5=$dataCommonEvents[_0x289a41[_0x35d098(0x105)]],_0x1eb74d=_0x23ecc5[_0x35d098(0x70f)]['length']-0x2,_0x29a91a=_0x23ecc5['list'][_0x1eb74d];if(_0x29a91a&&_0x29a91a['code']!==0xe6){const _0x329097={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x529f47=_0x23ecc5[_0x35d098(0x70f)][_0x35d098(0x9e2)]();_0x23ecc5['list'][_0x35d098(0x4e1)](_0x329097),_0x23ecc5[_0x35d098(0x70f)][_0x35d098(0x4e1)](_0x529f47);}}},Scene_Boot[_0x588453(0x755)][_0x588453(0x30f)]=function(){const _0x26e43a=_0x588453;VisuMZ['BattleCore'][_0x26e43a(0x141)](),VisuMZ[_0x26e43a(0x39a)]['BindCommonEventKeysForGroup']($dataSkills),VisuMZ[_0x26e43a(0x39a)][_0x26e43a(0xa5c)]($dataItems);},VisuMZ['BattleCore'][_0x588453(0x141)]=function(){const _0x35a3ad=_0x588453;VisuMZ[_0x35a3ad(0x39a)][_0x35a3ad(0x2d3)]={};for(const _0x5315de of $dataCommonEvents){if(!_0x5315de)continue;if(_0x5315de['name'][_0x35a3ad(0x809)](/\[(.*)\]/i)){let _0x4265c4=String(RegExp['$1'])[_0x35a3ad(0x582)](/,/g,'')[_0x35a3ad(0x3c2)]()[_0x35a3ad(0x4f2)]();VisuMZ[_0x35a3ad(0x39a)]['_commonEventKey'][_0x4265c4]=_0x5315de['id'];}}},VisuMZ[_0x588453(0x39a)]['BindCommonEventKeysForGroup']=function(_0x1ac967){const _0x1ca02c=_0x588453;for(const _0x324238 of _0x1ac967){if(!_0x324238)continue;VisuMZ[_0x1ca02c(0x39a)][_0x1ca02c(0x9a4)](_0x324238);}},VisuMZ['BattleCore'][_0x588453(0x9a4)]=function(_0x144567){const _0x144424=_0x588453;if(!_0x144567)return;if(!_0x144567[_0x144424(0x723)])return;VisuMZ['BattleCore']['_commonEventKey']=VisuMZ[_0x144424(0x39a)][_0x144424(0x2d3)]||{};const _0x5d1471=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x4a2d2a=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x541f7b=[];const _0x3a5f45=_0x144567[_0x144424(0x97d)][_0x144424(0x809)](_0x5d1471);if(_0x3a5f45){for(const _0x50c2ca of _0x3a5f45){_0x50c2ca[_0x144424(0x809)](_0x5d1471);const _0x306bfd=String(RegExp['$1'])[_0x144424(0x88c)](',')[_0x144424(0x89e)](_0x4bbd42=>String(_0x4bbd42)['toUpperCase']()[_0x144424(0x4f2)]());_0x541f7b=_0x541f7b['concat'](_0x306bfd);}!_0x144567[_0x144424(0x97d)][_0x144424(0x809)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x144567[_0x144424(0x97d)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x144567[_0x144424(0x97d)]['match'](_0x4a2d2a)){const _0x5f41ca=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x144424(0x89e)](_0x39d369=>String(_0x39d369)[_0x144424(0x3c2)]()['trim']());_0x541f7b=_0x541f7b[_0x144424(0x6e2)](_0x5f41ca);!_0x144567[_0x144424(0x97d)][_0x144424(0x809)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x144567[_0x144424(0x97d)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x5b1a27 of _0x541f7b){if(VisuMZ[_0x144424(0x39a)][_0x144424(0x2d3)][_0x5b1a27]){const _0x1789ab=VisuMZ[_0x144424(0x39a)][_0x144424(0x2d3)][_0x5b1a27],_0xaf6792={'code':0x2c,'dataId':_0x1789ab,'value1':0x1,'value2':0x0};_0x144567['effects'][_0x144424(0x2b9)](_0xaf6792);}}},Scene_Boot['prototype'][_0x588453(0x3e3)]=function(){const _0x12e057=_0x588453,_0xaa23a1=$dataSkills[_0x12e057(0x6e2)]($dataItems);for(const _0x4ade93 of _0xaa23a1){if(!_0x4ade93)continue;VisuMZ['BattleCore'][_0x12e057(0x457)](_0x4ade93);}},VisuMZ['BattleCore'][_0x588453(0x12d)]=VisuMZ[_0x588453(0x12d)],VisuMZ['ParseActorNotetags']=function(_0x50b022){const _0x539b54=_0x588453;VisuMZ['BattleCore'][_0x539b54(0x12d)]&&VisuMZ[_0x539b54(0x39a)][_0x539b54(0x12d)]['call'](this,_0x50b022),VisuMZ[_0x539b54(0x39a)][_0x539b54(0x6e7)](_0x50b022);},VisuMZ['BattleCore'][_0x588453(0x530)]=VisuMZ[_0x588453(0x530)],VisuMZ['ParseClassNotetags']=function(_0x612b11){const _0x1ffabf=_0x588453;VisuMZ[_0x1ffabf(0x39a)][_0x1ffabf(0x530)]&&VisuMZ[_0x1ffabf(0x39a)][_0x1ffabf(0x530)][_0x1ffabf(0x90a)](this,_0x612b11),VisuMZ[_0x1ffabf(0x39a)][_0x1ffabf(0x6e7)](_0x612b11);},VisuMZ[_0x588453(0x39a)][_0x588453(0x207)]=VisuMZ['ParseSkillNotetags'],VisuMZ['ParseSkillNotetags']=function(_0x371fb3){const _0x15e474=_0x588453;VisuMZ[_0x15e474(0x39a)][_0x15e474(0x207)]&&VisuMZ[_0x15e474(0x39a)][_0x15e474(0x207)][_0x15e474(0x90a)](this,_0x371fb3),VisuMZ['BattleCore'][_0x15e474(0x6a2)](_0x371fb3),VisuMZ[_0x15e474(0x39a)][_0x15e474(0x457)](_0x371fb3);},VisuMZ[_0x588453(0x39a)]['ParseItemNotetags']=VisuMZ[_0x588453(0x238)],VisuMZ[_0x588453(0x238)]=function(_0x13aafc){const _0x2e4acd=_0x588453;VisuMZ[_0x2e4acd(0x39a)][_0x2e4acd(0x238)]&&VisuMZ[_0x2e4acd(0x39a)][_0x2e4acd(0x238)]['call'](this,_0x13aafc),VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x13aafc),VisuMZ[_0x2e4acd(0x39a)][_0x2e4acd(0x457)](_0x13aafc);},VisuMZ[_0x588453(0x39a)][_0x588453(0x669)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x588453(0x669)]=function(_0x3f961d){const _0x1a768e=_0x588453;VisuMZ['BattleCore'][_0x1a768e(0x669)]&&VisuMZ['BattleCore'][_0x1a768e(0x669)][_0x1a768e(0x90a)](this,_0x3f961d),VisuMZ[_0x1a768e(0x39a)][_0x1a768e(0x6e7)](_0x3f961d);},VisuMZ[_0x588453(0x39a)]['ParseArmorNotetags']=VisuMZ[_0x588453(0x3e5)],VisuMZ[_0x588453(0x3e5)]=function(_0x481c50){const _0x318558=_0x588453;VisuMZ['BattleCore'][_0x318558(0x3e5)]&&VisuMZ[_0x318558(0x39a)][_0x318558(0x3e5)][_0x318558(0x90a)](this,_0x481c50),VisuMZ[_0x318558(0x39a)][_0x318558(0x6e7)](_0x481c50);},VisuMZ['BattleCore']['ParseEnemyNotetags']=VisuMZ[_0x588453(0x968)],VisuMZ[_0x588453(0x968)]=function(_0x49d614){const _0x3ff8f3=_0x588453;VisuMZ[_0x3ff8f3(0x39a)][_0x3ff8f3(0x968)]&&VisuMZ[_0x3ff8f3(0x39a)][_0x3ff8f3(0x968)][_0x3ff8f3(0x90a)](this,_0x49d614),VisuMZ[_0x3ff8f3(0x39a)][_0x3ff8f3(0x6e7)](_0x49d614);},VisuMZ[_0x588453(0x39a)][_0x588453(0x3d5)]=VisuMZ['ParseStateNotetags'],VisuMZ[_0x588453(0x3d5)]=function(_0x2eaee0){const _0x41ee24=_0x588453;VisuMZ[_0x41ee24(0x39a)]['ParseStateNotetags']&&VisuMZ[_0x41ee24(0x39a)][_0x41ee24(0x3d5)]['call'](this,_0x2eaee0),VisuMZ[_0x41ee24(0x39a)][_0x41ee24(0x6e7)](_0x2eaee0);},VisuMZ[_0x588453(0x39a)]['Parse_Notetags_Action']=function(_0x26d13f){const _0x4fdfdc=_0x588453,_0x615882=[_0x4fdfdc(0x7ec),'PostApplyJS',_0x4fdfdc(0xe9),'PostDamageJS','PreStartActionJS','PostStartActionJS',_0x4fdfdc(0x492),_0x4fdfdc(0x900)];for(const _0x46a8e1 of _0x615882){VisuMZ[_0x4fdfdc(0x39a)][_0x4fdfdc(0x90c)](_0x26d13f,_0x46a8e1);}const _0x29a391=_0x26d13f['note'];_0x29a391['match'](/<ALWAYS CRITICAL/i)&&(_0x26d13f['damage']['critical']=!![]),_0x29a391[_0x4fdfdc(0x809)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x26d13f['repeats']=Math[_0x4fdfdc(0x85e)](0x1,Number(RegExp['$1']))),_0x29a391['match'](/<TARGET:[ ](.*)>/i)&&(_0x26d13f['scope']=String(RegExp['$1'])[_0x4fdfdc(0x3c2)]()[_0x4fdfdc(0x4f2)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0x6e7)]=function(_0xd5469b){const _0x395aa9=_0x588453,_0x129523=['PreApplyAsUserJS',_0x395aa9(0x25b),_0x395aa9(0x8ac),'PostDamageAsUserJS','PreApplyAsTargetJS',_0x395aa9(0x8ab),_0x395aa9(0x488),_0x395aa9(0x273),_0x395aa9(0x472),_0x395aa9(0x679),_0x395aa9(0x492),_0x395aa9(0x900),_0x395aa9(0x95c),'PostStartBattleJS',_0x395aa9(0x215),'PostEndBattleJS',_0x395aa9(0x8a8),_0x395aa9(0x6c7),_0x395aa9(0x35c),'EscapeFailureJS',_0x395aa9(0x51a),_0x395aa9(0x717),_0x395aa9(0x147),_0x395aa9(0x7ef),'PreRegenerateJS',_0x395aa9(0x70e)];for(const _0x31bc1b of _0x129523){VisuMZ[_0x395aa9(0x39a)]['createJS'](_0xd5469b,_0x31bc1b);}const _0x50193f=[_0x395aa9(0x7a9),_0x395aa9(0x6b1),_0x395aa9(0xa17),_0x395aa9(0x1b7),_0x395aa9(0x3c3)];for(const _0x397a76 of _0x50193f){VisuMZ['BattleCore'][_0x395aa9(0x9f4)](_0xd5469b,_0x397a76);}},VisuMZ[_0x588453(0x39a)]['Parse_Notetags_Targets']=function(_0xeb940b){const _0x295a95=_0x588453,_0x4eb43c=_0xeb940b['note'];if(_0x4eb43c[_0x295a95(0x809)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3095a6=String(RegExp['$1']),_0x43690e=VisuMZ[_0x295a95(0x39a)][_0x295a95(0x4ff)](_0xeb940b,'Targets');VisuMZ[_0x295a95(0x39a)][_0x295a95(0x95a)](_0x3095a6,_0x43690e);}if(_0x4eb43c[_0x295a95(0x809)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x410d8c=String(RegExp['$1']),_0x1fd4f3=VisuMZ['BattleCore'][_0x295a95(0x4ff)](_0xeb940b,_0x295a95(0x6a0));VisuMZ[_0x295a95(0x39a)][_0x295a95(0x56c)](_0x410d8c,_0x1fd4f3);}},VisuMZ[_0x588453(0x39a)]['JS']={},VisuMZ['BattleCore'][_0x588453(0x90c)]=function(_0x782ec2,_0xd646e8){const _0x52f878=_0x588453,_0xb72a9f=_0x782ec2[_0x52f878(0x97d)];if(_0xb72a9f[_0x52f878(0x809)](VisuMZ[_0x52f878(0x39a)][_0x52f878(0x9c7)][_0xd646e8])){const _0x4ae022=RegExp['$1'],_0x1496d0=_0x52f878(0x8d1)['format'](_0x4ae022),_0x59b0f6=VisuMZ[_0x52f878(0x39a)]['createKeyJS'](_0x782ec2,_0xd646e8);VisuMZ['BattleCore']['JS'][_0x59b0f6]=new Function(_0x1496d0);}},VisuMZ[_0x588453(0x39a)][_0x588453(0x4ff)]=function(_0x2e1fb1,_0x31df85){const _0x1fa5a4=_0x588453;if(VisuMZ['createKeyJS'])return VisuMZ['createKeyJS'](_0x2e1fb1,_0x31df85);let _0x8d30ec='';if($dataActors[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec=_0x1fa5a4(0x2fa)['format'](_0x2e1fb1['id'],_0x31df85);if($dataClasses['includes'](_0x2e1fb1))_0x8d30ec=_0x1fa5a4(0x3e1)[_0x1fa5a4(0x4a9)](_0x2e1fb1['id'],_0x31df85);if($dataSkills[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec='Skill-%1-%2'[_0x1fa5a4(0x4a9)](_0x2e1fb1['id'],_0x31df85);if($dataItems[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec=_0x1fa5a4(0x8ce)[_0x1fa5a4(0x4a9)](_0x2e1fb1['id'],_0x31df85);if($dataWeapons[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec='Weapon-%1-%2'[_0x1fa5a4(0x4a9)](_0x2e1fb1['id'],_0x31df85);if($dataArmors[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec='Armor-%1-%2'[_0x1fa5a4(0x4a9)](_0x2e1fb1['id'],_0x31df85);if($dataEnemies[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec='Enemy-%1-%2'['format'](_0x2e1fb1['id'],_0x31df85);if($dataStates[_0x1fa5a4(0x51e)](_0x2e1fb1))_0x8d30ec=_0x1fa5a4(0x998)[_0x1fa5a4(0x4a9)](_0x2e1fb1['id'],_0x31df85);return _0x8d30ec;},VisuMZ[_0x588453(0x39a)][_0x588453(0x95a)]=function(_0x501126,_0x4fe143){const _0x59fb75=_0x588453,_0x118cee='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x59fb75(0x4a9)](_0x501126);VisuMZ[_0x59fb75(0x39a)]['JS'][_0x4fe143]=new Function(_0x118cee);},VisuMZ[_0x588453(0x39a)][_0x588453(0x56c)]=function(_0x1b8702,_0x5488aa){const _0xb5cdef=_0x588453,_0x517400='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0xb5cdef(0x4a9)](_0x1b8702);VisuMZ[_0xb5cdef(0x39a)]['JS'][_0x5488aa]=new Function(_0x517400);},VisuMZ[_0x588453(0x39a)][_0x588453(0x9f4)]=function(_0x5eb52c,_0x5dc2e4){const _0x2aa56a=_0x588453,_0x4eaf29=_0x5eb52c['note'];if(_0x4eaf29[_0x2aa56a(0x809)](VisuMZ[_0x2aa56a(0x39a)][_0x2aa56a(0x9c7)][_0x5dc2e4])){const _0x274f1a=RegExp['$1'],_0x33bc0a=_0x2aa56a(0x5b7)['format'](_0x274f1a),_0x189d95=VisuMZ[_0x2aa56a(0x39a)][_0x2aa56a(0x4ff)](_0x5eb52c,_0x5dc2e4);VisuMZ[_0x2aa56a(0x39a)]['JS'][_0x189d95]=new Function(_0x33bc0a);}},TextManager[_0x588453(0xab8)]=VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x6d4)][_0x588453(0x24f)],TextManager[_0x588453(0x3f4)]=VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x23c)][_0x588453(0xe7)],TextManager[_0x588453(0xa31)]=VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)]['AutoBattle'][_0x588453(0x705)],TextManager[_0x588453(0x8a2)]=VisuMZ['BattleCore'][_0x588453(0x90d)]['HpGauge'][_0x588453(0x8e8)],ColorManager['getColor']=function(_0x1ac43d){const _0x35791c=_0x588453;return _0x1ac43d=String(_0x1ac43d),_0x1ac43d[_0x35791c(0x809)](/#(.*)/i)?_0x35791c(0x964)['format'](String(RegExp['$1'])):this[_0x35791c(0x655)](Number(_0x1ac43d));},DataManager[_0x588453(0xf8)]=function(_0xc2996d){const _0x59205f=_0x588453;if(_0xc2996d['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xf60349=String(RegExp['$1'])[_0x59205f(0x3c2)]()[_0x59205f(0x4f2)]();if(_0xf60349===_0x59205f(0x9ce))return'MANUAL';if(VisuMZ[_0x59205f(0x8fb)][_0xf60349])return _0xf60349;}const _0x18fb68=VisuMZ[_0x59205f(0x39a)][_0x59205f(0x90d)][_0x59205f(0x69a)][_0x59205f(0xaa5)]['toUpperCase']()['trim']();if(VisuMZ[_0x59205f(0x8fb)][_0x18fb68])return _0x18fb68;return _0x59205f(0x9ce);},DataManager[_0x588453(0x8d5)]=function(_0x38d146){const _0x4d0911=_0x588453;_0x38d146=_0x38d146[_0x4d0911(0x3c2)]()['trim'](),this[_0x4d0911(0x797)]=this[_0x4d0911(0x797)]||{};if(this[_0x4d0911(0x797)][_0x38d146])return this[_0x4d0911(0x797)][_0x38d146];for(let _0x1ec898=0x1;_0x1ec898<0x64;_0x1ec898++){if(!$dataSystem['skillTypes'][_0x1ec898])continue;let _0x4ff37f=$dataSystem[_0x4d0911(0xa43)][_0x1ec898]['toUpperCase']()['trim']();_0x4ff37f=_0x4ff37f[_0x4d0911(0x582)](/\x1I\[(\d+)\]/gi,''),_0x4ff37f=_0x4ff37f['replace'](/\\I\[(\d+)\]/gi,''),this[_0x4d0911(0x797)][_0x4ff37f]=_0x1ec898;}return this[_0x4d0911(0x797)][_0x38d146]||0x0;},DataManager['getSkillIdWithName']=function(_0x4554cf){const _0x8775fd=_0x588453;_0x4554cf=_0x4554cf[_0x8775fd(0x3c2)]()['trim'](),this[_0x8775fd(0x61a)]=this[_0x8775fd(0x61a)]||{};if(this[_0x8775fd(0x61a)][_0x4554cf])return this[_0x8775fd(0x61a)][_0x4554cf];for(const _0x4601ff of $dataSkills){if(!_0x4601ff)continue;this[_0x8775fd(0x61a)][_0x4601ff[_0x8775fd(0x4cf)][_0x8775fd(0x3c2)]()[_0x8775fd(0x4f2)]()]=_0x4601ff['id'];}return this[_0x8775fd(0x61a)][_0x4554cf]||0x0;},DataManager[_0x588453(0x4d1)]=function(_0x32d9ea){const _0x91eaf8=_0x588453;_0x32d9ea=_0x32d9ea['toUpperCase']()[_0x91eaf8(0x4f2)](),this['_enemyIDs']=this['_enemyIDs']||{};if(this[_0x91eaf8(0x94f)][_0x32d9ea])return this[_0x91eaf8(0x94f)][_0x32d9ea];for(const _0x252eb9 of $dataEnemies){if(!_0x252eb9)continue;this[_0x91eaf8(0x94f)][_0x252eb9[_0x91eaf8(0x4cf)][_0x91eaf8(0x3c2)]()['trim']()]=_0x252eb9['id'];}return this['_enemyIDs'][_0x32d9ea]||0x0;},DataManager[_0x588453(0x209)]=function(_0x19c34e){const _0x1a5490=_0x588453;_0x19c34e=_0x19c34e['toUpperCase']()[_0x1a5490(0x4f2)](),this[_0x1a5490(0xa0f)]=this[_0x1a5490(0xa0f)]||{};if(this[_0x1a5490(0xa0f)][_0x19c34e])return this['_wtypeIDs'][_0x19c34e];for(let _0x4b0564=0x1;_0x4b0564<0x64;_0x4b0564++){if(!$dataSystem[_0x1a5490(0xf2)][_0x4b0564])continue;let _0x28acf6=$dataSystem['weaponTypes'][_0x4b0564][_0x1a5490(0x3c2)]()[_0x1a5490(0x4f2)]();_0x28acf6=_0x28acf6['replace'](/\x1I\[(\d+)\]/gi,''),_0x28acf6=_0x28acf6[_0x1a5490(0x582)](/\\I\[(\d+)\]/gi,''),this[_0x1a5490(0xa0f)][_0x28acf6]=_0x4b0564;}return this['_wtypeIDs'][_0x1a5490(0x909)]=0x0,this[_0x1a5490(0xa0f)][_0x19c34e]||0x0;},DataManager[_0x588453(0x92a)]=function(_0x528e4c){const _0x21ac4a=_0x588453,_0x146a81=_0x21ac4a(0x1ae);let _0x4ba716=_0x528e4c['iconIndex'],_0x583016=_0x528e4c[_0x21ac4a(0x4cf)];const _0x537479=_0x528e4c['note'];return _0x537479[_0x21ac4a(0x809)](/<DISPLAY ICON: (\d+)>/i)&&(_0x4ba716=Number(RegExp['$1'])),_0x537479[_0x21ac4a(0x809)](/<DISPLAY TEXT: (.*)>/i)&&(_0x583016=String(RegExp['$1'])),_0x146a81[_0x21ac4a(0x4a9)](_0x4ba716,_0x583016);},DataManager[_0x588453(0x7d5)]=function(_0x2dc028){const _0x5eaea6=_0x588453;return _0x2dc028[_0x5eaea6(0x97d)]['match'](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x2dc028[_0x5eaea6(0x4cf)];},DataManager['battleCommandIcon']=function(_0x3964ca){const _0x183701=_0x588453;return _0x3964ca[_0x183701(0x97d)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x3964ca[_0x183701(0xaf9)];},DataManager[_0x588453(0x8c5)]=function(_0x3dda8b){const _0x23e92e=_0x588453,_0x578ce=$dataEnemies[_0x3dda8b];if(_0x578ce){if(_0x578ce['note'][_0x23e92e(0x809)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0xf8c9d8=String(RegExp['$1'])[_0x23e92e(0x88c)](/[\r\n]+/)[_0x23e92e(0xaee)](''),_0x54cbfd=this[_0x23e92e(0x940)](_0xf8c9d8);_0x3dda8b=this[_0x23e92e(0x4d1)](_0x54cbfd)||_0x3dda8b,_0x3dda8b=DataManager[_0x23e92e(0x8c5)](_0x3dda8b);}}return _0x3dda8b;},DataManager[_0x588453(0x940)]=function(_0x2ba815){const _0x146725=_0x588453;let _0xbafd2e=0x0;const _0x1b5a54={};for(const _0x15449d of _0x2ba815){if(_0x15449d[_0x146725(0x809)](/(.*):[ ](\d+)/i)){const _0x71a5a5=String(RegExp['$1'])[_0x146725(0x4f2)](),_0x5bfd89=Number(RegExp['$2']);_0x1b5a54[_0x71a5a5]=_0x5bfd89,_0xbafd2e+=_0x5bfd89;}else{if(_0x15449d[_0x146725(0x809)](/(.*):[ ](\d+\.?\d+)/i)){const _0x1252a2=String(RegExp['$1'])[_0x146725(0x4f2)](),_0x40b112=Number(RegExp['$2']);_0x1b5a54[_0x1252a2]=_0x40b112,_0xbafd2e+=_0x40b112;}else _0x15449d!==''&&(_0x1b5a54[_0x15449d]=0x1,_0xbafd2e++);}}if(_0xbafd2e<=0x0)return'';let _0x9513ee=Math[_0x146725(0x697)]()*_0xbafd2e;for(const _0x359beb in _0x1b5a54){_0x9513ee-=_0x1b5a54[_0x359beb];if(_0x9513ee<=0x0)return _0x359beb;}return'';},DataManager[_0x588453(0x75d)]=function(_0x45c631){const _0x43156a=_0x588453;if(!_0x45c631)return![];if(!VisuMZ['BattleCore'][_0x43156a(0x90d)][_0x43156a(0x608)][_0x43156a(0x997)])return![];if(_0x45c631[_0x43156a(0x97d)][_0x43156a(0x809)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x45c631[_0x43156a(0x97d)][_0x43156a(0x809)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x209aa8 of _0x45c631[_0x43156a(0x723)]){if(!_0x209aa8)continue;if(_0x209aa8[_0x43156a(0x771)]===Game_Action[_0x43156a(0x4de)])return!![];}return![];},DataManager[_0x588453(0x93f)]=function(_0x209e19){const _0x3b719d=_0x588453,_0x479f9b=$dataTroops[_0x209e19];if(!_0x479f9b)return'';let _0x3d0b6e='';_0x3d0b6e+=_0x479f9b[_0x3b719d(0x4cf)];for(const _0x2d486f of _0x479f9b[_0x3b719d(0xdb)]){for(const _0x4f9f0e of _0x2d486f[_0x3b719d(0x70f)]){[0x6c,0x198][_0x3b719d(0x51e)](_0x4f9f0e[_0x3b719d(0x771)])&&(_0x3d0b6e+='\x0a',_0x3d0b6e+=_0x4f9f0e[_0x3b719d(0x89f)][0x0]);}}return _0x3d0b6e;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x588453(0xab4)]??![],ConfigManager[_0x588453(0x3dc)]=ConfigManager[_0x588453(0x3dc)]??![],ConfigManager[_0x588453(0x8a2)]=ConfigManager[_0x588453(0x8a2)]??!![],VisuMZ[_0x588453(0x39a)][_0x588453(0x597)]=ConfigManager[_0x588453(0x7d8)],ConfigManager[_0x588453(0x7d8)]=function(){const _0x204cca=_0x588453,_0x66f972=VisuMZ[_0x204cca(0x39a)][_0x204cca(0x597)][_0x204cca(0x90a)](this);return _0x66f972['autoBattleAtStart']=this[_0x204cca(0xab4)],_0x66f972['autoBattleUseSkills']=this['autoBattleUseSkills'],_0x66f972[_0x204cca(0x8a2)]=this['visualHpGauge'],_0x66f972;},VisuMZ[_0x588453(0x39a)]['ConfigManager_applyData']=ConfigManager[_0x588453(0x8c2)],ConfigManager['applyData']=function(_0x3feeeb){const _0x1d0d41=_0x588453;VisuMZ['BattleCore'][_0x1d0d41(0x8e1)][_0x1d0d41(0x90a)](this,_0x3feeeb),_0x1d0d41(0xab4)in _0x3feeeb?this[_0x1d0d41(0xab4)]=_0x3feeeb[_0x1d0d41(0xab4)]:this[_0x1d0d41(0xab4)]=![],_0x1d0d41(0x3dc)in _0x3feeeb?this['autoBattleUseSkills']=_0x3feeeb['autoBattleUseSkills']:this[_0x1d0d41(0x3dc)]=![],_0x1d0d41(0x8a2)in _0x3feeeb?this[_0x1d0d41(0x8a2)]=_0x3feeeb['visualHpGauge']:this[_0x1d0d41(0x8a2)]=!![];},ImageManager[_0x588453(0x1da)]=ImageManager[_0x588453(0x1da)]||0x9,ImageManager[_0x588453(0x36f)]=ImageManager[_0x588453(0x36f)]||0x6,VisuMZ[_0x588453(0x39a)]['BattleManager_setup']=BattleManager[_0x588453(0x68d)],BattleManager[_0x588453(0x68d)]=function(_0x2f5cfc,_0x1adb05,_0x436453){const _0x370706=_0x588453;VisuMZ['BattleCore'][_0x370706(0x4df)][_0x370706(0x90a)](this,_0x2f5cfc,_0x1adb05,_0x436453),this[_0x370706(0x41d)]={};},VisuMZ['BattleCore'][_0x588453(0x3c9)]=BattleManager[_0x588453(0x423)],BattleManager[_0x588453(0x423)]=function(){const _0x4a069c=_0x588453;VisuMZ[_0x4a069c(0x39a)][_0x4a069c(0x3c9)][_0x4a069c(0x90a)](this),this['_forcedBattlers']=[];},BattleManager[_0x588453(0x292)]=function(){const _0x4b2cf4=_0x588453;if(!SceneManager['isSceneBattle']())return;const _0xebe584=SceneManager[_0x4b2cf4(0x39b)]['_statusWindow'];if(_0xebe584)_0xebe584[_0x4b2cf4(0x33d)]();},BattleManager['battleSys']=function(){const _0x1419b7=_0x588453;if(BattleManager[_0x1419b7(0xa02)]())return'TPB';return _0x1419b7(0x7a5);},BattleManager[_0x588453(0xa5d)]=function(_0x4cced1){const _0x412153=_0x588453;return _0x4cced1=_0x4cced1[_0x412153(0x3c2)]()[_0x412153(0x4f2)](),this[_0x412153(0x36d)]()===_0x4cced1;},BattleManager[_0x588453(0x28a)]=function(){const _0x478e1f=_0x588453;return this[_0x478e1f(0xa5d)](_0x478e1f(0x7a5));},BattleManager[_0x588453(0x135)]=function(){const _0x303ed1=_0x588453;return this[_0x303ed1(0x28a)]();},BattleManager['isTickBased']=function(){const _0x179cfa=_0x588453;return!this[_0x179cfa(0x135)]();},BattleManager[_0x588453(0x46e)]=function(){const _0x40e2a3=_0x588453;return!this[_0x40e2a3(0x135)]()&&!this[_0x40e2a3(0x81b)]();},BattleManager[_0x588453(0x198)]=function(_0x2bc7ae){const _0x13b32f=_0x588453;this[_0x13b32f(0x41d)]=this[_0x13b32f(0x41d)]||{};if(this[_0x13b32f(0x41d)][_0x2bc7ae]!==undefined)return this[_0x13b32f(0x41d)][_0x2bc7ae];this[_0x13b32f(0x41d)][_0x2bc7ae]=null;const _0x2f0679=this[_0x13b32f(0x872)](),_0x390f35=_0x2f0679[_0x13b32f(0x322)](_0x5d4612=>_0x5d4612[_0x13b32f(0x42e)]()===_0x2bc7ae);if(_0x390f35)this[_0x13b32f(0x41d)][_0x2bc7ae]=_0x390f35;return this[_0x13b32f(0x41d)][_0x2bc7ae];},Game_BattlerBase[_0x588453(0x755)]['battlerKey']=function(){const _0x37d3aa=_0x588453;return _0x37d3aa(0x71f)['format'](this[_0x37d3aa(0xa52)]()?_0x37d3aa(0x112):_0x37d3aa(0xf1),this[_0x37d3aa(0x4cf)]());},Game_Action[_0x588453(0x755)]['setTargetBattlerKey']=function(_0x3c874b){const _0xa49515=_0x588453;if(this[_0xa49515(0x6fd)]!=='')return;typeof _0x3c874b===_0xa49515(0x81f)?this[_0xa49515(0x6fd)]=_0x3c874b['toLowerCase']()['trim']():this[_0xa49515(0x6fd)]=_0x3c874b[_0xa49515(0x42e)]();},Game_Action[_0x588453(0x755)][_0x588453(0x4bb)]=function(){const _0x3ee50b=_0x588453;return[this[_0x3ee50b(0x514)]()];},Game_Action[_0x588453(0x755)][_0x588453(0x514)]=function(){const _0x1efdb8=_0x588453,_0x14708b=this[_0x1efdb8(0x6fd)]||'',_0x3442cc=BattleManager[_0x1efdb8(0x198)](_0x14708b);if(!_0x3442cc)return this[_0x1efdb8(0x4d2)]();if(!_0x3442cc[_0x1efdb8(0x610)]())return this[_0x1efdb8(0x4d2)]();return _0x3442cc;},Game_Action['prototype'][_0x588453(0x4d2)]=function(){const _0x3e143a=_0x588453,_0x121fee=this[_0x3e143a(0x6fd)];return _0x121fee['match'](/ACTOR/i)?this[_0x3e143a(0x6f5)]()[_0x3e143a(0xaf3)]():this[_0x3e143a(0x6c0)]()[_0x3e143a(0xaf3)]();},BattleManager[_0x588453(0x847)]=function(){const _0x340194=_0x588453;return this['allBattleMembers']()[_0x340194(0x38d)](_0x363a16=>_0x363a16[_0x340194(0x676)]());},BattleManager['processBattleCoreJS']=function(_0x2e0cee){const _0x13e2e1=_0x588453;_0x2e0cee===_0x13e2e1(0x8a8)&&(this[_0x13e2e1(0x7e5)]=!![]),$gameParty[_0x13e2e1(0x2a4)](_0x2e0cee),$gameTroop['processBattleCoreJS'](_0x2e0cee);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager[_0x588453(0x5ce)],BattleManager[_0x588453(0x5ce)]=function(){const _0x5d04cd=_0x588453;this['_endBattle']=![],this[_0x5d04cd(0xd3)]=ConfigManager[_0x5d04cd(0xab4)],this[_0x5d04cd(0x7e5)]=![],this[_0x5d04cd(0x2a4)](_0x5d04cd(0x95c)),VisuMZ[_0x5d04cd(0x39a)][_0x5d04cd(0x24d)][_0x5d04cd(0x90a)](this),this[_0x5d04cd(0x2a4)](_0x5d04cd(0x427));},BattleManager[_0x588453(0x16e)]=function(_0x5106a2){const _0x2f64d2=_0x588453,_0x3ca660=VisuMZ[_0x2f64d2(0x39a)][_0x2f64d2(0x90d)]['Mechanics'];_0x5106a2!==_0x2f64d2(0xa1a)&&_0x3ca660[_0x2f64d2(0x29a)]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x3ca660[_0x2f64d2(0x29a)])&&$gameTemp[_0x2f64d2(0x622)](_0x3ca660[_0x2f64d2(0x29a)]);const _0x14f387=_0x2f64d2(0x133)[_0x2f64d2(0x4a9)](_0x5106a2);_0x3ca660[_0x14f387]&&VisuMZ[_0x2f64d2(0x39a)][_0x2f64d2(0x428)](_0x3ca660[_0x14f387])&&$gameTemp['reserveCommonEvent'](_0x3ca660[_0x14f387]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x1db)]=BattleManager[_0x588453(0x278)],BattleManager[_0x588453(0x278)]=function(){const _0x3a3efa=_0x588453;VisuMZ[_0x3a3efa(0x39a)][_0x3a3efa(0x1db)][_0x3a3efa(0x90a)](this),SceneManager[_0x3a3efa(0x8b8)]()&&BattleManager[_0x3a3efa(0x7c4)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x976)]=BattleManager['checkBattleEnd'],BattleManager['checkBattleEnd']=function(){const _0x31b7bd=_0x588453;if(this[_0x31b7bd(0x221)]===_0x31b7bd(0x4a0)){if($gameTemp[_0x31b7bd(0x55b)]())return![];}return VisuMZ[_0x31b7bd(0x39a)][_0x31b7bd(0x976)][_0x31b7bd(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x733)]=BattleManager['processVictory'],BattleManager['processVictory']=function(){const _0x24bfd3=_0x588453;this[_0x24bfd3(0x7e5)]=!![],this[_0x24bfd3(0x2a4)]('BattleVictoryJS'),VisuMZ[_0x24bfd3(0x39a)][_0x24bfd3(0x733)]['call'](this),this[_0x24bfd3(0x16e)]('Victory');},VisuMZ[_0x588453(0x39a)]['BattleManager_processAbort']=BattleManager['processAbort'],BattleManager[_0x588453(0x2ad)]=function(){const _0x21152b=_0x588453;this[_0x21152b(0x7e5)]=!![],VisuMZ[_0x21152b(0x39a)][_0x21152b(0x704)]['call'](this);},VisuMZ[_0x588453(0x39a)]['BattleManager_processDefeat']=BattleManager[_0x588453(0x3a1)],BattleManager[_0x588453(0x3a1)]=function(){const _0x1219ee=_0x588453;this['_endingBattle']=!![],this[_0x1219ee(0x2a4)](_0x1219ee(0x6c7)),VisuMZ['BattleCore']['BattleManager_processDefeat'][_0x1219ee(0x90a)](this),this[_0x1219ee(0x16e)](_0x1219ee(0x6f3));},VisuMZ[_0x588453(0x39a)]['BattleManager_endBattle']=BattleManager[_0x588453(0x12b)],BattleManager['endBattle']=function(_0x11c505){const _0x4f209f=_0x588453;this['_endBattle']=!![],this[_0x4f209f(0xd3)]=![],this[_0x4f209f(0x2a4)](_0x4f209f(0x215)),VisuMZ[_0x4f209f(0x39a)]['BattleManager_endBattle'][_0x4f209f(0x90a)](this,_0x11c505),this[_0x4f209f(0x2a4)](_0x4f209f(0x367));},VisuMZ[_0x588453(0x39a)][_0x588453(0x34c)]=BattleManager[_0x588453(0xaaa)],BattleManager['startTurn']=function(){const _0x260d8f=_0x588453;if(this['isTurnBased']())this[_0x260d8f(0x2a4)](_0x260d8f(0x51a));VisuMZ[_0x260d8f(0x39a)][_0x260d8f(0x34c)][_0x260d8f(0x90a)](this);if(this['isTurnBased']())this[_0x260d8f(0x2a4)](_0x260d8f(0x717));},BattleManager['processTurn']=function(){const _0x21b8a0=_0x588453,_0x4c94a8=this[_0x21b8a0(0x5a9)],_0x169ecc=_0x4c94a8[_0x21b8a0(0x83c)]();_0x169ecc?(_0x169ecc[_0x21b8a0(0x7b4)](),_0x169ecc['isValid']()?(this[_0x21b8a0(0x89a)](),_0x4c94a8[_0x21b8a0(0x1be)]()):(_0x4c94a8[_0x21b8a0(0x1be)](),this[_0x21b8a0(0x54d)]())):(this[_0x21b8a0(0x54d)](),this[_0x21b8a0(0x5a9)]=null);},VisuMZ['BattleCore'][_0x588453(0x8f5)]=BattleManager[_0x588453(0x89a)],BattleManager[_0x588453(0x89a)]=function(){const _0x5bcd5a=_0x588453,_0x188a91=this['_subject'][_0x5bcd5a(0x83c)](),_0x5a30d9=this[_0x5bcd5a(0x5a9)];_0x188a91&&_0x188a91[_0x5bcd5a(0x265)]()===_0x5a30d9&&_0x188a91['actionBattleCoreJS']('PreStartActionJS'),VisuMZ[_0x5bcd5a(0x39a)]['BattleManager_startAction'][_0x5bcd5a(0x90a)](this),_0x188a91&&_0x188a91[_0x5bcd5a(0x265)]()===_0x5a30d9&&_0x188a91['actionBattleCoreJS'](_0x5bcd5a(0x679));},VisuMZ[_0x588453(0x39a)][_0x588453(0x3ca)]=BattleManager[_0x588453(0x54d)],BattleManager[_0x588453(0x54d)]=function(){const _0x29ceee=_0x588453,_0x17faea=this[_0x29ceee(0x2a8)],_0x2301a8=this['_subject'];_0x17faea&&_0x17faea!==this[_0x29ceee(0x36c)]&&_0x17faea[_0x29ceee(0x265)]()===_0x2301a8&&_0x17faea['actionBattleCoreJS'](_0x29ceee(0x492)),this[_0x29ceee(0x5a9)]?VisuMZ[_0x29ceee(0x39a)][_0x29ceee(0x3ca)][_0x29ceee(0x90a)](this):this['_phase']='turn',_0x17faea&&_0x17faea!==this[_0x29ceee(0x36c)]&&_0x17faea['subject']()===_0x2301a8&&_0x17faea[_0x29ceee(0x5cc)](_0x29ceee(0x900)),this['refreshBattlerMotions'](this[_0x29ceee(0x872)]()),this[_0x29ceee(0x36c)]=this['_action'];},BattleManager[_0x588453(0x2fe)]=function(_0x4ff0c3){const _0x2924b3=_0x588453;for(const _0x250a16 of _0x4ff0c3){if(!_0x250a16)continue;if(!_0x250a16[_0x2924b3(0xabe)]())continue;_0x250a16[_0x2924b3(0xabe)]()['refreshMotion']();}},BattleManager['updateAction']=function(){const _0xae9a3e=_0x588453;!this[_0xae9a3e(0x944)]['isBusy']()&&this[_0xae9a3e(0x54d)]();},Game_Battler[_0x588453(0x755)]['onAllActionsEnd']=function(){const _0x48062f=_0x588453;this[_0x48062f(0x9f8)]();if(Imported[_0x48062f(0x384)]){const _0x17acbd=VisuMZ[_0x48062f(0x7e4)][_0x48062f(0x90d)][_0x48062f(0x8c3)];_0x17acbd&&_0x17acbd[_0x48062f(0x44b)]===![]&&this['removeStatesAuto'](0x1);}else this['removeStatesAuto'](0x1);this[_0x48062f(0x82c)]();},BattleManager['makeEscapeRatio']=function(){const _0x58ae2a=_0x588453;this[_0x58ae2a(0x605)]=VisuMZ[_0x58ae2a(0x39a)][_0x58ae2a(0x90d)][_0x58ae2a(0x4b1)][_0x58ae2a(0x7b6)][_0x58ae2a(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x171)]=BattleManager[_0x588453(0x721)],BattleManager[_0x588453(0x721)]=function(){const _0x2af8d5=_0x588453;this[_0x2af8d5(0x2a4)]('EscapeSuccessJS'),BattleManager[_0x2af8d5(0x9cf)][_0x2af8d5(0x5ae)](),VisuMZ[_0x2af8d5(0x39a)]['BattleManager_onEscapeSuccess']['call'](this),this['processPostBattleCommonEvents'](_0x2af8d5(0x28b));},VisuMZ['BattleCore'][_0x588453(0x38b)]=BattleManager[_0x588453(0x7ea)],BattleManager[_0x588453(0x7ea)]=function(){const _0x4e021d=_0x588453;this[_0x4e021d(0x2a4)](_0x4e021d(0x5a2));const _0x2f0a48=this[_0x4e021d(0x605)];VisuMZ[_0x4e021d(0x39a)][_0x4e021d(0x38b)][_0x4e021d(0x90a)](this),this[_0x4e021d(0x605)]=_0x2f0a48+VisuMZ[_0x4e021d(0x39a)]['Settings'][_0x4e021d(0x4b1)][_0x4e021d(0x130)][_0x4e021d(0x90a)](this),this['_inputting']=![],this[_0x4e021d(0x16e)]('EscapeFail');},BattleManager[_0x588453(0xad3)]=function(){const _0x322b8b=_0x588453;let _0x4fe7ef=![];if(this[_0x322b8b(0x84b)]())for(const _0x54f973 of $gameTroop[_0x322b8b(0xaac)]()){this[_0x322b8b(0x944)]['push'](_0x322b8b(0x433),TextManager[_0x322b8b(0x48b)][_0x322b8b(0x4a9)](_0x54f973)),this['_logWindow'][_0x322b8b(0x2b9)]('wait'),_0x4fe7ef=!![];}if(this[_0x322b8b(0x739)])this[_0x322b8b(0x944)][_0x322b8b(0x2b9)]('addText',TextManager[_0x322b8b(0x5d3)][_0x322b8b(0x4a9)]($gameParty['name']())),this[_0x322b8b(0x944)][_0x322b8b(0x2b9)](_0x322b8b(0x539));else this[_0x322b8b(0x43d)]&&(this[_0x322b8b(0x944)][_0x322b8b(0x2b9)](_0x322b8b(0x433),TextManager['surprise'][_0x322b8b(0x4a9)]($gameParty['name']())),this[_0x322b8b(0x944)][_0x322b8b(0x2b9)]('wait'));_0x4fe7ef&&(this[_0x322b8b(0x944)][_0x322b8b(0x2b9)](_0x322b8b(0x539)),this['_logWindow'][_0x322b8b(0x2b9)](_0x322b8b(0x399))),this[_0x322b8b(0xa02)]()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x588453(0x84b)]=function(){const _0x2f102d=_0x588453;if(BattleManager[_0x2f102d(0xd3)])return![];return VisuMZ[_0x2f102d(0x39a)]['Settings']['Enemy']['EmergeText'];},VisuMZ[_0x588453(0x39a)]['BattleManager_startInput']=BattleManager[_0x588453(0x7fe)],BattleManager['startInput']=function(){const _0x345926=_0x588453;VisuMZ[_0x345926(0x39a)]['BattleManager_startInput'][_0x345926(0x90a)](this),this[_0x345926(0x28a)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x345926(0x43d)]&&$gameParty['canInput']()&&this[_0x345926(0x632)]();},BattleManager[_0x588453(0xa88)]=function(){const _0x380676=_0x588453;return VisuMZ[_0x380676(0x39a)][_0x380676(0x90d)]['PartyCmd']['SkipPartyCmd'];},BattleManager[_0x588453(0x66e)]=function(){const _0x5cc4b9=_0x588453;this[_0x5cc4b9(0x4aa)]()&&this[_0x5cc4b9(0x632)]();},VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x588453(0x755)][_0x588453(0x61d)],Scene_Battle[_0x588453(0x755)][_0x588453(0x61d)]=function(){const _0x122373=_0x588453;VisuMZ['BattleCore'][_0x122373(0x798)][_0x122373(0x90a)](this),BattleManager[_0x122373(0xa02)]()&&BattleManager[_0x122373(0x4da)]&&(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x122373(0xa51)]());},BattleManager['emulateAction']=function(_0x7ce114,_0x338c36,_0xc38af6){const _0x41f59e=_0x588453;if(!_0xc38af6)return;if(!_0x7ce114)return;if(!_0x338c36)return;const _0x8eda1=this['_action'];this[_0x41f59e(0x2a8)]=new Game_Action(_0x7ce114);if(DataManager['isItem'](_0xc38af6))this['_action'][_0x41f59e(0x39c)](_0xc38af6['id']);if(DataManager['isSkill'](_0xc38af6))this[_0x41f59e(0x2a8)][_0x41f59e(0xacd)](_0xc38af6['id']);if(this['_action'][_0x41f59e(0x343)]())BattleManager[_0x41f59e(0x912)](_0x7ce114,_0x338c36);this[_0x41f59e(0x2a8)]=_0x8eda1;},BattleManager[_0x588453(0x21d)]=function(_0x1dfe59,_0x3287bf){const _0x1ff491=_0x588453;this[_0x1ff491(0x2a8)][_0x1ff491(0x405)]=_0x3287bf,this[_0x1ff491(0x944)][_0x1ff491(0x4f3)](_0x3287bf),this['_logWindow'][_0x1ff491(0x3a0)](_0x1dfe59,this['_action']),this['_action'][_0x1ff491(0xaa8)](_0x1dfe59),this[_0x1ff491(0x944)][_0x1ff491(0x16d)](_0x1dfe59,_0x1dfe59);},VisuMZ[_0x588453(0x39a)]['BattleManager_makeActionOrders']=BattleManager[_0x588453(0x1ca)],BattleManager[_0x588453(0x1ca)]=function(){const _0x30f564=_0x588453;VisuMZ[_0x30f564(0x39a)][_0x30f564(0x83f)]['call'](this),this['_actionBattlers']=this[_0x30f564(0x150)][_0x30f564(0x38d)](_0x2ed24a=>_0x2ed24a&&_0x2ed24a[_0x30f564(0x8ef)]());},VisuMZ['BattleCore'][_0x588453(0x3d6)]=BattleManager['updatePhase'],BattleManager['updatePhase']=function(_0x25bfbf){const _0x47b1bb=_0x588453;if(this[_0x47b1bb(0x221)]==='custom')this['updateCustomActionSequence']();else this[_0x47b1bb(0x221)]==='forceAction'?this[_0x47b1bb(0x815)]():VisuMZ['BattleCore'][_0x47b1bb(0x3d6)][_0x47b1bb(0x90a)](this,_0x25bfbf);},BattleManager[_0x588453(0x994)]=function(){const _0x36cab3=_0x588453;this[_0x36cab3(0x99a)]=this['_targets'][_0x36cab3(0x19b)](0x0),this[_0x36cab3(0x6ca)]=0x0,this[_0x36cab3(0x4fb)]=this[_0x36cab3(0x99a)][0x0]||null,this[_0x36cab3(0x221)]=_0x36cab3(0x73f);},BattleManager[_0x588453(0xa46)]=function(){const _0xcde41c=_0x588453;!this[_0xcde41c(0x9d3)]()&&!this['_logWindow'][_0xcde41c(0x98c)]()&&(this[_0xcde41c(0x221)]=_0xcde41c(0x11c));},BattleManager[_0x588453(0xa9f)]=function(_0x478456){const _0x513986=_0x588453;this[_0x513986(0x150)][_0x513986(0xaee)](_0x478456);if(_0x478456===this[_0x513986(0x5a9)])return;const _0x1d8c63=JsonEx[_0x513986(0x2c3)](_0x478456['currentAction']());this['_forcedBattlers']['push']([_0x478456,_0x1d8c63]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x588453(0x407)]=function(){const _0x110521=_0x588453;if(this[_0x110521(0xa02)]())this[_0x110521(0x221)]=_0x110521(0x4a0);else this[_0x110521(0x63c)]['length']>0x0?this[_0x110521(0x221)]=_0x110521(0x4a0):this[_0x110521(0x7fe)]();},BattleManager[_0x588453(0x657)]=function(){const _0x322dc4=_0x588453,_0x6bb296=this[_0x322dc4(0x5a9)];_0x6bb296&&this[_0x322dc4(0xa02)]()&&_0x6bb296[_0x322dc4(0x43a)](_0x322dc4(0x3bd));for(;;){const _0x281e48=this[_0x322dc4(0x19a)]();if(!_0x281e48)return null;if(_0x281e48['isBattleMember']()&&_0x281e48[_0x322dc4(0x610)]())return _0x281e48;}},BattleManager[_0x588453(0x19a)]=function(){const _0x38b865=_0x588453;if(this[_0x38b865(0x63c)][_0x38b865(0x6e3)]>0x0){const _0x475625=this[_0x38b865(0x63c)][_0x38b865(0x41a)](),_0x2e7e98=_0x475625[0x0];return _0x2e7e98[_0x38b865(0x6ee)]=_0x2e7e98[_0x38b865(0x6ee)]||[],_0x2e7e98[_0x38b865(0x6ee)][0x0]=_0x475625[0x1],_0x2e7e98;}else return this[_0x38b865(0x150)]['shift']();},VisuMZ[_0x588453(0x39a)]['Game_Battler_forceAction']=Game_Battler[_0x588453(0x755)][_0x588453(0xa9f)],Game_Battler['prototype'][_0x588453(0xa9f)]=function(_0xa144e3,_0x5af92d){const _0xc936e1=_0x588453;VisuMZ[_0xc936e1(0x39a)]['Game_Battler_forceAction'][_0xc936e1(0x90a)](this,_0xa144e3,_0x5af92d),this['_actions'][this[_0xc936e1(0x6ee)][_0xc936e1(0x6e3)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x588453(0x755)][_0x588453(0x86a)]=function(_0x5c9b3f){const _0x267599=_0x588453;return this[_0x267599(0xa4e)](_0x5c9b3f[0x0],_0x5c9b3f[0x1],_0x3838f2=>{const _0x1042a1=_0x267599;!_0x3838f2[_0x1042a1(0x7eb)]()&&(_0x3838f2[_0x1042a1(0xa9f)](_0x5c9b3f[0x2],_0x5c9b3f[0x3]),BattleManager[_0x1042a1(0xa9f)](_0x3838f2));}),!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0xa67)]=Game_Battler[_0x588453(0x755)][_0x588453(0x943)],Game_Battler[_0x588453(0x755)][_0x588453(0x943)]=function(){const _0x1bd8fc=_0x588453;VisuMZ['BattleCore']['Game_Battler_makeSpeed'][_0x1bd8fc(0x90a)](this),this[_0x1bd8fc(0x6ee)][_0x1bd8fc(0x6e3)]<=0x0&&(this[_0x1bd8fc(0x601)]=Number['MIN_SAFE_INTEGER']);},BattleManager[_0x588453(0x240)]=function(){const _0x835aee=_0x588453;if(VisuMZ[_0x835aee(0x39a)][_0x835aee(0x90d)][_0x835aee(0x69a)][_0x835aee(0x87e)]??!![])return![];return SceneManager[_0x835aee(0x8b8)]()&&this['_endingBattle'];},VisuMZ[_0x588453(0x39a)][_0x588453(0x4e5)]=BattleManager[_0x588453(0x632)],BattleManager[_0x588453(0x632)]=function(){const _0x2ef459=_0x588453;this[_0x2ef459(0xa02)]()?this[_0x2ef459(0x946)]():VisuMZ[_0x2ef459(0x39a)]['BattleManager_selectNextCommand']['call'](this);},BattleManager['selectNextCommandTpb']=function(){const _0x9a8d12=_0x588453;if(this[_0x9a8d12(0x29f)]){if(this['_currentActor'][_0x9a8d12(0x632)]())return;this[_0x9a8d12(0x934)](),this[_0x9a8d12(0xa47)](),!this[_0x9a8d12(0x5a9)]&&!this[_0x9a8d12(0x29f)]&&SceneManager[_0x9a8d12(0x39b)][_0x9a8d12(0xce)]();}else!this[_0x9a8d12(0x5a9)]&&this[_0x9a8d12(0x4ea)]();},BattleManager[_0x588453(0xa47)]=function(){const _0x3f46e2=_0x588453;(!this['isPartyTpbInputtable']()||this[_0x3f46e2(0x294)]())&&(this[_0x3f46e2(0x481)]&&(!$gameParty[_0x3f46e2(0x988)]()[_0x3f46e2(0x51e)](this[_0x3f46e2(0x481)])&&(this[_0x3f46e2(0x481)]=null)),!this[_0x3f46e2(0x481)]?(this[_0x3f46e2(0x78e)](),this[_0x3f46e2(0x29f)]=null,this[_0x3f46e2(0x4c8)]=![]):this[_0x3f46e2(0x5b6)]());},BattleManager[_0x588453(0x5b6)]=function(){const _0x169473=_0x588453;!$gameParty['battleMembers']()[_0x169473(0x51e)](this['_tpbSceneChangeCacheActor'])&&(this[_0x169473(0x481)]=null),this[_0x169473(0x481)]?(this['_currentActor']=this[_0x169473(0x481)],this['_currentActor'][_0x169473(0xec)]='charged',this['_inputting']=!![],this[_0x169473(0x481)]=null):(this['cancelActorInput'](),this[_0x169473(0x29f)]=null,this[_0x169473(0x4c8)]=![]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x1d9)]=BattleManager[_0x588453(0x1ab)],BattleManager[_0x588453(0x1ab)]=function(){const _0x6285aa=_0x588453;return this[_0x6285aa(0x221)]===_0x6285aa(0x73f)?this[_0x6285aa(0x67f)]():VisuMZ['BattleCore'][_0x6285aa(0x1d9)]['call'](this);},BattleManager[_0x588453(0x67f)]=function(){return this['isActiveTpb']();},VisuMZ[_0x588453(0x39a)][_0x588453(0x1d5)]=BattleManager[_0x588453(0x78e)],BattleManager['cancelActorInput']=function(){const _0x586337=_0x588453;this[_0x586337(0xa02)]()&&this[_0x586337(0x221)]===_0x586337(0x834)&&(this['_currentActor']=null),VisuMZ[_0x586337(0x39a)][_0x586337(0x1d5)]['call'](this);},VisuMZ['BattleCore']['BattleManager_inputtingAction']=BattleManager[_0x588453(0x5c7)],BattleManager[_0x588453(0x5c7)]=function(){const _0x5d9fdc=_0x588453,_0x104fc2=this[_0x5d9fdc(0x29f)];if(_0x104fc2&&!_0x104fc2['inputtingAction']()){const _0x269352=_0x104fc2[_0x5d9fdc(0x635)];_0x104fc2[_0x5d9fdc(0x6ee)][_0x269352]=new Game_Action(_0x104fc2);}return VisuMZ['BattleCore']['BattleManager_inputtingAction'][_0x5d9fdc(0x90a)](this);},VisuMZ[_0x588453(0x39a)]['BattleManager_checkSubstitute']=BattleManager['checkSubstitute'],BattleManager[_0x588453(0x7bb)]=function(_0x3136f0){const _0xdf1248=_0x588453;if(this[_0xdf1248(0x2a8)][_0xdf1248(0x3cf)]())return![];return VisuMZ[_0xdf1248(0x39a)]['BattleManager_checkSubstitute'][_0xdf1248(0x90a)](this,_0x3136f0);},SceneManager[_0x588453(0x8b8)]=function(){const _0x1eaeb9=_0x588453;return this['_scene']&&this['_scene'][_0x1eaeb9(0x671)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x3d4887=_0x588453;return Spriteset_Battle[_0x3d4887(0x755)][_0x3d4887(0x9f3)]();},SceneManager[_0x588453(0x738)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x3b0a49){const _0x39a7b3=_0x588453;if(!SceneManager[_0x39a7b3(0x8b8)]())return!![];const _0x19d8b3=[_0x39a7b3(0x4af),'Scene_Party',_0x39a7b3(0x48a)];return _0x19d8b3[_0x39a7b3(0x51e)](_0x3b0a49[_0x39a7b3(0x4cf)]);},VisuMZ['BattleCore'][_0x588453(0x574)]=SceneManager[_0x588453(0x2b9)],SceneManager[_0x588453(0x2b9)]=function(_0x3fe817){const _0x522eab=_0x588453;if(!SceneManager[_0x522eab(0x637)](_0x3fe817))return this['displayBattleCoreTransitionErrorMsg'](_0x3fe817);VisuMZ['BattleCore'][_0x522eab(0x574)][_0x522eab(0x90a)](this,_0x3fe817);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x479686){const _0x76646f=_0x588453;if(!$gameTemp['isPlaytest']())return;if(this[_0x76646f(0x46f)])return;this[_0x76646f(0x46f)]=!![];let _0x37b94b='';_0x37b94b+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x37b94b+='\x20to\x20%1\x20midbattle.'['format'](_0x479686['name']),alert(_0x37b94b);},VisuMZ[_0x588453(0x39a)][_0x588453(0x5da)]=Game_Temp[_0x588453(0x755)][_0x588453(0x155)],Game_Temp[_0x588453(0x755)]['initialize']=function(){const _0x16b821=_0x588453;VisuMZ[_0x16b821(0x39a)][_0x16b821(0x5da)][_0x16b821(0x90a)](this),this[_0x16b821(0x7f9)]=[];},VisuMZ[_0x588453(0x39a)][_0x588453(0xab3)]=Game_Temp['prototype'][_0x588453(0x387)],Game_Temp[_0x588453(0x755)][_0x588453(0x387)]=function(_0xa2ad31,_0x4383a8,_0x332c9c){const _0x13c286=_0x588453;_0xa2ad31=_0xa2ad31['filter']((_0x1df467,_0x5b95a7,_0x459450)=>_0x459450[_0x13c286(0x512)](_0x1df467)===_0x5b95a7);SceneManager[_0x13c286(0x8b8)]()&&SceneManager[_0x13c286(0x9b6)]()&&(_0x332c9c=!_0x332c9c);VisuMZ['BattleCore']['Game_Temp_requestAnimation'][_0x13c286(0x90a)](this,_0xa2ad31,_0x4383a8,_0x332c9c);SceneManager[_0x13c286(0x8b8)]()&&BattleManager[_0x13c286(0x9cf)][_0x13c286(0x4f1)]();for(const _0x21bf9e of _0xa2ad31){_0x21bf9e&&_0x21bf9e[_0x13c286(0x4ad)]&&_0x21bf9e[_0x13c286(0x4ad)]()&&_0x21bf9e['resetNameTempVisibility']();}},Game_Temp[_0x588453(0x755)][_0x588453(0x50b)]=function(_0x447bc8){const _0x29b9f0=_0x588453;this[_0x29b9f0(0x424)]=_0x447bc8;},Game_Temp['prototype'][_0x588453(0x26a)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x588453(0x755)][_0x588453(0x7be)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp['prototype']['applyForcedGameTroopSettingsBattleCore']=function(_0x3f1b03){const _0x401f4e=_0x588453;$gameMap&&$dataMap&&$dataMap[_0x401f4e(0x97d)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x401f4e(0x97d)]);const _0xf26d9c=$dataTroops[_0x3f1b03];if(_0xf26d9c){let _0x56c06b=DataManager[_0x401f4e(0x93f)](_0xf26d9c['id']);this[_0x401f4e(0x5b5)](_0x56c06b);}},Game_Temp[_0x588453(0x755)]['parseForcedGameTroopSettingsBattleCore']=function(_0x3bd6b3){const _0x20cb10=_0x588453;if(!_0x3bd6b3)return;if(_0x3bd6b3['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x15a16a=String(RegExp['$1']);if(_0x15a16a[_0x20cb10(0x809)](/DEFAULT/i))this[_0x20cb10(0x2fd)]=_0x20cb10(0x880);else{if(_0x15a16a[_0x20cb10(0x809)](/LIST/i))this['_forcedBattleLayout']=_0x20cb10(0x70f);else{if(_0x15a16a[_0x20cb10(0x809)](/XP/i))this[_0x20cb10(0x2fd)]='xp';else{if(_0x15a16a[_0x20cb10(0x809)](/PORTRAIT/i))this[_0x20cb10(0x2fd)]=_0x20cb10(0x418);else{if(_0x15a16a['match'](/BORDER/i))this['_forcedBattleLayout']=_0x20cb10(0x469);else{if(_0x15a16a[_0x20cb10(0x809)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x20cb10(0x268)]?this[_0x20cb10(0x2fd)]=_0x20cb10(0x3d9):this['_forcedBattleLayout']='default';else _0x15a16a[_0x20cb10(0x809)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported['VisuMZ_3_FrontviewBattleUI']?this[_0x20cb10(0x2fd)]=_0x20cb10(0x4dc):this[_0x20cb10(0x2fd)]=_0x20cb10(0x880));}}}}}}},VisuMZ[_0x588453(0x39a)]['Game_Temp_requestBalloon']=Game_Temp['prototype'][_0x588453(0x58a)],Game_Temp[_0x588453(0x755)][_0x588453(0x58a)]=function(_0x3dfbe9,_0x535ac6){const _0x492191=_0x588453;SceneManager[_0x492191(0x8b8)]()?this[_0x492191(0x609)](_0x3dfbe9,_0x535ac6):VisuMZ[_0x492191(0x39a)][_0x492191(0x761)]['call'](this,_0x3dfbe9,_0x535ac6);},Game_Temp[_0x588453(0x755)][_0x588453(0x609)]=function(_0xdd0c24,_0x433b4c){const _0x23cd17=_0x588453,_0x22e333={'target':_0xdd0c24,'balloonId':_0x433b4c};this[_0x23cd17(0x7f9)]=this['_battleBalloonQueue']||[],this[_0x23cd17(0x7f9)]['push'](_0x22e333);},Game_Temp[_0x588453(0x755)][_0x588453(0x555)]=function(){const _0x22936b=_0x588453;return this[_0x22936b(0x7f9)]=this['_battleBalloonQueue']||[],this[_0x22936b(0x7f9)]['shift']();},Game_Temp[_0x588453(0x755)][_0x588453(0xad8)]=function(){const _0x4bd076=_0x588453;this[_0x4bd076(0x7f9)]=[];},Spriteset_Battle['prototype'][_0x588453(0x7e9)]=function(){const _0x385e41=_0x588453;this[_0x385e41(0x543)]===undefined&&(this['_battleBalloonSprites']=[]);for(const _0x2e7875 of this[_0x385e41(0x543)]){!_0x2e7875[_0x385e41(0x2ab)]()&&this[_0x385e41(0x3d1)](_0x2e7875);}this['processBattleBalloonRequests']();},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x9fc)]=function(){const _0x4cf6ea=_0x588453;for(;;){const _0x5e1487=$gameTemp[_0x4cf6ea(0x555)]();if(_0x5e1487)this[_0x4cf6ea(0x46d)](_0x5e1487);else break;}},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x46d)]=function(_0x2bf8e9){const _0x152e48=_0x588453,_0x4f9071=this[_0x152e48(0x40f)](_0x2bf8e9[_0x152e48(0x8af)]);if(_0x4f9071){let _0x52b943=null;Imported[_0x152e48(0x9a1)]&&Array[_0x152e48(0xa6d)](_0x2bf8e9[_0x152e48(0xa2a)])?_0x52b943=new Sprite_IconBalloon():_0x52b943=new Sprite_Balloon(),_0x52b943[_0x152e48(0xa18)]=_0x2bf8e9[_0x152e48(0x8af)],_0x52b943[_0x152e48(0x4fb)]=_0x4f9071,_0x52b943[_0x152e48(0x4fb)][_0x152e48(0xa5a)]=_0x4f9071,_0x52b943[_0x152e48(0x68d)](_0x4f9071,_0x2bf8e9[_0x152e48(0xa2a)]),BattleManager['addChildToUiContainer'](_0x52b943),this['_battleBalloonSprites']['push'](_0x52b943);}},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x3d1)]=function(_0x29209c){const _0x42c3d8=_0x588453;this[_0x42c3d8(0x543)][_0x42c3d8(0xaee)](_0x29209c),BattleManager['removeChildFromUiContainer'](_0x29209c),_0x29209c[_0x42c3d8(0x9b9)]();},Sprite_Battler['prototype']['setBalloonPose']=function(_0x41f9f4,_0x4ff489){},Sprite_Battler[_0x588453(0x755)][_0x588453(0x772)]=function(){return![];},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x778)]=function(){const _0x2cd4ac=_0x588453;return this[_0x2cd4ac(0x543)]=this[_0x2cd4ac(0x543)]||[],this[_0x2cd4ac(0x543)][_0x2cd4ac(0x6e3)]>0x0;},VisuMZ['BattleCore'][_0x588453(0x683)]=Game_System['prototype'][_0x588453(0x155)],Game_System[_0x588453(0x755)]['initialize']=function(){const _0x13a153=_0x588453;VisuMZ[_0x13a153(0x39a)][_0x13a153(0x683)][_0x13a153(0x90a)](this),this[_0x13a153(0x63a)]();},Game_System[_0x588453(0x755)]['initBattleCore']=function(){const _0x4e7e12=_0x588453;this[_0x4e7e12(0x374)]=this[_0x4e7e12(0x374)]||[];},Game_System[_0x588453(0x755)][_0x588453(0x2ac)]=function(){const _0x4316d6=_0x588453;if(this['_defeatedEnemies']===undefined)this[_0x4316d6(0x63a)]();return this[_0x4316d6(0x374)];},Game_System['prototype'][_0x588453(0x419)]=function(_0x4ad721){const _0x422d2f=_0x588453;if(this[_0x422d2f(0x374)]===undefined)this[_0x422d2f(0x63a)]();if(!_0x4ad721)return;if(this['_defeatedEnemies'][_0x422d2f(0x51e)](_0x4ad721))return;this[_0x422d2f(0x374)][_0x422d2f(0x2b9)](_0x4ad721),this[_0x422d2f(0x374)][_0x422d2f(0x882)]((_0x3b3274,_0x143c15)=>_0x3b3274-_0x143c15);},VisuMZ[_0x588453(0x39a)][_0x588453(0x694)]=Game_BattlerBase[_0x588453(0x755)][_0x588453(0x57c)],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x57c)]=function(_0x4c470e){const _0x5d3e78=_0x588453,_0x211090=this[_0x5d3e78(0x610)](),_0x5f0e78=this['stateMotionIndex']();VisuMZ[_0x5d3e78(0x39a)][_0x5d3e78(0x694)][_0x5d3e78(0x90a)](this,_0x4c470e),this[_0x5d3e78(0x4ad)]()&&_0x211090&&this[_0x5d3e78(0x8c6)]()&&(this[_0x5d3e78(0x72e)]=!this[_0x5d3e78(0x213)](),$gameSystem[_0x5d3e78(0x419)](this[_0x5d3e78(0x1e6)]())),SceneManager[_0x5d3e78(0x8b8)]()&&_0x5f0e78!==this['stateMotionIndex']()&&(this[_0x5d3e78(0xabe)]()&&this[_0x5d3e78(0xabe)]()[_0x5d3e78(0x974)]());},Game_Enemy[_0x588453(0x755)][_0x588453(0x213)]=function(){const _0x1b25b2=_0x588453;return $gameSystem[_0x1b25b2(0x2ac)]()['includes'](this['_enemyId']);},VisuMZ['BattleCore'][_0x588453(0x429)]=Game_BattlerBase[_0x588453(0x755)]['eraseState'],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x6e1)]=function(_0x36a6df){const _0x1e8125=_0x588453;VisuMZ['BattleCore'][_0x1e8125(0x429)][_0x1e8125(0x90a)](this,_0x36a6df),this[_0x1e8125(0x4ad)]()&&_0x36a6df===this['deathStateId']()&&this[_0x1e8125(0x610)]()&&(this[_0x1e8125(0x72e)]=![]),!this[_0x1e8125(0xa3a)]&&!this[_0x1e8125(0x5b2)]&&SceneManager[_0x1e8125(0x8b8)]()&&this['requestMotionRefresh']();},VisuMZ[_0x588453(0x39a)][_0x588453(0x1d4)]=Game_Action[_0x588453(0x755)][_0x588453(0x399)],Game_Action['prototype']['clear']=function(){const _0x1306e3=_0x588453;VisuMZ['BattleCore']['Game_Action_clear'][_0x1306e3(0x90a)](this),this[_0x1306e3(0x64a)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1306e3(0x327)]=_0x1306e3(0x880),this[_0x1306e3(0x9c4)]();},Game_Action[_0x588453(0x755)][_0x588453(0x9c4)]=function(){this['_targetBattlerKey']='';},VisuMZ['BattleCore'][_0x588453(0x99b)]=Game_Action[_0x588453(0x755)][_0x588453(0x94e)],Game_Action[_0x588453(0x755)][_0x588453(0x94e)]=function(_0xa760e4){const _0x267131=_0x588453;VisuMZ[_0x267131(0x39a)][_0x267131(0x99b)][_0x267131(0x90a)](this,_0xa760e4),this[_0x267131(0x9c4)]();},VisuMZ[_0x588453(0x39a)]['Game_Action_setSkill']=Game_Action[_0x588453(0x755)]['setSkill'],Game_Action[_0x588453(0x755)][_0x588453(0xacd)]=function(_0x238baa){const _0x5c9918=_0x588453;VisuMZ[_0x5c9918(0x39a)][_0x5c9918(0x4b4)][_0x5c9918(0x90a)](this,_0x238baa),this[_0x5c9918(0x9c4)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x6c9)]=Game_Action[_0x588453(0x755)][_0x588453(0x39c)],Game_Action['prototype']['setItem']=function(_0x39d94d){const _0x37c6f5=_0x588453;VisuMZ[_0x37c6f5(0x39a)][_0x37c6f5(0x6c9)][_0x37c6f5(0x90a)](this,_0x39d94d),this[_0x37c6f5(0x9c4)]();},Game_Action[_0x588453(0x755)]['makeDamageValue']=function(_0x181a87,_0x35a10f){const _0x4fba37=_0x588453;return VisuMZ[_0x4fba37(0x39a)]['Settings'][_0x4fba37(0x69a)]['OverallFormulaJS'][_0x4fba37(0x90a)](this,_0x181a87,_0x35a10f);},Game_Action[_0x588453(0x755)][_0x588453(0x78d)]=function(_0x4af41d,_0x2df5a3){const _0x1c2792=_0x588453;return VisuMZ['BattleCore']['Settings'][_0x1c2792(0x69a)][_0x1c2792(0x1af)][_0x1c2792(0x90a)](this,_0x4af41d,_0x2df5a3);},Game_Action['prototype'][_0x588453(0x5dc)]=function(_0x3da467,_0x17ec70){const _0x4ce2f7=_0x588453;return VisuMZ[_0x4ce2f7(0x39a)][_0x4ce2f7(0x90d)][_0x4ce2f7(0x69a)][_0x4ce2f7(0x979)][_0x4ce2f7(0x90a)](this,_0x3da467,_0x17ec70);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action['prototype'][_0x588453(0x6fa)],Game_Action[_0x588453(0x755)][_0x588453(0x6fa)]=function(_0xf05eaf){const _0x3f630c=_0x588453,_0x9ef2e1=this[_0x3f630c(0x343)]()[_0x3f630c(0x97d)];if(_0x9ef2e1[_0x3f630c(0x809)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x9ef2e1[_0x3f630c(0x809)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x39c52b=VisuMZ[_0x3f630c(0x39a)][_0x3f630c(0x169)][_0x3f630c(0x90a)](this,_0xf05eaf);return _0x39c52b=this['_multipliers'][_0x3f630c(0x302)]*_0x39c52b+this[_0x3f630c(0x320)][_0x3f630c(0x255)],$gameParty['inBattle']()&&(_0x39c52b=this[_0x3f630c(0x4a8)](_0x39c52b,_0xf05eaf)),_0x39c52b;}}},VisuMZ[_0x588453(0x39a)][_0x588453(0x97e)]=Game_Action[_0x588453(0x755)][_0x588453(0x774)],Game_Action[_0x588453(0x755)][_0x588453(0x774)]=function(_0x5bde23){const _0x4a1f74=_0x588453;this[_0x4a1f74(0x366)]=!![],VisuMZ['BattleCore'][_0x4a1f74(0x97e)][_0x4a1f74(0x90a)](this,_0x5bde23),this[_0x4a1f74(0x366)]=undefined;},Game_Action['prototype'][_0x588453(0x1d3)]=function(_0x5755e8){const _0x41b8c4=_0x588453;window[_0x41b8c4(0x11c)]=this,window['a']=this[_0x41b8c4(0x265)](),window['b']=_0x5755e8,window[_0x41b8c4(0xa48)]=this[_0x41b8c4(0x265)](),window['target']=_0x5755e8,window[_0x41b8c4(0x72a)]=this[_0x41b8c4(0x343)](),window[_0x41b8c4(0x33f)]=this[_0x41b8c4(0x343)](),window[_0x41b8c4(0x343)]=this[_0x41b8c4(0x343)]();},Game_Action[_0x588453(0x755)]['clearGlobalVariables']=function(_0x441af6){const _0xa43399=_0x588453;window['action']=undefined,window['a']=undefined,window['b']=undefined,window[_0xa43399(0xa48)]=undefined,window[_0xa43399(0x8af)]=undefined,window[_0xa43399(0x72a)]=undefined,window[_0xa43399(0x33f)]=undefined,window[_0xa43399(0x343)]=undefined;},Game_Action[_0x588453(0x755)]['applyBattleCoreHitRateJS']=function(_0x30425a,_0x2408d9){const _0x283d67=_0x588453;if(this[_0x283d67(0x366)])return _0x30425a;this[_0x283d67(0x1d3)](_0x2408d9);if(this[_0x283d67(0x343)]()){let _0x1c4e2b=VisuMZ[_0x283d67(0x39a)][_0x283d67(0x4ff)](this['item'](),_0x283d67(0x7a9));VisuMZ[_0x283d67(0x39a)]['JS'][_0x1c4e2b]&&(_0x30425a=VisuMZ['BattleCore']['JS'][_0x1c4e2b][_0x283d67(0x90a)](this,this['subject'](),_0x2408d9,this[_0x283d67(0x343)](),_0x30425a));}for(const _0x133ce3 of this[_0x283d67(0x265)]()[_0x283d67(0x863)]()){if(!_0x133ce3)continue;key=VisuMZ[_0x283d67(0x39a)][_0x283d67(0x4ff)](_0x133ce3,'jsAccuracyAsUser'),VisuMZ[_0x283d67(0x39a)]['JS'][key]&&(_0x30425a=VisuMZ['BattleCore']['JS'][key][_0x283d67(0x90a)](this,this[_0x283d67(0x265)](),_0x2408d9,this['item'](),_0x30425a));}for(const _0x43d436 of _0x2408d9[_0x283d67(0x863)]()){if(!_0x43d436)continue;key=VisuMZ[_0x283d67(0x39a)]['createKeyJS'](_0x43d436,_0x283d67(0xa17)),VisuMZ['BattleCore']['JS'][key]&&(_0x30425a=VisuMZ['BattleCore']['JS'][key][_0x283d67(0x90a)](this,this[_0x283d67(0x265)](),_0x2408d9,this[_0x283d67(0x343)](),_0x30425a));}return this[_0x283d67(0x113)](_0x2408d9),_0x30425a;},Game_Action[_0x588453(0x755)][_0x588453(0xcc)]=function(_0x349e03){const _0x40f11d=_0x588453;if(!this[_0x40f11d(0x343)]()[_0x40f11d(0x4b5)][_0x40f11d(0x160)])return 0x0;let _0x5902ce=VisuMZ['BattleCore'][_0x40f11d(0x90d)][_0x40f11d(0x69a)]['CriticalHitRateJS'][_0x40f11d(0x90a)](this,_0x349e03);return _0x5902ce=this['_multipliers']['criticalHitRate']*_0x5902ce+this[_0x40f11d(0x320)]['criticalHitFlat'],$gameParty[_0x40f11d(0x48e)]()&&(_0x5902ce=this[_0x40f11d(0xa2b)](_0x5902ce,_0x349e03)),_0x5902ce;},Game_Action[_0x588453(0x755)][_0x588453(0xa2b)]=function(_0x2fd41c,_0x15bfff){const _0xa37730=_0x588453;this[_0xa37730(0x1d3)](_0x15bfff),window['rate']=_0x2fd41c;{const _0x3cc731=this[_0xa37730(0x265)]()[_0xa37730(0x863)]();for(const _0x2594e2 of _0x3cc731){if(!_0x2594e2)continue;if(_0x2594e2[_0xa37730(0x97d)][_0xa37730(0x809)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x3d0f55=String(RegExp['$1']);try{eval(_0x3d0f55);}catch(_0x39ab06){if($gameTemp[_0xa37730(0x972)]())console[_0xa37730(0x6bf)](_0x39ab06);}}}}{const _0x27d0e1=_0x15bfff[_0xa37730(0x863)]();for(const _0x173280 of _0x27d0e1){if(!_0x173280)continue;if(_0x173280[_0xa37730(0x97d)]['match'](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x422de8=String(RegExp['$1']);try{eval(_0x422de8);}catch(_0x3aba82){if($gameTemp['isPlaytest']())console[_0xa37730(0x6bf)](_0x3aba82);}}}}return _0x2fd41c=window['rate'],this[_0xa37730(0x113)](_0x15bfff),_0x2fd41c;},Game_Action[_0x588453(0x755)][_0x588453(0xa2b)]=function(_0x1963c6,_0x59d207){const _0x2d385=_0x588453;this[_0x2d385(0x1d3)](_0x59d207);for(const _0x11891f of this[_0x2d385(0x265)]()['traitObjects']()){if(!_0x11891f)continue;key=VisuMZ[_0x2d385(0x39a)][_0x2d385(0x4ff)](_0x11891f,'jsCritRateAsUser'),VisuMZ[_0x2d385(0x39a)]['JS'][key]&&(_0x1963c6=VisuMZ['BattleCore']['JS'][key][_0x2d385(0x90a)](this,this['subject'](),_0x59d207,this['item'](),_0x1963c6));}for(const _0x3ceaee of _0x59d207['traitObjects']()){if(!_0x3ceaee)continue;key=VisuMZ['BattleCore'][_0x2d385(0x4ff)](_0x3ceaee,_0x2d385(0x3c3)),VisuMZ['BattleCore']['JS'][key]&&(_0x1963c6=VisuMZ[_0x2d385(0x39a)]['JS'][key]['call'](this,this[_0x2d385(0x265)](),_0x59d207,this[_0x2d385(0x343)](),_0x1963c6));}return this[_0x2d385(0x113)](_0x59d207),_0x1963c6;},Game_Action[_0x588453(0x755)]['applyCritical']=function(_0x309a9f){const _0x204389=_0x588453;return _0x309a9f=VisuMZ[_0x204389(0x39a)][_0x204389(0x90d)]['Damage'][_0x204389(0x53c)][_0x204389(0x90a)](this,_0x309a9f),_0x309a9f=this[_0x204389(0x320)][_0x204389(0x37a)]*_0x309a9f+this[_0x204389(0x320)][_0x204389(0x7d1)],_0x309a9f;},VisuMZ[_0x588453(0x39a)][_0x588453(0x59b)]=Game_Action['prototype'][_0x588453(0x904)],Game_Action[_0x588453(0x755)][_0x588453(0x904)]=function(_0x222ed6){const _0x46aa2a=_0x588453;if(this[_0x46aa2a(0x327)]!==_0x46aa2a(0x880))return this[_0x46aa2a(0x1c7)](_0x222ed6);else return DataManager[_0x46aa2a(0xf8)](this['item']())==='MANUAL'?VisuMZ[_0x46aa2a(0x39a)][_0x46aa2a(0x59b)]['call'](this,_0x222ed6):this[_0x46aa2a(0x8ba)](_0x222ed6);},Game_Action[_0x588453(0x755)][_0x588453(0x2bb)]=function(_0x43c067){const _0x22895c=_0x588453;this[_0x22895c(0x327)]=_0x43c067;},Game_Action['prototype'][_0x588453(0x1c7)]=function(_0x41ee7c){const _0x4cb4a1=_0x588453,_0x5d53f5=this[_0x4cb4a1(0x343)](),_0x13884c=_0x5d53f5[_0x4cb4a1(0x4b5)][_0x4cb4a1(0x898)];_0x5d53f5[_0x4cb4a1(0x4b5)]['formula']=this[_0x4cb4a1(0x327)];let _0x624438=VisuMZ['BattleCore'][_0x4cb4a1(0x59b)][_0x4cb4a1(0x90a)](this,_0x41ee7c);return _0x5d53f5[_0x4cb4a1(0x4b5)][_0x4cb4a1(0x898)]=_0x13884c,_0x624438;},Game_Action[_0x588453(0x755)][_0x588453(0x716)]=function(){const _0x4e9560=_0x588453;if(this[_0x4e9560(0x343)]()[_0x4e9560(0x97d)][_0x4e9560(0x809)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5e0988=String(RegExp['$1'])[_0x4e9560(0x3c2)]()[_0x4e9560(0x4f2)]();return _0x5e0988;}return _0x4e9560(0x9ce);},Game_Action[_0x588453(0x755)][_0x588453(0x8ba)]=function(_0x4bc883){const _0x41bbeb=_0x588453,_0x45c2bb=DataManager[_0x41bbeb(0xf8)](this['item']()),_0x2a329c=VisuMZ[_0x41bbeb(0x8fb)][_0x45c2bb];try{return _0x2a329c[_0x41bbeb(0x6d1)]['call'](this,_0x4bc883);}catch(_0x38b802){if($gameTemp[_0x41bbeb(0x972)]())console[_0x41bbeb(0x6bf)](_0x38b802);return VisuMZ[_0x41bbeb(0x39a)]['Game_Action_evalDamageFormula'][_0x41bbeb(0x90a)](this);}},Game_Action[_0x588453(0x755)][_0x588453(0x498)]=function(_0x79279e,_0x934c57){const _0x2da9d=_0x588453;if(this['isCertainHit']())return _0x934c57;const _0x5667fc=this['subject'](),_0x5988f3=_0x79279e;let _0x334b86=[],_0x413b01=[];_0x334b86[_0x2da9d(0x2b9)](this[_0x2da9d(0x64a)][_0x2da9d(0xa8c)],this['_armorPenetration'][_0x2da9d(0x42b)]),_0x413b01[_0x2da9d(0x2b9)](this[_0x2da9d(0x64a)][_0x2da9d(0x6de)],this[_0x2da9d(0x64a)][_0x2da9d(0x1f2)]);const _0xb07403=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x1e0560=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x282388=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0xcaa0e0=this[_0x2da9d(0x7c2)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x334b86=_0x334b86[_0x2da9d(0x6e2)](_0x5988f3['traitObjects']()['map'](_0x1da8db=>_0x1da8db&&_0x1da8db[_0x2da9d(0x97d)]['match'](_0xb07403)?Number(RegExp['$1']):0x0)),_0x413b01=_0x413b01[_0x2da9d(0x6e2)](_0x5988f3[_0x2da9d(0x863)]()[_0x2da9d(0x89e)](_0xcef5fd=>_0xcef5fd&&_0xcef5fd[_0x2da9d(0x97d)]['match'](_0x1e0560)?Number(RegExp['$1'])/0x64:0x0)),_0x334b86=_0x334b86[_0x2da9d(0x6e2)](_0x5667fc[_0x2da9d(0x863)]()[_0x2da9d(0x89e)](_0x4fba69=>_0x4fba69&&_0x4fba69[_0x2da9d(0x97d)][_0x2da9d(0x809)](_0x282388)?Number(RegExp['$1']):0x0)),_0x413b01=_0x413b01[_0x2da9d(0x6e2)](_0x5667fc[_0x2da9d(0x863)]()['map'](_0x5aaecd=>_0x5aaecd&&_0x5aaecd[_0x2da9d(0x97d)][_0x2da9d(0x809)](_0xcaa0e0)?Number(RegExp['$1'])/0x64:0x0)),this[_0x2da9d(0x343)]()['note'][_0x2da9d(0x809)](_0x282388)&&_0x334b86[_0x2da9d(0x2b9)](Number(RegExp['$1'])),this[_0x2da9d(0x343)]()['note'][_0x2da9d(0x809)](_0xcaa0e0)&&_0x413b01['push'](Number(RegExp['$1'])),_0x934c57=_0x334b86[_0x2da9d(0x159)]((_0x261ffa,_0x1071d5)=>_0x261ffa-_0x1071d5,_0x934c57),_0x934c57>0x0&&(_0x934c57=_0x413b01[_0x2da9d(0x159)]((_0xa45308,_0x130e3b)=>_0xa45308*(0x1-_0x130e3b),_0x934c57)),_0x934c57;},VisuMZ[_0x588453(0x39a)][_0x588453(0x932)]=Game_Action[_0x588453(0x755)][_0x588453(0x1e9)],Game_Action[_0x588453(0x755)]['executeDamage']=function(_0x421bbf,_0x88ebc8){const _0x31e1cc=_0x588453;_0x88ebc8=_0x88ebc8*this[_0x31e1cc(0x320)][_0x31e1cc(0x868)],_0x88ebc8+=this[_0x31e1cc(0x320)][_0x31e1cc(0x5ff)]*(_0x88ebc8>=0x0?0x1:-0x1),_0x88ebc8=this[_0x31e1cc(0x7cd)](_0x31e1cc(0x250),_0x421bbf,_0x88ebc8,![]),_0x88ebc8=this['applyDamageCaps'](_0x88ebc8),_0x88ebc8>0x0?_0x88ebc8=Math['ceil'](_0x88ebc8):_0x88ebc8=Math[_0x31e1cc(0x10a)](_0x88ebc8),this[_0x31e1cc(0x5e6)]=_0x88ebc8,this[_0x31e1cc(0x5f7)]=this[_0x31e1cc(0x5f7)]||0x0,this[_0x31e1cc(0x5f7)]+=_0x88ebc8,VisuMZ[_0x31e1cc(0x39a)][_0x31e1cc(0x932)][_0x31e1cc(0x90a)](this,_0x421bbf,_0x88ebc8),this[_0x31e1cc(0x7cd)](_0x31e1cc(0x241),_0x421bbf,_0x88ebc8,!![]);},Game_Action[_0x588453(0x755)]['applyDamageCaps']=function(_0x33ccac){const _0x2f4c91=_0x588453;if(this[_0x2f4c91(0x19f)]())return _0x33ccac;return _0x33ccac=this[_0x2f4c91(0x75b)](_0x33ccac),_0x33ccac=this['applyHardDamageCap'](_0x33ccac),_0x33ccac;},Game_Action[_0x588453(0x755)]['isBypassDamageCap']=function(){const _0x778654=_0x588453,_0x455ec0=/<BYPASS DAMAGE CAP>/i;if(this[_0x778654(0x343)]()[_0x778654(0x97d)][_0x778654(0x809)](_0x455ec0))return!![];if(this[_0x778654(0x265)]()[_0x778654(0x863)]()[_0x778654(0x534)](_0x43bd3e=>_0x43bd3e&&_0x43bd3e[_0x778654(0x97d)][_0x778654(0x809)](_0x455ec0)))return!![];return!VisuMZ[_0x778654(0x39a)]['Settings']['Damage']['EnableDamageCap'];},Game_Action[_0x588453(0x755)][_0x588453(0x75b)]=function(_0x1bca9d){const _0x1f68a1=_0x588453;if(!VisuMZ['BattleCore'][_0x1f68a1(0x90d)][_0x1f68a1(0x69a)][_0x1f68a1(0xa39)])return _0x1bca9d;const _0x422d63=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x1f68a1(0x343)]()[_0x1f68a1(0x97d)][_0x1f68a1(0x809)](_0x422d63))return _0x1bca9d;if(this[_0x1f68a1(0x265)]()[_0x1f68a1(0x863)]()[_0x1f68a1(0x534)](_0x1795ff=>_0x1795ff&&_0x1795ff[_0x1f68a1(0x97d)]['match'](_0x422d63)))return _0x1bca9d;const _0x5b5ad0=_0x1bca9d<0x0?-0x1:0x1;_0x1bca9d=Math[_0x1f68a1(0x201)](_0x1bca9d);let _0x81ebf=this[_0x1f68a1(0x265)]()[_0x1f68a1(0x26c)]();this['item']()[_0x1f68a1(0x97d)][_0x1f68a1(0x809)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x81ebf+=Number(RegExp['$1'])/0x64);_0x81ebf=_0x81ebf[_0x1f68a1(0x25e)](0.01,0x1);const _0x3c66b7=this[_0x1f68a1(0x47d)](),_0x376b11=_0x81ebf*_0x3c66b7;if(_0x1bca9d>_0x376b11&&_0x3c66b7>_0x376b11){_0x1bca9d-=_0x376b11;const _0xff27dc=VisuMZ[_0x1f68a1(0x39a)]['Settings']['Damage'][_0x1f68a1(0x442)],_0x541e53=Math['max'](0x1-_0x1bca9d/((_0x3c66b7-_0x376b11)*_0xff27dc+_0x1bca9d),0.01);_0x1bca9d*=_0x541e53,_0x1bca9d+=_0x376b11;}return _0x1bca9d*_0x5b5ad0;},Game_Action['prototype'][_0x588453(0x47d)]=function(){const _0x1094f1=_0x588453;return this[_0x1094f1(0x343)]()[_0x1094f1(0x97d)][_0x1094f1(0x809)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x1094f1(0x265)]()[_0x1094f1(0xa90)]();},Game_Action[_0x588453(0x755)][_0x588453(0xa4c)]=function(_0x5a4881){const _0x2b6fde=_0x588453;let _0x33cf93=this[_0x2b6fde(0x47d)]();return _0x5a4881[_0x2b6fde(0x25e)](-_0x33cf93,_0x33cf93);},Game_Action[_0x588453(0x755)][_0x588453(0x777)]=function(){const _0x4bff0f=_0x588453;if(!this[_0x4bff0f(0x343)]())return![];if(!$gameParty[_0x4bff0f(0x48e)]())return![];return(this[_0x4bff0f(0x343)]()['note']||'')[_0x4bff0f(0x809)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x588453(0x755)][_0x588453(0xa58)]=function(_0x3376b8){const _0x220890=_0x588453;if(this[_0x220890(0x777)]()){let _0x3ae6d2=BattleManager[_0x220890(0x204)];_0x3376b8/=_0x3ae6d2['length'],this[_0x220890(0xa82)]()&&(_0x3376b8*=this[_0x220890(0x265)]()['attackTimesAdd']()+0x1),_0x3376b8=_0x3376b8>0x0?Math[_0x220890(0x935)](_0x3376b8):Math[_0x220890(0x10a)](_0x3376b8);}return _0x3376b8;},VisuMZ['BattleCore'][_0x588453(0x49c)]=Game_Action[_0x588453(0x755)][_0x588453(0x544)],Game_Action['prototype'][_0x588453(0x544)]=function(_0x43159b,_0x56cfaf){const _0xa136c1=_0x588453;let _0x123064=VisuMZ['BattleCore'][_0xa136c1(0x49c)][_0xa136c1(0x90a)](this,_0x43159b,_0x56cfaf);return this['disperseDamage'](_0x123064);},Game_Action[_0x588453(0x755)][_0x588453(0x8a1)]=function(_0x35c76e,_0x3cfb36){const _0x10fbcd=_0x588453;let _0x2b3f32=(_0x35c76e[_0x10fbcd(0x459)]*_0x3cfb36[_0x10fbcd(0x3aa)]+_0x3cfb36['value2'])*_0x35c76e[_0x10fbcd(0x404)];_0x2b3f32=this[_0x10fbcd(0xa58)](_0x2b3f32),this[_0x10fbcd(0x85a)]()&&(_0x2b3f32*=this['subject']()[_0x10fbcd(0xa83)]),_0x2b3f32=Math[_0x10fbcd(0x10a)](_0x2b3f32),_0x2b3f32!==0x0&&(_0x35c76e['gainHp'](_0x2b3f32),this[_0x10fbcd(0xadf)](_0x35c76e));},Game_Action[_0x588453(0x755)][_0x588453(0x2c0)]=function(_0xa34edc,_0x31cfe0){const _0x41312b=_0x588453;let _0x4a092d=(_0xa34edc[_0x41312b(0x803)]*_0x31cfe0[_0x41312b(0x3aa)]+_0x31cfe0['value2'])*_0xa34edc[_0x41312b(0x404)];_0x4a092d=this[_0x41312b(0xa58)](_0x4a092d),this['isItem']()&&(_0x4a092d*=this['subject']()['pha']),_0x4a092d=Math[_0x41312b(0x10a)](_0x4a092d),_0x4a092d!==0x0&&(_0xa34edc[_0x41312b(0xd9)](_0x4a092d),this[_0x41312b(0xadf)](_0xa34edc));},Game_Action[_0x588453(0x755)][_0x588453(0x359)]=function(_0x5e6ac2,_0x4c47c6){const _0x2f2146=_0x588453;let _0x5321b5=Math['floor'](_0x4c47c6['value1']);_0x5321b5=this['disperseDamage'](_0x5321b5),_0x5321b5!==0x0&&(_0x5e6ac2[_0x2f2146(0x5e3)](_0x5321b5),this[_0x2f2146(0xadf)](_0x5e6ac2));},VisuMZ[_0x588453(0x39a)][_0x588453(0x437)]=Game_Action[_0x588453(0x755)][_0x588453(0xaa8)],Game_Action[_0x588453(0x755)][_0x588453(0xaa8)]=function(_0x3beb25){const _0x35e511=_0x588453;if(_0x3beb25&&_0x3beb25[_0x35e511(0x4ad)]())_0x3beb25[_0x35e511(0x33b)]();this[_0x35e511(0x7cd)](_0x35e511(0x5dd),_0x3beb25,0x0,!![]),VisuMZ[_0x35e511(0x39a)][_0x35e511(0x437)]['call'](this,_0x3beb25),this[_0x35e511(0x7cd)]('PostApply%1JS',_0x3beb25,this[_0x35e511(0x5e6)]||0x0,!![]),this[_0x35e511(0x260)](_0x3beb25);},Game_Action[_0x588453(0x755)][_0x588453(0x7cd)]=function(_0x5940b4,_0x3bbaa0,_0x22397e,_0x4e6fd9){const _0x4ead58=_0x588453;if(this[_0x4ead58(0x5b2)]||this[_0x4ead58(0xa3a)])return;_0x22397e=_0x22397e||0x0;const _0x23c514=_0x22397e,_0x5206a3=VisuMZ[_0x4ead58(0x39a)][_0x4ead58(0x90d)][_0x4ead58(0x4b1)],_0x5e9e04=_0x5940b4['format']('');if(_0x5206a3[_0x5e9e04]){_0x22397e=_0x5206a3[_0x5e9e04][_0x4ead58(0x90a)](this,_0x22397e,_0x3bbaa0);if(_0x4e6fd9)_0x22397e=_0x23c514;}let _0x4588cf=VisuMZ[_0x4ead58(0x39a)]['createKeyJS'](this[_0x4ead58(0x343)](),_0x5940b4[_0x4ead58(0x4a9)](''));if(VisuMZ[_0x4ead58(0x39a)]['JS'][_0x4588cf]){_0x22397e=VisuMZ[_0x4ead58(0x39a)]['JS'][_0x4588cf][_0x4ead58(0x90a)](this,this['subject'](),_0x3bbaa0,this[_0x4ead58(0x343)](),_0x22397e);if(_0x4e6fd9)_0x22397e=_0x23c514;}for(const _0x231e0d of this[_0x4ead58(0x265)]()[_0x4ead58(0x863)]()){if(!_0x231e0d)continue;_0x4588cf=VisuMZ['BattleCore'][_0x4ead58(0x4ff)](_0x231e0d,_0x5940b4[_0x4ead58(0x4a9)](_0x4ead58(0x9ba)));if(VisuMZ[_0x4ead58(0x39a)]['JS'][_0x4588cf]){_0x22397e=VisuMZ[_0x4ead58(0x39a)]['JS'][_0x4588cf][_0x4ead58(0x90a)](this,this[_0x4ead58(0x265)](),_0x3bbaa0,_0x231e0d,_0x22397e);if(_0x4e6fd9)_0x22397e=_0x23c514;}}for(const _0x3c5c2c of _0x3bbaa0[_0x4ead58(0x863)]()){if(!_0x3c5c2c)continue;_0x4588cf=VisuMZ['BattleCore'][_0x4ead58(0x4ff)](_0x3c5c2c,_0x5940b4[_0x4ead58(0x4a9)]('AsTarget'));if(VisuMZ[_0x4ead58(0x39a)]['JS'][_0x4588cf]){_0x22397e=VisuMZ[_0x4ead58(0x39a)]['JS'][_0x4588cf][_0x4ead58(0x90a)](this,this['subject'](),_0x3bbaa0,_0x3c5c2c,_0x22397e);if(_0x4e6fd9)_0x22397e=_0x23c514;}}return _0x22397e;},Game_Action[_0x588453(0x755)][_0x588453(0x5cc)]=function(_0x498fac){const _0x3a892b=_0x588453,_0x3c0ef5=this[_0x3a892b(0x5f7)]||0x0,_0x2a5ef4=VisuMZ[_0x3a892b(0x39a)][_0x3a892b(0x90d)][_0x3a892b(0x4b1)],_0xb8b21d=_0x498fac[_0x3a892b(0x4a9)]('');_0x2a5ef4[_0xb8b21d]&&_0x2a5ef4[_0xb8b21d][_0x3a892b(0x90a)](this,_0x3c0ef5);let _0x14d731=VisuMZ['BattleCore'][_0x3a892b(0x4ff)](this['item'](),_0x498fac);VisuMZ[_0x3a892b(0x39a)]['JS'][_0x14d731]&&VisuMZ[_0x3a892b(0x39a)]['JS'][_0x14d731][_0x3a892b(0x90a)](this,this['subject'](),this[_0x3a892b(0x265)](),this[_0x3a892b(0x343)](),_0x3c0ef5);for(const _0x1ea774 of this[_0x3a892b(0x265)]()[_0x3a892b(0x863)]()){if(!_0x1ea774)continue;_0x14d731=VisuMZ[_0x3a892b(0x39a)][_0x3a892b(0x4ff)](_0x1ea774,_0x498fac),VisuMZ[_0x3a892b(0x39a)]['JS'][_0x14d731]&&VisuMZ['BattleCore']['JS'][_0x14d731][_0x3a892b(0x90a)](this,this[_0x3a892b(0x265)](),this[_0x3a892b(0x265)](),_0x1ea774,_0x3c0ef5);}},Game_Action[_0x588453(0x755)][_0x588453(0x5fa)]=function(){const _0x4f003d=_0x588453;return VisuMZ[_0x4f003d(0x39a)][_0x4f003d(0x90d)][_0x4f003d(0x4b1)][_0x4f003d(0x5ab)][_0x4f003d(0x90a)](this);},Game_Action[_0x588453(0x755)]['allowRandomSpeed']=function(){const _0x3096ba=_0x588453;return VisuMZ['BattleCore'][_0x3096ba(0x90d)][_0x3096ba(0x4b1)][_0x3096ba(0x7d9)];},Game_Action[_0x588453(0x755)][_0x588453(0x316)]=function(){const _0x5186d6=_0x588453;if(this[_0x5186d6(0x6fd)]===_0x5186d6(0x6ae))return![];if(this[_0x5186d6(0x6fd)]==='all\x20enemies')return![];if(!this['item']())return![];return this[_0x5186d6(0x343)]()[_0x5186d6(0x97d)][_0x5186d6(0x809)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x588453(0x5a7)]=function(){const _0x7b1e3d=_0x588453;if(this['_targetBattlerKey']===_0x7b1e3d(0x6ae))return![];if(this[_0x7b1e3d(0x6fd)]===_0x7b1e3d(0x726))return![];if(!this[_0x7b1e3d(0x1cc)]&&this[_0x7b1e3d(0x265)]()[_0x7b1e3d(0x5b4)]())return![];if(this[_0x7b1e3d(0x316)]())return!![];if(!this[_0x7b1e3d(0x343)]())return![];return typeof this[_0x7b1e3d(0x343)]()[_0x7b1e3d(0xae3)]===_0x7b1e3d(0x81f);},VisuMZ['BattleCore'][_0x588453(0x9b2)]=Game_Action[_0x588453(0x755)][_0x588453(0x92f)],Game_Action[_0x588453(0x755)]['isForOpponent']=function(){const _0x54ea4a=_0x588453;if(this['_targetBattlerKey']===_0x54ea4a(0x6ae))return![];if(this[_0x54ea4a(0x6fd)]===_0x54ea4a(0x726))return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x54ea4a(0xae2)]():VisuMZ[_0x54ea4a(0x39a)][_0x54ea4a(0x9b2)]['call'](this);},Game_Action['prototype']['isForOpponentBattleCore']=function(){const _0x5b7433=_0x588453,_0x563ff5=String(this[_0x5b7433(0x343)]()['scope']);if(_0x563ff5[_0x5b7433(0x809)](/ANY/i))return!![];return _0x563ff5[_0x5b7433(0x809)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x588453(0x39a)][_0x588453(0x959)]=Game_Action[_0x588453(0x755)][_0x588453(0x3cf)],Game_Action[_0x588453(0x755)]['isForFriend']=function(){const _0x24a7d0=_0x588453;if(this[_0x24a7d0(0x6fd)]===_0x24a7d0(0x6ae))return!![];if(this[_0x24a7d0(0x6fd)]==='all\x20enemies')return![];return this[_0x24a7d0(0x5a7)]()&&!this[_0x24a7d0(0x316)]()?this['isForFriendBattleCore']():VisuMZ['BattleCore'][_0x24a7d0(0x959)][_0x24a7d0(0x90a)](this);},Game_Action[_0x588453(0x755)]['isForFriendBattleCore']=function(){const _0xbac952=_0x588453,_0x3d7f8d=String(this[_0xbac952(0x343)]()[_0xbac952(0xae3)]);return _0x3d7f8d[_0xbac952(0x809)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x588453(0x755)][_0x588453(0x111)]=function(){const _0xfbee4f=_0x588453;if(this[_0xfbee4f(0x5a7)]()&&!this[_0xfbee4f(0x316)]()){const _0x560339=String(this['item']()[_0xfbee4f(0xae3)]);return _0x560339[_0xfbee4f(0x809)](/(?:ENEMY|FOE)/i)&&_0x560339['match'](/OR/i)&&_0x560339[_0xfbee4f(0x809)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x588453(0x755)]['isForAnyoneFocusFriends']=function(){const _0x468883=_0x588453;if(this['isForAnyone']()){const _0x55916d=String(this[_0x468883(0x343)]()[_0x468883(0xae3)]);if(_0x55916d['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x588453(0x755)][_0x588453(0x3b7)]=function(){const _0x1fdd68=_0x588453;if(this[_0x1fdd68(0x111)]()){const _0x7baaee=String(this['item']()['scope']);if(_0x7baaee[_0x1fdd68(0x809)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore'][_0x588453(0x3e4)]=Game_Action[_0x588453(0x755)][_0x588453(0x383)],Game_Action[_0x588453(0x755)][_0x588453(0x383)]=function(){const _0x23e1ae=_0x588453;if(this['_targetBattlerKey']===_0x23e1ae(0x6ae))return!![];return this[_0x23e1ae(0x5a7)]()&&!this[_0x23e1ae(0x316)]()?this['isForAliveFriendBattleCore']():VisuMZ[_0x23e1ae(0x39a)][_0x23e1ae(0x3e4)]['call'](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x189)]=Game_Action[_0x588453(0x755)][_0x588453(0x720)],Game_Action[_0x588453(0x755)][_0x588453(0x720)]=function(){const _0x80d06d=_0x588453;if(this[_0x80d06d(0x6fd)]===_0x80d06d(0x6ae))return VisuMZ['BattleCore']['Game_Action_isForDeadFriend'][_0x80d06d(0x90a)](this);return VisuMZ[_0x80d06d(0x39a)][_0x80d06d(0x189)][_0x80d06d(0x90a)](this);},Game_Action[_0x588453(0x755)][_0x588453(0x18a)]=function(){const _0xa3cbf7=_0x588453;if(this[_0xa3cbf7(0x111)]())return!![];return![];},Game_Action['prototype'][_0x588453(0x216)]=function(){const _0x5a66a4=_0x588453;return this[_0x5a66a4(0x343)]()&&this[_0x5a66a4(0x343)]()[_0x5a66a4(0x97d)][_0x5a66a4(0x809)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore']['Game_Action_isForOne']=Game_Action[_0x588453(0x755)][_0x588453(0x6bb)],Game_Action[_0x588453(0x755)][_0x588453(0x6bb)]=function(){const _0xffc0be=_0x588453;if(this[_0xffc0be(0x6fd)]===_0xffc0be(0x6ae))return![];if(this[_0xffc0be(0x6fd)]===_0xffc0be(0x726))return![];return this[_0xffc0be(0x5a7)]()&&!this['isCustomBattleScope']()?this['isForOneBattleCore']():VisuMZ[_0xffc0be(0x39a)]['Game_Action_isForOne'][_0xffc0be(0x90a)](this);},Game_Action['prototype'][_0x588453(0x48f)]=function(){if(this['isForAnyone']())return!![];return![];},VisuMZ['BattleCore'][_0x588453(0x358)]=Game_Action[_0x588453(0x755)]['isForRandom'],Game_Action[_0x588453(0x755)][_0x588453(0x9e8)]=function(){const _0x45be22=_0x588453;if(this['_targetBattlerKey']===_0x45be22(0x6ae))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];return this['isBattleCoreTargetScope']()&&!this[_0x45be22(0x316)]()?this['isForRandomBattleCore']():VisuMZ[_0x45be22(0x39a)]['Game_Action_isForRandom']['call'](this);},Game_Action['prototype'][_0x588453(0x2f3)]=function(){const _0x343741=_0x588453,_0x5c5f8c=String(this[_0x343741(0x343)]()[_0x343741(0xae3)]);return _0x5c5f8c[_0x343741(0x809)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x588453(0x39a)][_0x588453(0x585)]=Game_Action[_0x588453(0x755)][_0x588453(0xa76)],Game_Action[_0x588453(0x755)][_0x588453(0xa76)]=function(){const _0x2e18b1=_0x588453;if(this['_targetBattlerKey']==='all\x20actors')return!![];if(this[_0x2e18b1(0x6fd)]===_0x2e18b1(0x726))return!![];return VisuMZ['BattleCore'][_0x2e18b1(0x585)][_0x2e18b1(0x90a)](this);},Game_Action[_0x588453(0x755)][_0x588453(0x784)]=function(){const _0x4353c2=_0x588453;if(!this[_0x4353c2(0x343)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x4353c2(0x343)]()[_0x4353c2(0x97d)]||'')[_0x4353c2(0x809)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x588453(0x39a)][_0x588453(0x19e)]=Game_Action[_0x588453(0x755)]['testApply'],Game_Action[_0x588453(0x755)][_0x588453(0x13b)]=function(_0x1a5edb){const _0x3b492f=_0x588453;if(this[_0x3b492f(0x216)]()&&_0x1a5edb===this['subject']())return![];return VisuMZ[_0x3b492f(0x39a)]['Game_Action_testApply'][_0x3b492f(0x90a)](this,_0x1a5edb);},VisuMZ[_0x588453(0x39a)][_0x588453(0x156)]=Game_Action[_0x588453(0x755)][_0x588453(0x26f)],Game_Action['prototype'][_0x588453(0x26f)]=function(){const _0x32c7c3=_0x588453,_0x49c4c9=VisuMZ[_0x32c7c3(0x39a)]['Game_Action_itemTargetCandidates'][_0x32c7c3(0x90a)](this);if(this['isForNotUser']())_0x49c4c9[_0x32c7c3(0xaee)](this[_0x32c7c3(0x265)]());return _0x49c4c9;},VisuMZ[_0x588453(0x39a)]['Game_Action_needsSelection']=Game_Action[_0x588453(0x755)]['needsSelection'],Game_Action[_0x588453(0x755)]['needsSelection']=function(){const _0x301134=_0x588453;return this['isBattleCoreTargetScope']()&&!this[_0x301134(0x316)]()?this[_0x301134(0x96d)]():VisuMZ[_0x301134(0x39a)]['Game_Action_needsSelection'][_0x301134(0x90a)](this);},Game_Action[_0x588453(0x755)][_0x588453(0x96d)]=function(){const _0x10426e=_0x588453,_0x369761=String(this[_0x10426e(0x343)]()['scope']);if(_0x369761['match'](/RANDOM/i))return![];if(_0x369761['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x369761[_0x10426e(0x809)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x369761['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x369761[_0x10426e(0x809)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x10426e(0x39a)][_0x10426e(0x587)][_0x10426e(0x90a)](this);},VisuMZ['BattleCore']['Game_Action_makeTargets']=Game_Action[_0x588453(0x755)][_0x588453(0x467)],Game_Action[_0x588453(0x755)][_0x588453(0x467)]=function(){const _0x4a6ca8=_0x588453;let _0xb69a13=[];return this[_0x4a6ca8(0x5a7)]()?this[_0x4a6ca8(0x316)]()?_0xb69a13=this[_0x4a6ca8(0xac0)]():_0xb69a13=this[_0x4a6ca8(0x8d7)]():_0xb69a13=VisuMZ[_0x4a6ca8(0x39a)]['Game_Action_makeTargets'][_0x4a6ca8(0x90a)](this),_0xb69a13=this[_0x4a6ca8(0x311)](_0xb69a13),_0xb69a13;},Game_Action[_0x588453(0x755)][_0x588453(0x2f6)]=function(){const _0xebf432=_0x588453;return this[_0xebf432(0x265)]()[_0xebf432(0xa52)]()&&!this[_0xebf432(0x265)]()[_0xebf432(0xae4)]();},Game_Action[_0x588453(0x755)][_0x588453(0xac0)]=function(){const _0x35aeaa=_0x588453,_0x107450=VisuMZ[_0x35aeaa(0x39a)][_0x35aeaa(0x4ff)](this[_0x35aeaa(0x343)](),_0x35aeaa(0x77c));if(VisuMZ[_0x35aeaa(0x39a)]['JS'][_0x107450]){targets=VisuMZ['BattleCore'][_0x35aeaa(0x8fe)]['call'](this);const _0x34f32e=VisuMZ['BattleCore'][_0x35aeaa(0x4ff)](this['item'](),_0x35aeaa(0x77c));return targets=VisuMZ[_0x35aeaa(0x39a)]['JS'][_0x34f32e][_0x35aeaa(0x90a)](this,this['subject'](),targets),this[_0x35aeaa(0x9c2)](targets);}return this['makeTargetsBattleCore']();},Game_Action[_0x588453(0x755)][_0x588453(0x8d7)]=function(){const _0x1a5a05=_0x588453;let _0x230afa=[];const _0x145ad4=String(this[_0x1a5a05(0x343)]()['scope']);if(this[_0x1a5a05(0x3b7)]())return this[_0x1a5a05(0x2f6)]()?(_0x230afa=this[_0x1a5a05(0x4bb)](),this[_0x1a5a05(0x9c2)](_0x230afa)):(this[_0x1a5a05(0x6ca)]=-0x1,_0x230afa[_0x1a5a05(0x2b9)](...this[_0x1a5a05(0x607)]()),this['repeatTargets'](_0x230afa));if(this[_0x1a5a05(0x3c0)]()){if(this['isSubjectValidForAnyoneSelect']())return _0x230afa=this[_0x1a5a05(0x4bb)](),this[_0x1a5a05(0x9c2)](_0x230afa);else{if(Imported[_0x1a5a05(0x4a1)]){if(VisuMZ['BattleAI']['version']<1.19){let _0x2b8e46='';_0x2b8e46+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x2b8e46+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x2b8e46+=_0x1a5a05(0x812),alert(_0x2b8e46),SceneManager[_0x1a5a05(0x163)]();}}return this[_0x1a5a05(0x6ca)]=-0x1,_0x230afa[_0x1a5a05(0x2b9)](...this[_0x1a5a05(0x824)]()),this[_0x1a5a05(0x9c2)](_0x230afa);}}if(_0x145ad4['match'](/(\d+) RANDOM ANY/i)){let _0x53f4f4=Number(RegExp['$1']);while(_0x53f4f4--){const _0x1fd306=Math['randomInt'](0x2)===0x0?this[_0x1a5a05(0x6c0)]():this[_0x1a5a05(0x6f5)]();_0x230afa[_0x1a5a05(0x2b9)](_0x1fd306['trueRandomTarget']());}return this['repeatTargets'](_0x230afa);}if(_0x145ad4['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x53c1c3=Number(RegExp['$1']);while(_0x53c1c3--){_0x230afa['push'](this['opponentsUnit']()[_0x1a5a05(0xaf3)]());}return this[_0x1a5a05(0x9c2)](_0x230afa);}if(_0x145ad4[_0x1a5a05(0x809)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x5644a1=Number(RegExp['$1']);while(_0x5644a1--){_0x230afa[_0x1a5a05(0x2b9)](this[_0x1a5a05(0x6f5)]()[_0x1a5a05(0xaf3)]());}return this[_0x1a5a05(0x9c2)](_0x230afa);}if(_0x145ad4[_0x1a5a05(0x809)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x230afa['push'](...this['friendsUnit']()[_0x1a5a05(0x157)]()['filter'](_0x1c5e18=>_0x1c5e18!==this[_0x1a5a05(0x265)]())),this[_0x1a5a05(0x9c2)](_0x230afa);return VisuMZ[_0x1a5a05(0x39a)][_0x1a5a05(0x8fe)][_0x1a5a05(0x90a)](this);},Game_Action[_0x588453(0x755)][_0x588453(0x9d9)]=function(_0x3182de){const _0x57a51c=_0x588453,_0x4ebac1=[];for(let _0x479d44=0x0;_0x479d44<this[_0x57a51c(0xfe)]();_0x479d44++){_0x4ebac1['push'](_0x3182de[_0x57a51c(0xaf3)]());}return _0x4ebac1;},Game_Action[_0x588453(0x755)]['applyTargetFilters']=function(_0x17f5d2){const _0x1dd2e9=_0x588453;if(!this[_0x1dd2e9(0x343)]())return _0x17f5d2;const _0x5701de=this[_0x1dd2e9(0x343)]()[_0x1dd2e9(0x97d)];if(this['isForNotUser']()){this[_0x1dd2e9(0xa76)]()&&_0x17f5d2[_0x1dd2e9(0xaee)](this['subject']());if(_0x17f5d2['includes'](this[_0x1dd2e9(0x265)]())){const _0x4b1d32=this[_0x1dd2e9(0x6f5)]()[_0x1dd2e9(0x157)]()[_0x1dd2e9(0xaee)](this[_0x1dd2e9(0x265)]());if(_0x4b1d32[_0x1dd2e9(0x6e3)]>0x0){_0x4b1d32[_0x1dd2e9(0x882)]((_0x5d819f,_0x292574)=>_0x5d819f[_0x1dd2e9(0x2b2)]()-_0x292574[_0x1dd2e9(0x2b2)]());while(_0x17f5d2[_0x1dd2e9(0x51e)](this[_0x1dd2e9(0x265)]())){const _0x5e59b2=_0x17f5d2[_0x1dd2e9(0x512)](this['subject']());_0x17f5d2[_0x5e59b2]=_0x4b1d32[Math[_0x1dd2e9(0xaa2)](_0x4b1d32[_0x1dd2e9(0x6e3)])];}}else _0x17f5d2[_0x1dd2e9(0xaee)](this[_0x1dd2e9(0x265)]());}}return _0x17f5d2;},VisuMZ[_0x588453(0x39a)][_0x588453(0xabb)]=Game_Action[_0x588453(0x755)][_0x588453(0x564)],Game_Action['prototype'][_0x588453(0x564)]=function(_0x19e433,_0x206844){const _0x24fabb=_0x588453;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState'][_0x24fabb(0x90a)](this,_0x19e433,_0x206844);if(!_0x19e433['isImmortal']())return;for(const _0x143d92 of this['subject']()[_0x24fabb(0x1c8)]()){if(_0x143d92===_0x19e433[_0x24fabb(0xdc)]()){let _0xa3f3f7=_0x206844[_0x24fabb(0x3aa)];_0xa3f3f7*=_0x19e433[_0x24fabb(0x1a4)](_0x143d92),_0xa3f3f7*=this[_0x24fabb(0x265)]()['attackStatesRate'](_0x143d92),_0xa3f3f7*=this[_0x24fabb(0x231)](_0x19e433),Math['random']()<_0xa3f3f7&&(_0x19e433['_deathStateApplied']=!![],this[_0x24fabb(0xadf)](_0x19e433));}}},VisuMZ[_0x588453(0x39a)][_0x588453(0x524)]=Game_Action[_0x588453(0x755)][_0x588453(0x35a)],Game_Action[_0x588453(0x755)][_0x588453(0x35a)]=function(_0x2e49e2,_0x3704b5){const _0x34c362=_0x588453;VisuMZ['BattleCore'][_0x34c362(0x524)][_0x34c362(0x90a)](this,_0x2e49e2,_0x3704b5);if(!_0x2e49e2[_0x34c362(0x9ea)]())return;if(_0x3704b5[_0x34c362(0x7b8)]!==_0x2e49e2[_0x34c362(0xdc)]())return;let _0x49e3d4=_0x3704b5[_0x34c362(0x3aa)];!this[_0x34c362(0x672)]()&&(_0x49e3d4*=_0x2e49e2[_0x34c362(0x1a4)](_0x3704b5[_0x34c362(0x7b8)]),_0x49e3d4*=this[_0x34c362(0x231)](_0x2e49e2)),Math[_0x34c362(0x697)]()<_0x49e3d4&&(_0x2e49e2[_0x34c362(0x73d)]=!![],this['makeSuccess'](_0x2e49e2));},VisuMZ['BattleCore'][_0x588453(0x34b)]=Game_Action[_0x588453(0x755)]['applyGlobal'],Game_Action[_0x588453(0x755)][_0x588453(0x47a)]=function(){const _0x4fe583=_0x588453;VisuMZ[_0x4fe583(0x39a)][_0x4fe583(0x34b)][_0x4fe583(0x90a)](this),this[_0x4fe583(0x9a5)](),this[_0x4fe583(0x438)]();},Game_Action[_0x588453(0x755)][_0x588453(0x9a5)]=function(){const _0x2674e3=_0x588453;if(!SceneManager[_0x2674e3(0x8b8)]())return;const _0xe0fff9=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x47f162=this[_0x2674e3(0x343)]()[_0x2674e3(0x97d)][_0x2674e3(0x809)](_0xe0fff9);if(_0x47f162)for(const _0xe854c3 of _0x47f162){if(!_0xe854c3)continue;_0xe854c3[_0x2674e3(0x809)](_0xe0fff9);const _0x47c5fd=String(RegExp['$1'])[_0x2674e3(0x88c)](',')[_0x2674e3(0x89e)](_0x144a8a=>String(_0x144a8a)[_0x2674e3(0x4f2)]()),_0x4ecf71=_0x47c5fd[_0x2674e3(0x89e)](_0x2f871e=>DataManager[_0x2674e3(0x8b6)](_0x2f871e));for(const _0x58fa95 of _0x4ecf71){const _0x14b587=$dataCommonEvents[_0x58fa95];_0x14b587&&$gameTemp[_0x2674e3(0x622)](_0x58fa95);}}},DataManager[_0x588453(0x8b6)]=function(_0x2aee05){const _0x1c1d27=_0x588453;_0x2aee05=_0x2aee05[_0x1c1d27(0x3c2)]()[_0x1c1d27(0x4f2)](),this[_0x1c1d27(0x6a7)]=this['_commonEventIDs']||{};if(this[_0x1c1d27(0x6a7)][_0x2aee05])return this[_0x1c1d27(0x6a7)][_0x2aee05];for(const _0x38c9da of $dataCommonEvents){if(!_0x38c9da)continue;let _0xdc7b24=_0x38c9da[_0x1c1d27(0x4cf)];_0xdc7b24=_0xdc7b24[_0x1c1d27(0x582)](/\x1I\[(\d+)\]/gi,''),_0xdc7b24=_0xdc7b24[_0x1c1d27(0x582)](/\\I\[(\d+)\]/gi,''),this[_0x1c1d27(0x6a7)][_0xdc7b24[_0x1c1d27(0x3c2)]()['trim']()]=_0x38c9da['id'];}return this[_0x1c1d27(0x6a7)][_0x2aee05]||0x0;},Game_Action['prototype'][_0x588453(0x438)]=function(){const _0xf5fe=_0x588453;if(!SceneManager[_0xf5fe(0x8b8)]())return;const _0x50efcb=VisuMZ['BattleCore'][_0xf5fe(0x90d)][_0xf5fe(0x4b1)];_0x50efcb[_0xf5fe(0x569)]&&$gameSwitches[_0xf5fe(0x466)](_0x50efcb[_0xf5fe(0x569)],![]),_0x50efcb['SwitchMissEvade']&&$gameSwitches[_0xf5fe(0x466)](_0x50efcb['SwitchMissEvade'],![]),_0x50efcb[_0xf5fe(0x7c0)]&&$gameVariables[_0xf5fe(0x466)](_0x50efcb[_0xf5fe(0x7c0)],0x0),_0x50efcb['VariableHeal']&&$gameVariables[_0xf5fe(0x466)](_0x50efcb['VariableHeal'],0x0);},Game_Action[_0x588453(0x755)]['applyResultSwitches']=function(_0x631b33){const _0x4988b4=_0x588453;if(!SceneManager[_0x4988b4(0x8b8)]())return;if(!_0x631b33)return;const _0x1dbe69=_0x631b33['result'](),_0x35e79e=VisuMZ[_0x4988b4(0x39a)][_0x4988b4(0x90d)][_0x4988b4(0x4b1)];_0x35e79e[_0x4988b4(0x569)]&&_0x1dbe69[_0x4988b4(0x160)]&&$gameSwitches[_0x4988b4(0x466)](_0x35e79e['SwitchCritical'],!![]);_0x35e79e[_0x4988b4(0x725)]&&(_0x1dbe69[_0x4988b4(0x924)]||_0x1dbe69[_0x4988b4(0x257)])&&$gameSwitches[_0x4988b4(0x466)](_0x35e79e[_0x4988b4(0x725)],!![]);if(_0x35e79e[_0x4988b4(0x7c0)]){let _0x59916e=$gameVariables[_0x4988b4(0xab9)](_0x35e79e[_0x4988b4(0x7c0)]);_0x1dbe69[_0x4988b4(0x7de)]>0x0&&(_0x59916e+=Math[_0x4988b4(0x201)](_0x1dbe69['hpDamage'])),$gameVariables[_0x4988b4(0x466)](_0x35e79e[_0x4988b4(0x7c0)],_0x59916e);}if(_0x35e79e[_0x4988b4(0x2d0)]){let _0x53588d=$gameVariables[_0x4988b4(0xab9)](_0x35e79e[_0x4988b4(0x2d0)]);_0x1dbe69['hpDamage']<0x0&&(_0x53588d+=Math[_0x4988b4(0x201)](_0x1dbe69[_0x4988b4(0x7de)])),$gameVariables['setValue'](_0x35e79e[_0x4988b4(0x2d0)],_0x53588d);}},VisuMZ[_0x588453(0x39a)][_0x588453(0x600)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x588453(0x39a)][_0x588453(0x96a)]=Game_Action[_0x588453(0x755)][_0x588453(0x364)],Game_Action['prototype'][_0x588453(0x364)]=function(_0x424042,_0x54be61){const _0x3f53a9=_0x588453;VisuMZ[_0x3f53a9(0x39a)][_0x3f53a9(0x96a)]['call'](this,_0x424042,_0x54be61);!this[_0x3f53a9(0x56b)]()&&_0x424042&&_0x424042['result']()[_0x3f53a9(0x7de)]>0x0&&this[_0x3f53a9(0x849)]('HP',_0x424042,_0x424042['result']()['hpDamage']);if(_0x424042){this[_0x3f53a9(0x7a6)]=this['_executeHpDamage']||{};const _0x3a578a=_0x424042[_0x3f53a9(0x42e)]();this[_0x3f53a9(0x7a6)][_0x3a578a]=_0x54be61;}},Game_Action['prototype'][_0x588453(0x397)]=function(_0x1f1853){const _0x41cd1a=_0x588453;this[_0x41cd1a(0x7a6)]=this[_0x41cd1a(0x7a6)]||{};const _0x50f547=_0x1f1853[_0x41cd1a(0x42e)]();return this[_0x41cd1a(0x7a6)][_0x50f547]||0x0;},VisuMZ[_0x588453(0x39a)][_0x588453(0x9ff)]=Game_Action[_0x588453(0x755)][_0x588453(0x829)],Game_Action[_0x588453(0x755)][_0x588453(0x829)]=function(_0x30e4e6,_0x3016de){const _0xfa5d06=_0x588453;VisuMZ[_0xfa5d06(0x39a)]['Game_Action_executeMpDamage'][_0xfa5d06(0x90a)](this,_0x30e4e6,_0x3016de),!this[_0xfa5d06(0x56b)]()&&_0x30e4e6&&_0x30e4e6[_0xfa5d06(0x56d)]()['mpDamage']>0x0&&this['performLifeSteal']('MP',_0x30e4e6,_0x30e4e6[_0xfa5d06(0x56d)]()[_0xfa5d06(0x4e0)]);},Game_Action[_0x588453(0x755)][_0x588453(0x849)]=function(_0x36fa1b,_0x2c3013,_0x2c86c4){const _0x37fbfe=_0x588453;_0x36fa1b=_0x36fa1b[_0x37fbfe(0x3c2)]()[_0x37fbfe(0x4f2)]();const _0x1d73c4=this[_0x37fbfe(0xaa7)](_0x36fa1b,_0x2c3013);if(_0x1d73c4<=0x0)return;const _0x247280=Math[_0x37fbfe(0x422)](_0x2c86c4*_0x1d73c4);if(_0x247280<=0x0)return;let _0x512e11=this[_0x37fbfe(0x265)]();if(this['_reflectionTarget'])_0x512e11=this[_0x37fbfe(0x405)];const _0xf76a33=_0x2c3013[_0x37fbfe(0x5db)](_0x36fa1b)?-0x1:0x1;if(_0x36fa1b==='HP')_0x512e11['gainHp'](_0xf76a33*_0x247280);if(_0x36fa1b==='MP')_0x512e11[_0x37fbfe(0xd9)](_0xf76a33*_0x247280);},Game_Action[_0x588453(0x755)][_0x588453(0xaa7)]=function(_0x47e4f6,_0x3d4fde){const _0x5d9abd=_0x588453;if(this[_0x5d9abd(0x262)](_0x47e4f6))return 0x0;if(this[_0x5d9abd(0x265)]()[_0x5d9abd(0x10f)](_0x47e4f6))return 0x0;if(_0x3d4fde['isGuardLifeSteal'](_0x47e4f6))return 0x0;let _0x568198=0x0;return _0x568198+=this[_0x5d9abd(0x602)](_0x47e4f6),_0x568198+=this[_0x5d9abd(0x265)]()[_0x5d9abd(0xaa7)](_0x47e4f6,this[_0x5d9abd(0x343)]()[_0x5d9abd(0x873)]),_0x568198['clamp'](0x0,0x1);},Game_Action['prototype'][_0x588453(0x262)]=function(_0x5bb8a5){const _0x25deec=_0x588453;_0x5bb8a5=_0x5bb8a5[_0x25deec(0x3c2)]()[_0x25deec(0x4f2)]();const _0xc20837=VisuMZ['BattleCore']['LifeStealRegExp'],_0x18a1aa=this[_0x25deec(0x343)]()[_0x25deec(0x97d)]||'';if(_0x18a1aa['match'](_0xc20837[_0x25deec(0x46a)]))return!![];if(_0x5bb8a5==='HP'&&_0x18a1aa[_0x25deec(0x809)](_0xc20837[_0x25deec(0x5d1)]))return!![];if(_0x5bb8a5==='MP'&&_0x18a1aa[_0x25deec(0x809)](_0xc20837['cancelMpLifeSteal']))return!![];return![];},Game_Action[_0x588453(0x755)][_0x588453(0x602)]=function(_0x4a1f1d){const _0xd62348=_0x588453,_0x3209b7=VisuMZ[_0xd62348(0x39a)][_0xd62348(0x600)],_0x441cf6=this[_0xd62348(0x343)]()[_0xd62348(0x97d)]||'';_0x4a1f1d=_0x4a1f1d[_0xd62348(0x3c2)]()[_0xd62348(0x4f2)]();const _0x3b2229=_0x441cf6[_0xd62348(0x809)](_0x3209b7['lifeSteaItem']);if(_0x3b2229)for(const _0x1169bb of _0x3b2229){_0x1169bb[_0xd62348(0x809)](_0x3209b7[_0xd62348(0x2b3)]);const _0x1c3a49=String(RegExp['$1'])['toUpperCase']()[_0xd62348(0x4f2)](),_0x419cb0=Number(RegExp['$2'])*0.01;if(_0x1c3a49!==_0x4a1f1d)continue;return _0x419cb0;}return 0x0;},Game_BattlerBase['prototype'][_0x588453(0xaa7)]=function(_0x3eae9d,_0x5763e3){const _0x2fff61=_0x588453,_0x2a9df4=VisuMZ[_0x2fff61(0x39a)][_0x2fff61(0x600)];let _0x3614ce=0x0;_0x3eae9d=_0x3eae9d['toUpperCase']()[_0x2fff61(0x4f2)]();for(const _0x446b75 of this[_0x2fff61(0x863)]()){if(!_0x446b75)continue;const _0x4ba72e=_0x446b75['note']||'',_0x21fcb7=_0x4ba72e[_0x2fff61(0x809)](_0x2a9df4[_0x2fff61(0x5f9)]);if(_0x21fcb7)for(const _0x15f201 of _0x21fcb7){_0x15f201[_0x2fff61(0x809)](_0x2a9df4[_0x2fff61(0x5f9)]);const _0x3f04ff=String(RegExp['$1'])['toUpperCase']()[_0x2fff61(0x4f2)](),_0x169ee9=String(RegExp['$2']),_0x256a7e=Number(RegExp['$3'])*0.01;if(_0x3f04ff!==_0x3eae9d)continue;if(_0x5763e3===Game_Action[_0x2fff61(0x120)]&&_0x169ee9[_0x2fff61(0x809)](/CERTAIN/i))_0x3614ce+=_0x256a7e;else{if(_0x5763e3===Game_Action['HITTYPE_PHYSICAL']&&_0x169ee9[_0x2fff61(0x809)](/PHYS/i))_0x3614ce+=_0x256a7e;else _0x5763e3===Game_Action[_0x2fff61(0x4b0)]&&_0x169ee9[_0x2fff61(0x809)](/MAGIC/i)&&(_0x3614ce+=_0x256a7e);}}}return _0x3614ce;},Game_BattlerBase[_0x588453(0x755)]['isDisarmLifeSteal']=function(_0x221360){const _0x426277=_0x588453;_0x221360=_0x221360[_0x426277(0x3c2)]()[_0x426277(0x4f2)]();const _0x2b7844=VisuMZ[_0x426277(0x39a)][_0x426277(0x600)];for(const _0x141c24 of this[_0x426277(0x863)]()){if(!_0x141c24)continue;const _0x4110b7=_0x141c24['note']||'';if(_0x4110b7['match'](_0x2b7844[_0x426277(0x5ad)]))return!![];if(_0x221360==='HP'&&_0x4110b7[_0x426277(0x809)](_0x2b7844[_0x426277(0x5e7)]))return!![];if(_0x221360==='MP'&&_0x4110b7[_0x426277(0x809)](_0x2b7844[_0x426277(0x951)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x588453(0x5db)]=function(_0x739ac5){const _0x10605d=_0x588453;_0x739ac5=_0x739ac5[_0x10605d(0x3c2)]()[_0x10605d(0x4f2)]();const _0x1de227=VisuMZ[_0x10605d(0x39a)]['LifeStealRegExp'];for(const _0x54f722 of this[_0x10605d(0x863)]()){if(!_0x54f722)continue;const _0x2c4095=_0x54f722[_0x10605d(0x97d)]||'';if(_0x2c4095[_0x10605d(0x809)](_0x1de227[_0x10605d(0x2a7)]))return!![];if(_0x739ac5==='HP'&&_0x2c4095[_0x10605d(0x809)](_0x1de227[_0x10605d(0x5d2)]))return!![];if(_0x739ac5==='MP'&&_0x2c4095['match'](_0x1de227[_0x10605d(0xc9)]))return!![];}return![];},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x86d)]=function(_0x29e19a){const _0x1bbea2=_0x588453;_0x29e19a=_0x29e19a[_0x1bbea2(0x3c2)]()[_0x1bbea2(0x4f2)]();const _0x29db33=VisuMZ[_0x1bbea2(0x39a)][_0x1bbea2(0x600)];for(const _0x383ffb of this[_0x1bbea2(0x863)]()){if(!_0x383ffb)continue;const _0x25fbdf=_0x383ffb[_0x1bbea2(0x97d)]||'';if(_0x25fbdf['match'](_0x29db33[_0x1bbea2(0x902)]))return!![];if(_0x29e19a==='HP'&&_0x25fbdf[_0x1bbea2(0x809)](_0x29db33[_0x1bbea2(0x218)]))return!![];if(_0x29e19a==='MP'&&_0x25fbdf[_0x1bbea2(0x809)](_0x29db33[_0x1bbea2(0x1e0)]))return!![];}return![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x7ff)]=Game_BattlerBase[_0x588453(0x755)]['initMembers'],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x423)]=function(){const _0xf8740e=_0x588453;VisuMZ['BattleCore']['Game_BattlerBase_initMembers'][_0xf8740e(0x90a)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x588453(0x755)]['initMembersBattleCore']=function(){const _0x41e64d=_0x588453;this[_0x41e64d(0x409)]=![];},VisuMZ['BattleCore'][_0x588453(0x808)]=Game_BattlerBase[_0x588453(0x755)]['refresh'],Game_BattlerBase['prototype'][_0x588453(0x54e)]=function(){const _0x28a73e=_0x588453;this[_0x28a73e(0x7c6)]={},VisuMZ['BattleCore'][_0x28a73e(0x808)][_0x28a73e(0x90a)](this);},Game_BattlerBase['prototype'][_0x588453(0xa1c)]=function(_0x52f8c5){const _0x227425=_0x588453;return this[_0x227425(0x7c6)]=this['_cache']||{},this[_0x227425(0x7c6)][_0x52f8c5]!==undefined;},Game_BattlerBase[_0x588453(0x755)]['hardDamageCap']=function(){const _0x4644d9=_0x588453;if(this[_0x4644d9(0x7c6)]['hardDamageCap']!==undefined)return this[_0x4644d9(0x7c6)]['hardDamageCap'];const _0x32bd89=/<DAMAGE CAP:[ ](\d+)>/i,_0x15ae0b=this[_0x4644d9(0x863)]()[_0x4644d9(0x89e)](_0x47d7ec=>_0x47d7ec&&_0x47d7ec[_0x4644d9(0x97d)][_0x4644d9(0x809)](_0x32bd89)?Number(RegExp['$1']):0x0);let _0x4fd7b6=_0x15ae0b[_0x4644d9(0x6e3)]>0x0?Math['max'](..._0x15ae0b):0x0;if(_0x4fd7b6<=0x0)_0x4fd7b6=VisuMZ['BattleCore'][_0x4644d9(0x90d)][_0x4644d9(0x69a)][_0x4644d9(0x751)];return this[_0x4644d9(0x7c6)][_0x4644d9(0xa90)]=_0x4fd7b6,this[_0x4644d9(0x7c6)][_0x4644d9(0xa90)];},Game_BattlerBase[_0x588453(0x755)]['softDamageCapRate']=function(){const _0x17b1e1=_0x588453;if(this[_0x17b1e1(0x7c6)][_0x17b1e1(0x1fd)]!==undefined)return this['_cache'][_0x17b1e1(0x1fd)];let _0x715022=VisuMZ[_0x17b1e1(0x39a)][_0x17b1e1(0x90d)][_0x17b1e1(0x69a)][_0x17b1e1(0x98d)];const _0x3fc845=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x3787af=this['traitObjects']()[_0x17b1e1(0x89e)](_0x52b533=>_0x52b533&&_0x52b533[_0x17b1e1(0x97d)][_0x17b1e1(0x809)](_0x3fc845)?Number(RegExp['$1'])/0x64:0x0);return _0x715022=_0x3787af[_0x17b1e1(0x159)]((_0x1081a6,_0x5387cd)=>_0x1081a6+_0x5387cd,_0x715022),this[_0x17b1e1(0x7c6)][_0x17b1e1(0x1fd)]=_0x715022,this['_cache'][_0x17b1e1(0x1fd)][_0x17b1e1(0x25e)](0.01,0x1);},VisuMZ['BattleCore']['Game_BattlerBase_die']=Game_BattlerBase[_0x588453(0x755)][_0x588453(0x93c)],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x93c)]=function(){const _0x5a2cee=_0x588453;VisuMZ[_0x5a2cee(0x39a)]['Game_BattlerBase_die'][_0x5a2cee(0x90a)](this),SceneManager[_0x5a2cee(0x8b8)]()&&(this[_0x5a2cee(0x573)]('dead'),this[_0x5a2cee(0xac2)]=undefined);},Game_BattlerBase[_0x588453(0x755)][_0x588453(0xabe)]=function(){const _0x5c0d3a=_0x588453;if(!SceneManager[_0x5c0d3a(0x8b8)]())return null;if(!SceneManager[_0x5c0d3a(0x39b)][_0x5c0d3a(0x9cf)])return null;return SceneManager[_0x5c0d3a(0x39b)]['_spriteset'][_0x5c0d3a(0x40f)](this);},Game_BattlerBase[_0x588453(0x755)]['svBattlerAnchorX']=function(){const _0x41f3c4=_0x588453;return VisuMZ['BattleCore'][_0x41f3c4(0x90d)]['Actor']['AnchorX'];},Game_BattlerBase[_0x588453(0x755)][_0x588453(0xa74)]=function(){const _0xebe539=_0x588453;return VisuMZ[_0xebe539(0x39a)][_0xebe539(0x90d)]['Actor']['AnchorY'];},Game_BattlerBase[_0x588453(0x755)]['svBattlerShadowVisible']=function(){const _0xed15d4=_0x588453;return this[_0xed15d4(0xa52)]&&this[_0xed15d4(0xa52)]()?VisuMZ[_0xed15d4(0x39a)][_0xed15d4(0x90d)]['Actor'][_0xed15d4(0x9d5)]:VisuMZ[_0xed15d4(0x39a)][_0xed15d4(0x90d)][_0xed15d4(0x732)][_0xed15d4(0x9d5)];},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x1b8)]=function(){return!![];},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x23b)]=function(){return 0x0;},Game_BattlerBase[_0x588453(0x755)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x588453(0xa36)]=function(_0xbaa514){const _0x3d1780=_0x588453;if(!_0xbaa514)return 0x0;let _0x1f1373=0x0;const _0x58b936=_0xbaa514[_0x3d1780(0x97d)];return _0x58b936[_0x3d1780(0x809)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x1f1373+=Number(RegExp['$1'])),_0x58b936[_0x3d1780(0x809)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1f1373+=Number(RegExp['$1'])),_0x1f1373;},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x6db)]=function(_0x210236){const _0x724342=_0x588453;if(!_0x210236)return 0x0;let _0x21aa2b=0x0;const _0x44650d=_0x210236['note'];return _0x44650d['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x21aa2b+=Number(RegExp['$1'])),_0x44650d[_0x724342(0x809)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x21aa2b+=Number(RegExp['$2'])),_0x21aa2b;},VisuMZ[_0x588453(0x39a)][_0x588453(0x7aa)]=Game_BattlerBase['prototype']['isStateResist'],Game_BattlerBase['prototype'][_0x588453(0x219)]=function(_0x1cf67c){const _0x1a3d6e=_0x588453;if(_0x1cf67c===this[_0x1a3d6e(0xdc)]()&&this[_0x1a3d6e(0x9ea)]())return!![];return VisuMZ[_0x1a3d6e(0x39a)][_0x1a3d6e(0x7aa)][_0x1a3d6e(0x90a)](this,_0x1cf67c);},Game_BattlerBase['prototype']['isImmortal']=function(){const _0x22c703=_0x588453;return this[_0x22c703(0x409)];},Game_BattlerBase[_0x588453(0x755)][_0x588453(0xabc)]=function(_0x1174ef){const _0x867b00=_0x588453;_0x1174ef?this[_0x867b00(0x480)]():this[_0x867b00(0x1bf)]();},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x480)]=function(){const _0x2e8667=_0x588453;if(this[_0x2e8667(0x8c6)]())return;this[_0x2e8667(0x409)]=!![],this[_0x2e8667(0x73d)]=![];},Game_BattlerBase[_0x588453(0x755)]['removeImmortal']=function(){const _0x2ae2d6=_0x588453,_0xea0b6b=this[_0x2ae2d6(0x610)]();this['_immortal']=![],_0xea0b6b&&this[_0x2ae2d6(0x73d)]&&this[_0x2ae2d6(0x93c)](),this[_0x2ae2d6(0x73d)]=![],this['refresh'](),this['isDead']()&&_0xea0b6b&&(this[_0x2ae2d6(0x195)](),this[_0x2ae2d6(0x8bc)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0x945)]=Game_Action[_0x588453(0x755)][_0x588453(0x19d)],Game_Action[_0x588453(0x755)][_0x588453(0x19d)]=function(){const _0x2c47c0=_0x588453;return this['item']()?VisuMZ[_0x2c47c0(0x39a)][_0x2c47c0(0x945)][_0x2c47c0(0x90a)](this):0x0;},VisuMZ[_0x588453(0x39a)][_0x588453(0x7cc)]=Game_Action['prototype'][_0x588453(0x7e8)],Game_Action[_0x588453(0x755)][_0x588453(0x7e8)]=function(){const _0x5b008f=_0x588453;this[_0x5b008f(0x265)]()&&this[_0x5b008f(0x265)]()[_0x5b008f(0x2f5)]()?VisuMZ[_0x5b008f(0x39a)][_0x5b008f(0x7cc)]['call'](this):this[_0x5b008f(0x399)]();},VisuMZ['BattleCore'][_0x588453(0xa3c)]=Game_BattlerBase['prototype'][_0x588453(0x2f5)],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x2f5)]=function(){const _0x5cf2d7=_0x588453;if(!this[_0x5cf2d7(0xa10)]())return![];return VisuMZ[_0x5cf2d7(0x39a)][_0x5cf2d7(0xa3c)][_0x5cf2d7(0x90a)](this);},Game_BattlerBase[_0x588453(0x755)][_0x588453(0xa10)]=function(){const _0x46fa46=_0x588453;for(const _0x3059bc of this[_0x46fa46(0x863)]()){if(!_0x3059bc)continue;if(_0x3059bc['note']['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x7ee)]=Game_Action[_0x588453(0x755)][_0x588453(0x548)],Game_Action[_0x588453(0x755)]['setGuard']=function(){const _0x5d79b7=_0x588453;this['subject']()['canGuard']()&&VisuMZ['BattleCore'][_0x5d79b7(0x7ee)][_0x5d79b7(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x24e)]=Game_BattlerBase[_0x588453(0x755)]['canGuard'],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x71b)]=function(){const _0x1883bb=_0x588453;if(!this[_0x1883bb(0x595)]())return![];return VisuMZ[_0x1883bb(0x39a)][_0x1883bb(0x24e)]['call'](this);},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x595)]=function(){const _0xb3de3f=_0x588453;for(const _0x37c6be of this[_0xb3de3f(0x863)]()){if(!_0x37c6be)continue;if(_0x37c6be['note'][_0xb3de3f(0x809)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x588453(0x755)][_0x588453(0x35b)]=function(){const _0x4ec5a6=_0x588453;for(const _0x9ae397 of this[_0x4ec5a6(0x863)]()){if(!_0x9ae397)continue;if(_0x9ae397[_0x4ec5a6(0x97d)][_0x4ec5a6(0x809)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x2fc)]=Game_BattlerBase[_0x588453(0x755)][_0x588453(0x2ca)],Game_BattlerBase[_0x588453(0x755)][_0x588453(0x2ca)]=function(_0x4f4401){const _0x43009e=_0x588453;if(_0x4f4401&&_0x4f4401[_0x43009e(0x97d)][_0x43009e(0x809)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x73df08=this[_0x43009e(0x6f5)]()['aliveMembers']();if(_0x73df08[_0x43009e(0x6e3)]===0x1&&_0x73df08[0x0]===this)return![];}return VisuMZ[_0x43009e(0x39a)][_0x43009e(0x2fc)][_0x43009e(0x90a)](this,_0x4f4401);},Game_Battler[_0x588453(0x755)][_0x588453(0x211)]=function(){const _0x28470c=_0x588453;return VisuMZ[_0x28470c(0x39a)]['Settings'][_0x28470c(0x4b1)][_0x28470c(0x7d9)];},VisuMZ[_0x588453(0x39a)][_0x588453(0x22a)]=Game_Battler[_0x588453(0x755)][_0x588453(0xa2c)],Game_Battler[_0x588453(0x755)][_0x588453(0xa2c)]=function(){const _0x5e3f74=_0x588453;if(SceneManager[_0x5e3f74(0x8b8)]()){if(BattleManager[_0x5e3f74(0xa02)]()){}else{if($gameTroop[_0x5e3f74(0x24a)]()<=0x0)return;}}if(SceneManager[_0x5e3f74(0x8b8)]()&&BattleManager[_0x5e3f74(0xa02)]()&&this[_0x5e3f74(0x696)]===Graphics['frameCount'])return;this['_lastRegenFrameCount']=Graphics[_0x5e3f74(0x8a6)],SceneManager[_0x5e3f74(0x8b8)]()&&this[_0x5e3f74(0x2a4)](_0x5e3f74(0x290)),VisuMZ[_0x5e3f74(0x39a)]['Game_Battler_regenerateAll'][_0x5e3f74(0x90a)](this),SceneManager[_0x5e3f74(0x8b8)]()&&(this['regenerateAllBattleCore'](),this[_0x5e3f74(0x2a4)](_0x5e3f74(0x70e)));},Game_Battler['prototype'][_0x588453(0x1c6)]=function(){const _0x1d533c=_0x588453;if(SceneManager[_0x1d533c(0x8b8)]())for(const _0x12ef00 of this[_0x1d533c(0x863)]()){if(!_0x12ef00)continue;this[_0x1d533c(0xa7d)](_0x12ef00);}},Game_Battler[_0x588453(0x755)][_0x588453(0xa7d)]=function(_0x5bee1e){const _0x220c28=_0x588453;if(!Imported[_0x220c28(0xe0)])return;if(!SceneManager[_0x220c28(0x8b8)]())return;if(this[_0x220c28(0x8c6)]())return;if(this[_0x220c28(0x55d)]())return;if(_0x5bee1e[_0x220c28(0x97d)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x4aa4cc=Number(RegExp['$1']);$gameTemp[_0x220c28(0x6d2)]([this],_0x4aa4cc,![],![]);}},VisuMZ[_0x588453(0x39a)][_0x588453(0x38e)]=Game_Battler['prototype'][_0x588453(0x901)],Game_Battler[_0x588453(0x755)][_0x588453(0x901)]=function(){const _0x53b8ff=_0x588453;this['processBattleCoreJS'](_0x53b8ff(0x51a)),VisuMZ[_0x53b8ff(0x39a)][_0x53b8ff(0x38e)][_0x53b8ff(0x90a)](this),this[_0x53b8ff(0x2a4)]('PostStartTurnJS');},VisuMZ[_0x588453(0x39a)]['Game_Battler_onTurnEnd']=Game_Battler['prototype'][_0x588453(0xa98)],Game_Battler[_0x588453(0x755)]['onTurnEnd']=function(){const _0xa9d94=_0x588453;this['processBattleCoreJS'](_0xa9d94(0x147)),VisuMZ[_0xa9d94(0x39a)][_0xa9d94(0x247)][_0xa9d94(0x90a)](this),VisuMZ[_0xa9d94(0x39a)][_0xa9d94(0x90d)][_0xa9d94(0x4b1)][_0xa9d94(0x795)]&&this[_0xa9d94(0x82c)](),this['processBattleCoreJS'](_0xa9d94(0x7ef));},Game_Battler[_0x588453(0x755)]['processBattleCoreJS']=function(_0x189282){const _0x5e7674=_0x588453;if(this[_0x5e7674(0x5b2)]||this[_0x5e7674(0xa3a)])return;const _0x224bf7=VisuMZ['BattleCore']['Settings'][_0x5e7674(0x4b1)];if(_0x224bf7[_0x189282])_0x224bf7[_0x189282]['call'](this);for(const _0x144fb4 of this['traitObjects']()){if(!_0x144fb4)continue;key=VisuMZ[_0x5e7674(0x39a)][_0x5e7674(0x4ff)](_0x144fb4,_0x189282),VisuMZ[_0x5e7674(0x39a)]['JS'][key]&&VisuMZ[_0x5e7674(0x39a)]['JS'][key][_0x5e7674(0x90a)](this,this,this,_0x144fb4,0x0);}},Game_Battler[_0x588453(0x755)]['chantStyle']=function(){const _0x50d717=_0x588453;return VisuMZ[_0x50d717(0x39a)][_0x50d717(0x90d)]['Actor'][_0x50d717(0xa37)]||![];},Game_Battler[_0x588453(0x755)][_0x588453(0x412)]=function(){const _0x336b4f=_0x588453;if(this['isWaiting']()){if(this[_0x336b4f(0x50c)]()){if(this[_0x336b4f(0x6ee)][_0x336b4f(0x534)](_0x25ca98=>_0x25ca98['item']()&&_0x25ca98[_0x336b4f(0x199)]()))return!![];}else{if(this[_0x336b4f(0x6ee)][_0x336b4f(0x534)](_0x1902f6=>_0x1902f6[_0x336b4f(0x343)]()&&_0x1902f6['isMagicSkill']()))return!![];}}if(BattleManager['isTpb']()&&this['_tpbState']===_0x336b4f(0xa9a))return this[_0x336b4f(0x50c)]()?this[_0x336b4f(0x83c)]()&&this[_0x336b4f(0x83c)]()[_0x336b4f(0x343)]()&&this['currentAction']()[_0x336b4f(0x199)]():this[_0x336b4f(0x83c)]()&&this['currentAction']()[_0x336b4f(0x343)]()&&this[_0x336b4f(0x83c)]()[_0x336b4f(0x572)]();return![];},Game_Battler[_0x588453(0x755)][_0x588453(0x386)]=function(){const _0x15a5b5=_0x588453;if(BattleManager[_0x15a5b5(0xa02)]()&&this[_0x15a5b5(0xec)]==='casting')return this[_0x15a5b5(0x50c)]()?this[_0x15a5b5(0x83c)]()&&this['currentAction']()[_0x15a5b5(0x343)]()&&!this[_0x15a5b5(0x83c)]()[_0x15a5b5(0x199)]():this['currentAction']()&&this['currentAction']()[_0x15a5b5(0x343)]()&&!this['currentAction']()[_0x15a5b5(0x572)]();return![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x9f5)]=Game_Battler[_0x588453(0x755)][_0x588453(0x71d)],Game_Battler['prototype'][_0x588453(0x71d)]=function(){const _0x4d5742=_0x588453;VisuMZ[_0x4d5742(0x39a)]['Game_Battler_clearDamagePopup'][_0x4d5742(0x90a)](this),this['_damagePopupArray']=[];},Game_Battler[_0x588453(0x755)][_0x588453(0x6c1)]=function(){const _0x157875=_0x588453;if(!this[_0x157875(0x380)])this[_0x157875(0x71d)]();return this[_0x157875(0x380)][_0x157875(0x6e3)]>0x0;},Game_Battler[_0x588453(0x755)][_0x588453(0x245)]=function(){const _0x72301d=_0x588453;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x72301d(0x240)]())return;if(!this[_0x72301d(0x380)])this['clearDamagePopup']();this[_0x72301d(0x942)]();const _0x1eb176=this[_0x72301d(0xabe)]();if(_0x1eb176)_0x1eb176[_0x72301d(0x2eb)]();},Game_Battler['prototype'][_0x588453(0x942)]=function(){const _0x1ac346=_0x588453,_0x9b6d04=this[_0x1ac346(0x56d)]();if(_0x9b6d04[_0x1ac346(0x924)]||_0x9b6d04[_0x1ac346(0x257)]){const _0x56f899=JsonEx['makeDeepCopy'](_0x9b6d04);_0x56f899[_0x1ac346(0x6b0)]=![],_0x56f899[_0x1ac346(0x4e0)]=0x0,this[_0x1ac346(0x380)]['push'](_0x56f899);if(!_0x9b6d04[_0x1ac346(0x7de)]&&!_0x9b6d04[_0x1ac346(0x4e0)])return;}if(_0x9b6d04['hpAffected']){const _0x5d5545=JsonEx[_0x1ac346(0x2c3)](_0x9b6d04);_0x5d5545[_0x1ac346(0x924)]=![],_0x5d5545[_0x1ac346(0x257)]=![],_0x5d5545[_0x1ac346(0x4e0)]=0x0,this[_0x1ac346(0x380)][_0x1ac346(0x2b9)](_0x5d5545);}if(_0x9b6d04[_0x1ac346(0x4e0)]!==0x0){const _0x2b40e=JsonEx[_0x1ac346(0x2c3)](_0x9b6d04);_0x2b40e[_0x1ac346(0x924)]=![],_0x2b40e['evaded']=![],_0x2b40e[_0x1ac346(0x6b0)]=![],this[_0x1ac346(0x380)][_0x1ac346(0x2b9)](_0x2b40e);}},Game_Battler[_0x588453(0x755)]['getNextDamagePopup']=function(){const _0x635e4=_0x588453;if(!this[_0x635e4(0x380)])this['clearDamagePopup']();return VisuMZ[_0x635e4(0x39a)][_0x635e4(0x90d)][_0x635e4(0x69a)][_0x635e4(0x3f7)]?this[_0x635e4(0x380)][_0x635e4(0x41a)]():this[_0x635e4(0x380)][_0x635e4(0x9e2)]();},Game_Battler['prototype'][_0x588453(0xa62)]=function(_0x35dec7,_0x5c0e48){const _0x1a35a3=_0x588453;if(!SceneManager[_0x1a35a3(0x8b8)]())return;if(BattleManager[_0x1a35a3(0x240)]())return;if(!this[_0x1a35a3(0xabe)]())return;if(_0x35dec7[_0x1a35a3(0x6e3)]<=0x0)return;_0x5c0e48=_0x5c0e48||{},_0x5c0e48[_0x1a35a3(0x655)]=_0x5c0e48[_0x1a35a3(0x655)]||_0x1a35a3(0x65e),_0x5c0e48['flashColor']=_0x5c0e48[_0x1a35a3(0x76b)]||[0x0,0x0,0x0,0x0],_0x5c0e48[_0x1a35a3(0x45c)]=_0x5c0e48[_0x1a35a3(0x45c)]||0x0,this['battler']()[_0x1a35a3(0xa62)](_0x35dec7,_0x5c0e48);},Game_Battler[_0x588453(0x755)]['setupIconTextPopup']=function(_0x3b6207,_0x1f1850,_0x213165){const _0x347bac=_0x588453;if(!SceneManager[_0x347bac(0x8b8)]())return;if(BattleManager[_0x347bac(0x240)]())return;if(!this[_0x347bac(0xabe)]())return;if(_0x1f1850[_0x347bac(0x6e3)]<=0x0)return;_0x213165=_0x213165||{},_0x213165[_0x347bac(0x655)]=_0x213165[_0x347bac(0x655)]||_0x347bac(0x65e),_0x213165['flashColor']=_0x213165['flashColor']||[0x0,0x0,0x0,0x0],_0x213165[_0x347bac(0x45c)]=_0x213165['flashDuration']||0x0,this[_0x347bac(0xabe)]()[_0x347bac(0x969)](_0x3b6207,_0x1f1850,_0x213165);},Game_Battler[_0x588453(0x755)][_0x588453(0x341)]=function(){const _0x5a29c0=_0x588453;if(this[_0x5a29c0(0x55d)]())return![];if(this[_0x5a29c0(0x610)]()&&this[_0x5a29c0(0x8ef)]())return!![];if(this[_0x5a29c0(0x4ad)]()&&this[_0x5a29c0(0x1ea)]()){if(this[_0x5a29c0(0x8c6)]()&&this[_0x5a29c0(0x578)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x470)]=Game_Battler[_0x588453(0x755)][_0x588453(0x4d5)],Game_Battler[_0x588453(0x755)][_0x588453(0x4d5)]=function(){const _0x562355=_0x588453;VisuMZ[_0x562355(0x39a)][_0x562355(0x470)]['call'](this),this['clearFreezeMotion']();},Game_Battler[_0x588453(0x755)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype'][_0x588453(0xa77)]=function(){return![];},VisuMZ[_0x588453(0x39a)]['Game_Battler_onBattleStart']=Game_Battler[_0x588453(0x755)][_0x588453(0x3dd)],Game_Battler[_0x588453(0x755)][_0x588453(0x3dd)]=function(_0x3cd909){const _0x48b69=_0x588453;VisuMZ[_0x48b69(0x39a)][_0x48b69(0x321)][_0x48b69(0x90a)](this,_0x3cd909),this[_0x48b69(0x6a5)](_0x3cd909),this['clearDamagePopup']();},Game_Battler['prototype'][_0x588453(0x6a5)]=function(_0x49cbc2){const _0x4e113c=_0x588453;this['setBattlerFlip'](![]),this[_0x4e113c(0x9df)]=undefined,this[_0x4e113c(0x81a)]=undefined;},VisuMZ[_0x588453(0x39a)]['Game_Battler_onBattleEnd']=Game_Battler['prototype'][_0x588453(0x2d6)],Game_Battler['prototype']['onBattleEnd']=function(){const _0x555f0e=_0x588453;VisuMZ[_0x555f0e(0x39a)][_0x555f0e(0x2d8)]['call'](this),this[_0x555f0e(0x2e6)]();},Game_Battler[_0x588453(0x755)][_0x588453(0x2e6)]=function(){const _0x4c15a1=_0x588453;this['_forcedHomeX']=undefined,this[_0x4c15a1(0x81a)]=undefined;},VisuMZ[_0x588453(0x39a)][_0x588453(0x989)]=Game_Battler[_0x588453(0x755)][_0x588453(0x5ec)],Game_Battler['prototype'][_0x588453(0x5ec)]=function(_0x26a6cb){const _0x33debc=_0x588453;VisuMZ[_0x33debc(0x39a)][_0x33debc(0x989)]['call'](this,_0x26a6cb);if(!_0x26a6cb[_0x33debc(0x395)]()){const _0x5e16bc=this[_0x33debc(0xabe)]();_0x5e16bc&&_0x5e16bc[_0x33debc(0x7c5)]();}this[_0x33debc(0x856)](![]);},Game_Battler[_0x588453(0x755)][_0x588453(0x8b3)]=function(){const _0x108f46=_0x588453;this[_0x108f46(0xac2)]=undefined;const _0x423880=this['_flinched'];this[_0x108f46(0x593)]=![];if(BattleManager[_0x108f46(0x84e)]()&&this['isInputting']()){const _0x139e53=this[_0x108f46(0xabe)]();if(_0x139e53&&_0x423880)_0x139e53[_0x108f46(0x7c5)]();return;}const _0x357a90=this[_0x108f46(0xabe)]();if(_0x357a90)_0x357a90[_0x108f46(0x8e4)]();this[_0x108f46(0x856)](![]),this[_0x108f46(0x8bc)]();},Game_Battler['prototype']['performActionMotions']=function(_0x2b23e7){const _0x51ba85=_0x588453;if(_0x2b23e7['isAttack']())this['performAttack']();else{if(_0x2b23e7[_0x51ba85(0x395)]())this[_0x51ba85(0x573)](_0x51ba85(0x5e8));else{if(_0x2b23e7[_0x51ba85(0x199)]())this[_0x51ba85(0x573)]('spell');else{if(_0x2b23e7[_0x51ba85(0x8c8)]())[0x1,0x2,0x5,0x6]['includes'](_0x2b23e7[_0x51ba85(0x343)]()[_0x51ba85(0x4b5)][_0x51ba85(0xa5f)])?this[_0x51ba85(0x3cb)]():this[_0x51ba85(0x573)](_0x51ba85(0x33f));else _0x2b23e7[_0x51ba85(0x85a)]()&&this[_0x51ba85(0x573)](_0x51ba85(0x343));}}}},Game_Battler[_0x588453(0x755)][_0x588453(0xaed)]=function(){const _0x10cc95=_0x588453;return $dataSystem[_0x10cc95(0x5fc)][0x0];},Game_Battler['prototype']['getAttackWeaponAnimationId']=function(){const _0x465ace=_0x588453,_0x2a764e=this[_0x465ace(0xaed)]();return _0x2a764e?_0x2a764e[_0x465ace(0x65c)]:0x0;},Game_Battler[_0x588453(0x755)][_0x588453(0x691)]=function(_0x1ca03e){const _0x374f03=_0x588453;if(!$gameSystem['isSideView']())return;const _0x9a5e80=this[_0x374f03(0xabe)](),_0x2e0e74=_0x1ca03e['battler']();if(!_0x9a5e80||!_0x2e0e74)return;const _0x27efa3=_0x2e0e74[_0x374f03(0x494)],_0x26bc8a=_0x2e0e74['_baseY'];this[_0x374f03(0x2dc)](_0x27efa3,_0x26bc8a,0x0,![],_0x374f03(0x7f1),-0x1),_0x9a5e80[_0x374f03(0xa81)]();const _0x34c408=VisuMZ[_0x374f03(0x39a)]['Settings']['ActionSequence'];let _0x2615ee=(_0x2e0e74[_0x374f03(0x3ad)]+_0x9a5e80[_0x374f03(0x3ad)])/0x2;_0x2615ee*=this['isActor']()?0x1:-0x1;let _0x32c6aa=_0x34c408[_0x374f03(0x5e2)]*(this[_0x374f03(0xa52)]()?0x1:-0x1);_0x1ca03e[_0x374f03(0x8de)](_0x2615ee,_0x32c6aa,0x0,![],_0x374f03(0x7f1)),_0x2e0e74['updatePosition']();},Game_Battler[_0x588453(0x755)]['requestMotion']=function(_0x116c00){const _0xe3227c=_0x588453;if(SceneManager['isSceneBattle']()){const _0x2ad097=this[_0xe3227c(0xabe)]();_0x2ad097&&(_0x2ad097[_0xe3227c(0xa44)](_0x116c00),[_0xe3227c(0xaa0),_0xe3227c(0xaa4),_0xe3227c(0x3b1)]['includes'](_0x116c00)&&this[_0xe3227c(0x2d7)]());}this[_0xe3227c(0x745)]();},Game_Battler['prototype'][_0x588453(0x2d7)]=function(){},Game_Battler[_0x588453(0x755)][_0x588453(0x305)]=function(_0x11c07c){const _0x55b9f0=_0x588453;if(SceneManager[_0x55b9f0(0x8b8)]()){const _0x134904=this[_0x55b9f0(0xabe)]();if(_0x134904)_0x134904[_0x55b9f0(0xa4f)](_0x11c07c);}},Game_Battler[_0x588453(0x755)]['startAttackWeaponAnimation']=function(){const _0x1d6b99=_0x588453;if(SceneManager['isSceneBattle']()){const _0x2a5cd0=this[_0x1d6b99(0x12a)]();this[_0x1d6b99(0x305)](_0x2a5cd0);}},Game_Battler[_0x588453(0x755)][_0x588453(0x4fd)]=function(_0x62fe19,_0x4148e8){const _0x178170=_0x588453;if(!_0x62fe19)return;if(!_0x62fe19[_0x178170(0x343)]())return;if(_0x62fe19[_0x178170(0xa82)]())return;if(_0x62fe19[_0x178170(0x395)]())return;if(_0x62fe19['isItem']())return;if($gameTemp[_0x178170(0x300)])return;let _0x55f603=0x0;const _0x3c0ce7=VisuMZ[_0x178170(0x39a)][_0x178170(0x90d)][_0x178170(0x608)],_0x210a4a=_0x62fe19['item']()[_0x178170(0x97d)];if(_0x210a4a[_0x178170(0x809)](/<CAST ANIMATION: (\d+)>/i))_0x55f603=Number(RegExp['$1']);else{if(_0x210a4a[_0x178170(0x809)](/<NO CAST ANIMATION>/i))return;else{if(_0x62fe19['isCertainHit']())_0x55f603=_0x3c0ce7[_0x178170(0x9fd)];else{if(_0x62fe19['isPhysical']())_0x55f603=_0x3c0ce7[_0x178170(0x4f8)];else _0x62fe19['isMagical']()&&(_0x55f603=_0x3c0ce7['CastMagical']);}}}_0x55f603>0x0&&$gameTemp[_0x178170(0x387)]([this],_0x55f603,!!_0x4148e8);},Game_Battler[_0x588453(0x755)][_0x588453(0xa7e)]=function(){const _0x280654=_0x588453;SoundManager[_0x280654(0x796)]();let _0x54e5cf=VisuMZ[_0x280654(0x39a)][_0x280654(0x90d)]['ActionSequence'][_0x280654(0x54f)];_0x54e5cf>0x0&&(Imported[_0x280654(0xe0)]?$gameTemp['requestFauxAnimation']([this],_0x54e5cf):$gameTemp[_0x280654(0x387)]([this],_0x54e5cf));},Game_Battler[_0x588453(0x755)]['isActiveTpbReady']=function(){const _0x205bef=_0x588453;if(!$gameSystem[_0x205bef(0x879)]())return![];if(!BattleManager[_0x205bef(0x84e)]())return![];if(!this[_0x205bef(0x610)]())return![];if(this[_0x205bef(0x2df)]())return!![];if(this['isTpbReady']())return!![];if(this[_0x205bef(0x3b4)]>=0x1)return!![];return![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x304)]=Game_Battler['prototype'][_0x588453(0x496)],Game_Battler[_0x588453(0x755)][_0x588453(0x496)]=function(){const _0x50e901=_0x588453;this[_0x50e901(0x9d6)]()&&(this[_0x50e901(0xac2)]=!![]),VisuMZ[_0x50e901(0x39a)][_0x50e901(0x304)]['call'](this),this[_0x50e901(0x73a)](),this[_0x50e901(0x4e2)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x799)]=Game_Battler[_0x588453(0x755)][_0x588453(0x6f4)],Game_Battler[_0x588453(0x755)][_0x588453(0x6f4)]=function(){const _0x572929=_0x588453;this[_0x572929(0x9d6)]()&&(this[_0x572929(0xac2)]=!![]),VisuMZ['BattleCore']['Game_Battler_performMiss'][_0x572929(0x90a)](this),this['performFlinch']();},VisuMZ[_0x588453(0x39a)][_0x588453(0x3af)]=Game_Battler[_0x588453(0x755)][_0x588453(0xa6b)],Game_Battler[_0x588453(0x755)][_0x588453(0xa6b)]=function(){const _0x242ad5=_0x588453;this[_0x242ad5(0x9d6)]()&&(this[_0x242ad5(0xac2)]=!![]),VisuMZ[_0x242ad5(0x39a)][_0x242ad5(0x3af)]['call'](this),this[_0x242ad5(0x73a)]();},Game_Battler[_0x588453(0x755)][_0x588453(0x73a)]=function(){const _0x48ab0a=_0x588453;if(!$gameSystem[_0x48ab0a(0x879)]())return;if(this['_flinched'])return;this['_flinched']=!![];const _0x15aecc=this[_0x48ab0a(0xabe)]();if(_0x15aecc)_0x15aecc[_0x48ab0a(0x649)]();},Game_Battler[_0x588453(0x755)][_0x588453(0x4e2)]=function(){const _0x2d3280=_0x588453;if(!this[_0x2d3280(0xd7)]())return;const _0x2ac81d=VisuMZ[_0x2d3280(0x39a)][_0x2d3280(0x90d)]['Actor'];if(!(_0x2ac81d[_0x2d3280(0x9e4)]??![]))return;if(this[_0x2d3280(0x351)]<=0x0)return;const _0x20fb7e=this[_0x2d3280(0xabe)]();if(_0x20fb7e){const _0x149a0d=this[_0x2d3280(0x351)],_0x233ff6=(_0x149a0d/this[_0x2d3280(0x459)])[_0x2d3280(0x25e)](0.8,0x1),_0x1ca93b=_0x2ac81d[_0x2d3280(0x957)]??0x30,_0x46c591=_0x233ff6*_0x1ca93b;_0x20fb7e[_0x2d3280(0xa35)](_0x46c591,_0x233ff6);}},Game_Battler['prototype'][_0x588453(0x8bc)]=function(){const _0x3dff02=_0x588453;if(this[_0x3dff02(0x8c6)]()&&this['_motionType']!==_0x3dff02(0x929)){this['requestMotion'](_0x3dff02(0x929));return;}if(this[_0x3dff02(0x8c6)]()&&this['_motionType']==='dead')return;if(!!this['_freezeMotionData'])return;if(this[_0x3dff02(0x4ad)]()){if(!this[_0x3dff02(0x581)]()&&this!==BattleManager[_0x3dff02(0x5a9)]){if(this['battler']())this['battler']()[_0x3dff02(0x974)]();}this['clearFreezeMotion']();return;}if(this[_0x3dff02(0x277)]===_0x3dff02(0x790))return;if(this['_motionType']===_0x3dff02(0x76d)&&!BattleManager[_0x3dff02(0x2df)]())return;if(this['_motionType']===_0x3dff02(0x5e8)&&!BattleManager['isInputting']())return;this['clearMotion']();if(BattleManager[_0x3dff02(0x84e)]()&&this===BattleManager[_0x3dff02(0x5a9)])return;if(this[_0x3dff02(0xabe)]()&&BattleManager['isInputting']()){this[_0x3dff02(0xabe)]()[_0x3dff02(0x974)](),this[_0x3dff02(0x745)]();return;}this[_0x3dff02(0xabe)]()&&BattleManager[_0x3dff02(0x84e)]()&&this!==BattleManager[_0x3dff02(0x5a9)]&&this['battler']()[_0x3dff02(0x974)]();},Game_Enemy[_0x588453(0x755)][_0x588453(0x581)]=function(){const _0x3aebe6=_0x588453;if(!this['hasSvBattler']())return![];const _0x495dc1=this['battler']();if(!_0x495dc1)return![];const _0x57061d=_0x495dc1[_0x3aebe6(0x166)];if(!_0x57061d)return![];const _0x133346=_0x57061d['_motion'];return _0x133346&&!_0x133346['loop'];},Game_Battler[_0x588453(0x755)]['isBattlerFlipped']=function(){const _0x88cf0d=_0x588453;return this[_0x88cf0d(0x39f)];},Game_Battler[_0x588453(0x755)][_0x588453(0x856)]=function(_0x5040a7){const _0x2bb2e3=_0x588453;if(!$gameSystem['isSideView']())return;this[_0x2bb2e3(0x39f)]=_0x5040a7;const _0x28684a=this[_0x2bb2e3(0xabe)]();if(_0x28684a)_0x28684a[_0x2bb2e3(0x52e)]();},Game_Battler['prototype']['setBattlerFacePoint']=function(_0x10e95e,_0x26bb1b,_0x2a238a){const _0x3a31db=_0x588453;if(!$gameSystem['isSideView']())return;const _0x261849=this[_0x3a31db(0xabe)]();if(!_0x261849)return;if(_0x10e95e===_0x261849['_baseX'])return;let _0x59282b=![];if(this['isActor']()){if(_0x10e95e>_0x261849[_0x3a31db(0x494)])_0x59282b=!![];if(_0x10e95e<_0x261849['_baseX'])_0x59282b=![];}else{if(this[_0x3a31db(0x4ad)]()){if(_0x10e95e>_0x261849['_baseX'])_0x59282b=![];if(_0x10e95e<_0x261849['_baseX'])_0x59282b=!![];}};this[_0x3a31db(0x856)](_0x2a238a?!_0x59282b:_0x59282b),_0x261849[_0x3a31db(0x52e)]();},Game_Battler[_0x588453(0x755)]['moveBattlerDistance']=function(_0x4e1ae1,_0xcfc53a,_0x3e4abb,_0x217621,_0x3c7ac9){const _0x106c85=_0x588453;if(!$gameSystem[_0x106c85(0x879)]())return;const _0xd347eb=this[_0x106c85(0xabe)]();if(!_0xd347eb)return;if(_0x217621)this['setBattlerFacePoint'](_0x4e1ae1+_0xd347eb[_0x106c85(0x494)],_0xcfc53a+_0xd347eb[_0x106c85(0xaba)],![]);_0x4e1ae1+=_0xd347eb[_0x106c85(0x494)]-_0xd347eb[_0x106c85(0x482)],_0xcfc53a+=_0xd347eb[_0x106c85(0xaba)]-_0xd347eb[_0x106c85(0x628)],_0xd347eb[_0x106c85(0x12e)](_0x4e1ae1,_0xcfc53a,_0x3e4abb);if(Imported[_0x106c85(0xe0)])_0xd347eb[_0x106c85(0x2ed)](_0x3c7ac9||_0x106c85(0x7f1));},Game_Battler['prototype'][_0x588453(0x2dc)]=function(_0x16d660,_0x3440b0,_0x457b65,_0x10f1ad,_0x1e8a1e,_0x1aed85){const _0x56e82b=_0x588453;if(!$gameSystem[_0x56e82b(0x879)]())return;const _0x64932=this[_0x56e82b(0xabe)]();if(!_0x64932)return;if(_0x16d660===Infinity||_0x3440b0===Infinity)return;if(isNaN(_0x16d660)||isNaN(_0x3440b0))return;_0x1aed85=_0x1aed85||0x0;if(_0x1aed85>0x0){if(_0x64932['_baseX']>_0x16d660)_0x16d660+=_0x64932['width']/0x2+_0x1aed85;if(_0x64932[_0x56e82b(0x494)]<_0x16d660)_0x16d660-=_0x64932[_0x56e82b(0x3ad)]/0x2+_0x1aed85;}if(_0x10f1ad)this['setBattlerFacePoint'](_0x16d660,_0x3440b0,![]);_0x16d660-=_0x64932[_0x56e82b(0x482)],_0x3440b0-=_0x64932[_0x56e82b(0x628)],_0x64932[_0x56e82b(0x12e)](_0x16d660,_0x3440b0,_0x457b65);if(Imported[_0x56e82b(0xe0)])_0x64932[_0x56e82b(0x2ed)](_0x1e8a1e||_0x56e82b(0x7f1));},Game_Battler['prototype']['moveBattlerHomeDistance']=function(_0x433e6a,_0x109bc0,_0x37e2aa,_0x376b3b,_0x3dcdc1){const _0x3473e5=_0x588453;if(!$gameSystem['isSideView']())return;const _0x3344cd=this['battler']();if(!_0x3344cd)return;if(_0x376b3b)this[_0x3473e5(0x90f)](_0x433e6a+_0x3344cd['_baseX'],_0x109bc0+_0x3344cd[_0x3473e5(0xaba)],![]);_0x433e6a+=_0x3344cd['_homeX'],_0x109bc0+=_0x3344cd[_0x3473e5(0x628)],_0x3344cd[_0x3473e5(0x556)](_0x433e6a,_0x109bc0,_0x37e2aa,_0x3dcdc1),this[_0x3473e5(0x9df)]=_0x433e6a,this[_0x3473e5(0x81a)]=_0x109bc0;},Game_Battler[_0x588453(0x755)][_0x588453(0x8c4)]=function(_0xc12a11,_0x2b4f4c,_0x30658a,_0x45a6bd,_0x5596d7,_0x1892ae){const _0x58fae9=_0x588453;if(!$gameSystem[_0x58fae9(0x879)]())return;const _0x18796d=this['battler']();if(!_0x18796d)return;_0x1892ae=_0x1892ae||0x0;if(_0x1892ae>0x0){if(_0x18796d[_0x58fae9(0x494)]>_0xc12a11)_0xc12a11+=_0x18796d[_0x58fae9(0x3ad)]/0x2+_0x1892ae;if(_0x18796d[_0x58fae9(0x494)]<_0xc12a11)_0xc12a11-=_0x18796d['width']/0x2+_0x1892ae;}if(_0x45a6bd)this['setBattlerFacePoint'](_0xc12a11,_0x2b4f4c,![]);_0x18796d[_0x58fae9(0x556)](_0xc12a11,_0x2b4f4c,_0x30658a,_0x5596d7),this[_0x58fae9(0x9df)]=_0xc12a11,this[_0x58fae9(0x81a)]=_0x2b4f4c;},Game_Battler['prototype'][_0x588453(0x220)]=function(_0x101aca,_0xcddb31,_0x3e8994){const _0x484d5c=_0x588453;if(!$gameSystem[_0x484d5c(0x879)]())return;const _0x20c652=this[_0x484d5c(0xabe)]();if(!_0x20c652)return;_0x20c652['startFloat'](_0x101aca,_0xcddb31,_0x3e8994);},Game_Battler['prototype'][_0x588453(0x6e8)]=function(_0x7d896,_0x22d245){const _0x29669c=_0x588453;if(!$gameSystem[_0x29669c(0x879)]())return;const _0x1738f2=this['battler']();if(!_0x1738f2)return;_0x1738f2['startJump'](_0x7d896,_0x22d245);},Game_Battler['prototype'][_0x588453(0xa25)]=function(_0x50465a,_0x4b9049,_0x1b992c,_0x12713f){const _0x15fda7=_0x588453;if(!$gameSystem[_0x15fda7(0x879)]())return;const _0xce5e99=this['battler']();if(!_0xce5e99)return;_0xce5e99['startSpin'](_0x50465a,_0x4b9049,_0x1b992c,_0x12713f);},Game_Battler['prototype']['skewBattler']=function(_0x496931,_0x290a8b,_0x2a548a,_0x3308b2){const _0x21095b=_0x588453;if(!$gameSystem[_0x21095b(0x879)]())return;const _0x180fe6=this[_0x21095b(0xabe)]();if(!_0x180fe6)return;this['isActor']()&&(_0x496931*=-0x1,_0x290a8b*=-0x1),_0x180fe6[_0x21095b(0x650)](_0x496931,_0x290a8b,_0x2a548a,_0x3308b2);},Game_Battler['prototype'][_0x588453(0x132)]=function(_0x1d6308,_0x378db1,_0x55efc6,_0x355695){const _0xfdef=_0x588453;if(!$gameSystem[_0xfdef(0x879)]())return;const _0x4a9190=this[_0xfdef(0xabe)]();if(!_0x4a9190)return;_0x4a9190[_0xfdef(0xaf1)](_0x1d6308,_0x378db1,_0x55efc6,_0x355695);},Game_Battler[_0x588453(0x755)][_0x588453(0x30b)]=function(_0x45a998,_0x21f91c,_0x2e2ac9){const _0x1ca467=_0x588453;if(!$gameSystem['isSideView']())return;const _0x1aa268=this['battler']();if(!_0x1aa268)return;_0x1aa268[_0x1ca467(0xa21)](_0x45a998,_0x21f91c,_0x2e2ac9);},Game_Battler[_0x588453(0x755)]['clearFreezeMotion']=function(){const _0x554eca=_0x588453,_0x2ca9a0=!!this['_freezeMotionData'];this[_0x554eca(0x817)]=undefined,_0x2ca9a0&&(this['requestMotionRefresh'](),this[_0x554eca(0x800)]());},Game_Battler['prototype']['clearFreezeMotionForWeapons']=function(){const _0x25b2dc=_0x588453;if(!SceneManager[_0x25b2dc(0x8b8)]())return;const _0x69825e=this['battler']();if(!_0x69825e)return;let _0x232ac7=this['isActor']()?_0x69825e[_0x25b2dc(0x6b3)]:_0x69825e['_svBattlerSprite']['_weaponSprite'];_0x232ac7&&_0x232ac7[_0x25b2dc(0x68d)](0x0);},Game_Battler[_0x588453(0x755)][_0x588453(0x33a)]=function(_0x37b15b,_0x232228,_0x29994b){const _0x24a37c=_0x588453;if(this['isEnemy']()&&!this[_0x24a37c(0x1ea)]())return;let _0x2b6110=0x0,_0x1dec9b=0x0;_0x37b15b[_0x24a37c(0x809)](/ATTACK[ ](\d+)/i)&&(_0x1dec9b=Number(RegExp['$1']),_0x1dec9b--);if(this['isActor']()){const _0x13ef7c=this['weapons']();_0x2b6110=_0x13ef7c[_0x1dec9b]?_0x13ef7c[_0x1dec9b][_0x24a37c(0x190)]:0x0;}else this[_0x24a37c(0x4ad)]()&&(_0x2b6110=this[_0x24a37c(0x391)]()['wtypeId']||0x0);const _0x152653=$dataSystem[_0x24a37c(0x5fc)][_0x2b6110];_0x37b15b[_0x24a37c(0x809)](/attack/i)&&(_0x37b15b=['thrust','swing',_0x24a37c(0x3b1)][_0x152653[_0x24a37c(0xa5f)]]||_0x24a37c(0xaa0)),this[_0x24a37c(0x817)]={'motionType':_0x37b15b,'weaponImageId':_0x232228?_0x152653['weaponImageId']:0x0,'pattern':_0x29994b};},Game_Battler[_0x588453(0x755)][_0x588453(0x179)]=function(_0x2d057c){const _0x5dd0c1=_0x588453;if(!_0x2d057c)return![];return _0x2d057c[_0x5dd0c1(0x6f5)]()===this[_0x5dd0c1(0x6f5)]();},Game_Battler[_0x588453(0x755)][_0x588453(0x134)]=function(_0x3cef11){const _0x3b900b=_0x588453;if(!_0x3cef11)return![];return _0x3cef11[_0x3b900b(0x6c0)]()===this[_0x3b900b(0x6f5)]();},Game_Battler[_0x588453(0x755)][_0x588453(0x2e7)]=function(){return![];},Game_Actor[_0x588453(0x755)][_0x588453(0x2e7)]=function(){const _0x437378=_0x588453;return this[_0x437378(0x4bd)]()[_0x437378(0x809)](/\$/i);},Game_Enemy[_0x588453(0x755)][_0x588453(0x2e7)]=function(){const _0x2ce9e3=_0x588453;return this[_0x2ce9e3(0x1ea)]()&&this[_0x2ce9e3(0x8b7)]()[_0x2ce9e3(0x809)](/\$/i);},VisuMZ[_0x588453(0x39a)]['Game_Actor_setup']=Game_Actor['prototype'][_0x588453(0x68d)],Game_Actor[_0x588453(0x755)][_0x588453(0x68d)]=function(_0x169c2a){const _0x55c3ec=_0x588453;VisuMZ[_0x55c3ec(0x39a)]['Game_Actor_setup']['call'](this,_0x169c2a),this[_0x55c3ec(0x7fc)]();},Game_Actor[_0x588453(0x755)]['initBattlePortrait']=function(){const _0x437b1a=_0x588453;this[_0x437b1a(0x551)]='',this['actor']()&&this[_0x437b1a(0x112)]()[_0x437b1a(0x97d)][_0x437b1a(0x809)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x437b1a(0x551)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x588453(0x131)]=function(){const _0x387853=_0x588453;if(this['getBattlePortrait']()!=='')return this['getBattlePortrait']();else{if(Imported[_0x387853(0x45e)]&&this['getMenuImage']()!=='')return this[_0x387853(0x128)]();}return'';},Game_Actor[_0x588453(0x755)][_0x588453(0xe1)]=function(){const _0x40be4f=_0x588453;if(this[_0x40be4f(0x551)]===undefined)this[_0x40be4f(0x7fc)]();return this[_0x40be4f(0x551)];},Game_Actor['prototype'][_0x588453(0x10d)]=function(_0x4cf2bb){const _0x4d0996=_0x588453;if(this[_0x4d0996(0x551)]===undefined)this[_0x4d0996(0x7fc)]();this[_0x4d0996(0x551)]=_0x4cf2bb;if(SceneManager['isSceneBattle']()&&$gameParty['battleMembers']()[_0x4d0996(0x51e)](this)){const _0x35f9d5=SceneManager[_0x4d0996(0x39b)][_0x4d0996(0x8e5)];_0x35f9d5&&_0x35f9d5[_0x4d0996(0x2cc)](this);}},Game_Actor[_0x588453(0x755)][_0x588453(0xa14)]=function(){return!![];},Game_Actor['prototype'][_0x588453(0xae4)]=function(){const _0x4829d5=_0x588453;if(!this[_0x4829d5(0x5b4)]()&&BattleManager[_0x4829d5(0xd3)])return!![];return Game_Battler[_0x4829d5(0x755)][_0x4829d5(0xae4)]['call'](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x73c)]=Game_Actor[_0x588453(0x755)][_0x588453(0x66f)],Game_Actor[_0x588453(0x755)][_0x588453(0x66f)]=function(){const _0x132e64=_0x588453;if(BattleManager[_0x132e64(0xd3)]&&!ConfigManager[_0x132e64(0x3dc)])return this[_0x132e64(0x1b5)]();else{return VisuMZ[_0x132e64(0x39a)][_0x132e64(0x73c)][_0x132e64(0x90a)](this);;}},Game_Actor[_0x588453(0x755)][_0x588453(0x1b5)]=function(){const _0xddb396=_0x588453,_0x173c70=[],_0x2f2c07=new Game_Action(this);return _0x2f2c07[_0xddb396(0x7e8)](),_0x173c70[_0xddb396(0x2b9)](_0x2f2c07),_0x173c70;},Game_Actor[_0x588453(0x755)][_0x588453(0xa64)]=function(){const _0x599061=_0x588453;return this[_0x599061(0x629)]()[_0x599061(0x97d)][_0x599061(0x809)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x599061(0x39a)][_0x599061(0x90d)][_0x599061(0xa97)]['BattleCmdList'];},Game_Actor[_0x588453(0x755)][_0x588453(0x883)]=function(){const _0x51d00e=_0x588453;if(this['_cache']['svAnchorX']!==undefined)return this[_0x51d00e(0x7c6)]['svAnchorX'];return this[_0x51d00e(0x112)]()[_0x51d00e(0x97d)][_0x51d00e(0x809)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x51d00e(0x7c6)][_0x51d00e(0x780)]=eval(RegExp['$1']),this[_0x51d00e(0x7c6)][_0x51d00e(0x966)]=eval(RegExp['$2'])):this['_cache'][_0x51d00e(0x780)]=Game_Battler['prototype'][_0x51d00e(0x883)]['call'](this),this[_0x51d00e(0x7c6)][_0x51d00e(0x780)];},Game_Actor[_0x588453(0x755)][_0x588453(0xa74)]=function(){const _0x413dec=_0x588453;if(this[_0x413dec(0x7c6)]['svAnchorY']!==undefined)return this[_0x413dec(0x7c6)][_0x413dec(0x966)];return this[_0x413dec(0x112)]()[_0x413dec(0x97d)][_0x413dec(0x809)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x413dec(0x7c6)][_0x413dec(0x780)]=eval(RegExp['$1']),this[_0x413dec(0x7c6)][_0x413dec(0x966)]=eval(RegExp['$2'])):this[_0x413dec(0x7c6)][_0x413dec(0x966)]=Game_Battler[_0x413dec(0x755)][_0x413dec(0xa74)][_0x413dec(0x90a)](this),this[_0x413dec(0x7c6)][_0x413dec(0x966)];},Game_Actor[_0x588453(0x755)][_0x588453(0x371)]=function(){const _0x3cca37=_0x588453;if(this[_0x3cca37(0x7c6)][_0x3cca37(0xa6f)]!==undefined)return this[_0x3cca37(0x7c6)][_0x3cca37(0xa6f)];if(this[_0x3cca37(0x112)]()[_0x3cca37(0x97d)][_0x3cca37(0x809)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache']['svShadow']=!![];else this[_0x3cca37(0x112)]()[_0x3cca37(0x97d)][_0x3cca37(0x809)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x3cca37(0x7c6)][_0x3cca37(0xa6f)]=![]:this[_0x3cca37(0x7c6)][_0x3cca37(0xa6f)]=Game_Battler[_0x3cca37(0x755)][_0x3cca37(0x371)][_0x3cca37(0x90a)](this);return this[_0x3cca37(0x7c6)][_0x3cca37(0xa6f)];},Game_Actor[_0x588453(0x755)][_0x588453(0x1b8)]=function(){const _0x13a4f9=_0x588453;return VisuMZ['BattleCore'][_0x13a4f9(0x90d)][_0x13a4f9(0x848)][_0x13a4f9(0x61b)];},Game_Actor[_0x588453(0x755)]['performWeaponAnimation']=function(){const _0x16923a=_0x588453,_0x13d18e=this[_0x16923a(0x529)](),_0x3e9661=_0x13d18e[0x0]?_0x13d18e[0x0]['wtypeId']:0x0,_0x19c427=$dataSystem[_0x16923a(0x5fc)][_0x3e9661];_0x19c427&&this[_0x16923a(0x305)](_0x19c427['weaponImageId']);},Game_Actor[_0x588453(0x755)]['performAction']=function(_0x6b25e1){const _0x29a152=_0x588453;Game_Battler[_0x29a152(0x755)]['performAction'][_0x29a152(0x90a)](this,_0x6b25e1),this[_0x29a152(0x185)](_0x6b25e1);},Game_Actor['prototype'][_0x588453(0xaed)]=function(){const _0x49ddc9=_0x588453,_0x1a63a5=this[_0x49ddc9(0x529)](),_0x1337b1=_0x1a63a5[0x0]?_0x1a63a5[0x0][_0x49ddc9(0x190)]:0x0;return $dataSystem[_0x49ddc9(0x5fc)][_0x1337b1];},Game_Actor[_0x588453(0x755)][_0x588453(0x31d)]=function(_0x1bae73){const _0x5b3bbc=_0x588453;_0x1bae73=_0x1bae73||0x1,_0x1bae73--;const _0x254ef7=this[_0x5b3bbc(0x529)]();return _0x254ef7[_0x1bae73]?_0x254ef7[_0x1bae73][_0x5b3bbc(0x700)]:0x0;},Game_Actor[_0x588453(0x755)]['getAttackMotionSlot']=function(_0x266c86){const _0x41183b=_0x588453;_0x266c86=_0x266c86||0x1,_0x266c86--;const _0x409b1f=this[_0x41183b(0x529)](),_0x5a1da2=_0x409b1f[_0x266c86]?_0x409b1f[_0x266c86][_0x41183b(0x190)]:0x0;return $dataSystem[_0x41183b(0x5fc)][_0x5a1da2];},Game_Actor[_0x588453(0x755)][_0x588453(0x2f2)]=function(_0x58ee91){const _0x52ae80=_0x588453;_0x58ee91=_0x58ee91||0x1,_0x58ee91--;const _0x373464=this[_0x52ae80(0x529)](),_0x134fe7=_0x373464[_0x58ee91]?_0x373464[_0x58ee91][_0x52ae80(0x190)]:0x0,_0x280636=$dataSystem['attackMotions'][_0x134fe7];if(_0x280636){if(_0x280636[_0x52ae80(0xa5f)]===0x0)this['requestMotion'](_0x52ae80(0xaa4));else{if(_0x280636[_0x52ae80(0xa5f)]===0x1)this['requestMotion'](_0x52ae80(0xaa0));else _0x280636[_0x52ae80(0xa5f)]===0x2&&this['requestMotion']('missile');}this[_0x52ae80(0x305)](_0x280636[_0x52ae80(0x65c)]);}},Game_Battler[_0x588453(0x755)][_0x588453(0x7c1)]=function(_0x388baa){const _0xd6babd=_0x588453;if(this[_0xd6babd(0xa52)]()){const _0x1dd41a=this[_0xd6babd(0x529)]();if(_0x1dd41a[_0xd6babd(0x6e3)]>0x0){const _0x17e147=_0x1dd41a[_0x388baa];if(_0x17e147)_0x388baa=this[_0xd6babd(0x369)]()[_0xd6babd(0x512)](_0x17e147);}}this['_activeWeaponSlot']=_0x388baa||0x0,this[_0xd6babd(0x7c6)]={};},Game_Battler[_0x588453(0x755)]['nextActiveWeaponSlot']=function(){const _0x42e723=_0x588453;this[_0x42e723(0x154)]=this['_activeWeaponSlot']||0x0,this[_0x42e723(0x154)]++,this[_0x42e723(0x7c6)]={};},Game_Battler[_0x588453(0x755)][_0x588453(0xa7a)]=function(){const _0x26b262=_0x588453;this['_activeWeaponSlot']=undefined,this[_0x26b262(0x7c6)]={};},VisuMZ[_0x588453(0x39a)][_0x588453(0x598)]=Game_Actor[_0x588453(0x755)][_0x588453(0x369)],Game_Actor[_0x588453(0x755)][_0x588453(0x369)]=function(){const _0xccc2f5=_0x588453;let _0x313906=VisuMZ[_0xccc2f5(0x39a)]['Game_Actor_equips']['call'](this);if(this[_0xccc2f5(0xa29)])return _0x313906;if(this['_activeWeaponSlot']!==undefined){this['_tempEquipCheck']=!![];const _0x1adfe2=this[_0xccc2f5(0x18b)]();for(let _0x1492e8=0x0;_0x1492e8<_0x1adfe2[_0xccc2f5(0x6e3)];_0x1492e8++){_0x1adfe2[_0x1492e8]===0x1&&this[_0xccc2f5(0x154)]!==_0x1492e8&&(_0x313906[_0x1492e8]=null);}this[_0xccc2f5(0xa29)]=undefined;}return _0x313906;},Window_BattleLog[_0x588453(0x755)][_0x588453(0x271)]=function(_0x5eb616){const _0x242c68=_0x588453;return _0x5eb616[_0x242c68(0xa52)]()?_0x5eb616[_0x242c68(0x529)]()[_0x242c68(0x6e3)]||0x1:0x1;},Window_BattleLog['prototype'][_0x588453(0x124)]=function(_0x1166ed,_0x5a66f0){const _0x151ecb=_0x588453;_0x1166ed&&_0x1166ed[_0x151ecb(0xa52)]()&&_0x1166ed[_0x151ecb(0x7c1)](_0x5a66f0),this[_0x151ecb(0x378)]();},Window_BattleLog['prototype'][_0x588453(0x896)]=function(_0x110484){const _0x4e08ec=_0x588453;_0x110484&&_0x110484[_0x4e08ec(0xa52)]()&&_0x110484[_0x4e08ec(0xa7a)](),this[_0x4e08ec(0x378)]();},Game_Actor[_0x588453(0x755)][_0x588453(0x23b)]=function(){const _0x52f5fe=_0x588453;let _0x3cadf9=_0x52f5fe(0x23b);if(this['checkCacheKey'](_0x3cadf9))return this[_0x52f5fe(0x7c6)][_0x3cadf9];return this['_cache'][_0x3cadf9]=this[_0x52f5fe(0xa36)](this[_0x52f5fe(0x112)]()),this[_0x52f5fe(0x7c6)][_0x3cadf9];},Game_Actor[_0x588453(0x755)]['battleUIOffsetY']=function(){const _0x2b63a7=_0x588453;let _0x5d0557=_0x2b63a7(0x167);if(this['checkCacheKey'](_0x5d0557))return this[_0x2b63a7(0x7c6)][_0x5d0557];return this['_cache'][_0x5d0557]=this[_0x2b63a7(0x6db)](this[_0x2b63a7(0x112)]()),this[_0x2b63a7(0x7c6)][_0x5d0557];},VisuMZ[_0x588453(0x39a)]['Game_Enemy_setup']=Game_Enemy[_0x588453(0x755)][_0x588453(0x68d)],Game_Enemy['prototype'][_0x588453(0x68d)]=function(_0x27ba70,_0x5221e6,_0x5e4483){const _0x409469=_0x588453;_0x27ba70=DataManager['swapEnemyIDs'](_0x27ba70),VisuMZ[_0x409469(0x39a)][_0x409469(0x306)][_0x409469(0x90a)](this,_0x27ba70,_0x5221e6,_0x5e4483),Imported['VisuMZ_1_ElementStatusCore']&&this['initElementStatusCore'](),this[_0x409469(0x406)](),this[_0x409469(0x876)](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x409469(0x553)]();},Game_Enemy['prototype'][_0x588453(0x406)]=function(){const _0x39d52c=_0x588453,_0x208c49=VisuMZ['BattleCore'][_0x39d52c(0x90d)][_0x39d52c(0x732)];this[_0x39d52c(0x13f)]=_0x208c49[_0x39d52c(0x2e0)],this[_0x39d52c(0x949)]={},this['resetNameTempVisibility']();},Game_Enemy[_0x588453(0x755)]['setupBattleCoreData']=function(){const _0x14b52f=_0x588453,_0x2f1875=VisuMZ['BattleCore']['Settings']['Enemy'],_0x1ca403=this[_0x14b52f(0xf1)]()[_0x14b52f(0x97d)];this['_svBattlerData']={'name':'','wtypeId':_0x2f1875['WtypeId'],'collapse':_0x2f1875[_0x14b52f(0x140)],'motionIdle':_0x2f1875['MotionIdle'],'width':_0x2f1875['Width']||0x40,'height':_0x2f1875[_0x14b52f(0x121)]||0x40,'anchorX':_0x2f1875[_0x14b52f(0x923)]||0x0,'anchorY':_0x2f1875[_0x14b52f(0x686)]||0x0,'shadow':_0x2f1875[_0x14b52f(0x9d5)]};_0x1ca403['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x14b52f(0x13f)]=Number(RegExp['$1']));const _0x2e27f1=this[_0x14b52f(0x949)];if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW BATTLER: (.*)>/i))_0x2e27f1[_0x14b52f(0x4cf)]=String(RegExp['$1']);else{if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3f52ce=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x14b52f(0xaee)]('');_0x2e27f1[_0x14b52f(0x4cf)]=DataManager['processRandomizedData'](_0x3f52ce);}}_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2e27f1[_0x14b52f(0x338)]=eval(RegExp['$1']),_0x2e27f1[_0x14b52f(0x32f)]=eval(RegExp['$2']));if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW COLLAPSE>/i))_0x2e27f1[_0x14b52f(0x420)]=!![];else _0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2e27f1[_0x14b52f(0x420)]=![]);if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW SHOW SHADOW>/i))_0x2e27f1[_0x14b52f(0x23a)]=!![];else _0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2e27f1[_0x14b52f(0x23a)]=![]);if(_0x1ca403['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2e27f1[_0x14b52f(0x7b2)]=String(RegExp['$1'])[_0x14b52f(0x939)]()['trim']();else{if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x3397ea=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x14b52f(0xaee)]('');_0x2e27f1[_0x14b52f(0x7b2)]=DataManager[_0x14b52f(0x940)](_0x3397ea);}}_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2e27f1[_0x14b52f(0x3ad)]=Number(RegExp['$1']),_0x2e27f1[_0x14b52f(0x4ba)]=Number(RegExp['$2']));if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW WEAPON: (.*)>/i))_0x2e27f1[_0x14b52f(0x190)]=DataManager[_0x14b52f(0x209)](RegExp['$1']);else{if(_0x1ca403[_0x14b52f(0x809)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x2b033d=String(RegExp['$1'])[_0x14b52f(0x88c)](/[\r\n]+/)['remove'](''),_0x32a00c=DataManager[_0x14b52f(0x940)](_0x2b033d);_0x2e27f1[_0x14b52f(0x190)]=DataManager[_0x14b52f(0x209)](_0x32a00c);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x58e2b7=this['getTraitSetKeys']();for(const _0x24e653 of _0x58e2b7){const _0x86a275=this['traitSet'](_0x24e653)[_0x14b52f(0x8e8)][_0x14b52f(0x3c2)]()[_0x14b52f(0x4f2)](),_0x2addd7=_0x24e653['toUpperCase']()[_0x14b52f(0x4f2)]();if(_0x1ca403[_0x14b52f(0x809)](VisuMZ['ElementStatusCore']['RegExp']['SvBattlerSolo-%1-%2'[_0x14b52f(0x4a9)](_0x2addd7,_0x86a275)]))_0x2e27f1[_0x14b52f(0x4cf)]=String(RegExp['$1']);else{if(_0x1ca403[_0x14b52f(0x809)](VisuMZ[_0x14b52f(0x821)]['RegExp'][_0x14b52f(0x9de)[_0x14b52f(0x4a9)](_0x2addd7,_0x86a275)])){const _0x30b541=String(RegExp['$1'])[_0x14b52f(0x88c)](/[\r\n]+/)[_0x14b52f(0xaee)]('');_0x2e27f1[_0x14b52f(0x4cf)]=DataManager[_0x14b52f(0x940)](_0x30b541);}}if(_0x1ca403[_0x14b52f(0x809)](VisuMZ[_0x14b52f(0x821)]['RegExp'][_0x14b52f(0x675)[_0x14b52f(0x4a9)](_0x2addd7,_0x86a275)]))_0x2e27f1[_0x14b52f(0x190)]=DataManager[_0x14b52f(0x209)](RegExp['$1']);else{if(_0x1ca403[_0x14b52f(0x809)](VisuMZ[_0x14b52f(0x821)]['RegExp']['SvWeaponMass-%1-%2'[_0x14b52f(0x4a9)](_0x2addd7,_0x86a275)])){const _0x3b9b2c=String(RegExp['$1'])[_0x14b52f(0x88c)](/[\r\n]+/)[_0x14b52f(0xaee)](''),_0x203a6c=DataManager[_0x14b52f(0x940)](_0x3b9b2c);_0x2e27f1[_0x14b52f(0x190)]=DataManager[_0x14b52f(0x209)](_0x203a6c);}}if(_0x1ca403['match'](VisuMZ[_0x14b52f(0x821)][_0x14b52f(0x9c7)]['SvMotionIdleSolo-%1-%2'[_0x14b52f(0x4a9)](_0x2addd7,_0x86a275)]))_0x2e27f1[_0x14b52f(0x7b2)]=String(RegExp['$1'])['toLowerCase']()[_0x14b52f(0x4f2)]();else{if(_0x1ca403[_0x14b52f(0x809)](VisuMZ[_0x14b52f(0x821)][_0x14b52f(0x9c7)][_0x14b52f(0x6b9)[_0x14b52f(0x4a9)](_0x2addd7,_0x86a275)])){const _0x1fd79f=String(RegExp['$1'])[_0x14b52f(0x88c)](/[\r\n]+/)[_0x14b52f(0xaee)]('');_0x2e27f1[_0x14b52f(0x7b2)]=DataManager['processRandomizedData'](_0x1fd79f);}}}}},Game_Enemy[_0x588453(0x755)][_0x588453(0x32e)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x588453(0x755)][_0x588453(0x525)]=function(){const _0x525117=_0x588453;return this[_0x525117(0x32e)]();},Game_Enemy['prototype']['attackAnimationIdSlot']=function(_0x2a90eb){return this['attackAnimationId1']();},Game_Enemy['prototype'][_0x588453(0xd7)]=function(){const _0x531a8f=_0x588453;if(this[_0x531a8f(0xf1)]()[_0x531a8f(0x97d)][_0x531a8f(0x809)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x531a8f(0x755)]['canBattlerMove'][_0x531a8f(0x90a)](this);},Game_Enemy['prototype'][_0x588453(0xa77)]=function(){const _0x5be8c8=_0x588453;if(this['enemy']()[_0x5be8c8(0x97d)][_0x5be8c8(0x809)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x588453(0x352)]=function(){const _0x453588=_0x588453,_0x450aea=[];for(const _0x39dbfd of this[_0x453588(0xf1)]()[_0x453588(0x27e)]){const _0x2846b2=$dataSkills[_0x39dbfd[_0x453588(0x500)]];if(_0x2846b2&&!_0x450aea[_0x453588(0x51e)](_0x2846b2))_0x450aea[_0x453588(0x2b9)](_0x2846b2);}return _0x450aea;},Game_Enemy['prototype']['battleUIOffsetX']=function(){const _0xcecea8=_0x588453;let _0x372dff=_0xcecea8(0x23b);if(this[_0xcecea8(0xa1c)](_0x372dff))return this[_0xcecea8(0x7c6)][_0x372dff];return this[_0xcecea8(0x7c6)][_0x372dff]=this[_0xcecea8(0xa36)](this[_0xcecea8(0xf1)]()),this[_0xcecea8(0x7c6)][_0x372dff];},Game_Enemy[_0x588453(0x755)][_0x588453(0x167)]=function(){const _0x7fb1ca=_0x588453;let _0x4169b1=_0x7fb1ca(0x167);if(this[_0x7fb1ca(0xa1c)](_0x4169b1))return this['_cache'][_0x4169b1];return this['_cache'][_0x4169b1]=this['createBattleUIOffsetY'](this[_0x7fb1ca(0xf1)]()),this[_0x7fb1ca(0x7c6)][_0x4169b1];},Game_Enemy[_0x588453(0x755)][_0x588453(0x391)]=function(){const _0x5b1a32=_0x588453;if(this[_0x5b1a32(0x949)]!==undefined)return this[_0x5b1a32(0x949)];return this[_0x5b1a32(0x876)](),this[_0x5b1a32(0x949)];},Game_Enemy[_0x588453(0x755)][_0x588453(0x1ea)]=function(){const _0x43778f=_0x588453;return this['svBattlerData']()[_0x43778f(0x4cf)]!=='';},Game_Enemy[_0x588453(0x755)][_0x588453(0x8b7)]=function(){const _0x579ee6=_0x588453;return this[_0x579ee6(0x391)]()[_0x579ee6(0x4cf)];},Game_Enemy['prototype'][_0x588453(0x1b8)]=function(){const _0x4cc26e=_0x588453;return this[_0x4cc26e(0x1ea)]()?VisuMZ[_0x4cc26e(0x39a)][_0x4cc26e(0x90d)][_0x4cc26e(0x848)][_0x4cc26e(0x61b)]:VisuMZ['BattleCore'][_0x4cc26e(0x90d)][_0x4cc26e(0x732)][_0x4cc26e(0x61b)];},Game_Enemy[_0x588453(0x755)][_0x588453(0xa33)]=function(_0x5acc5e){const _0x4e041a=_0x588453;Game_Battler[_0x4e041a(0x755)][_0x4e041a(0xa33)][_0x4e041a(0x90a)](this,_0x5acc5e);if(this[_0x4e041a(0x1ea)]())this[_0x4e041a(0x185)](_0x5acc5e);},Game_Enemy[_0x588453(0x755)][_0x588453(0x3cb)]=function(){const _0x58bc36=_0x588453,_0x4db20a=this[_0x58bc36(0x391)]()['wtypeId']||0x0,_0x4d4f0b=$dataSystem['attackMotions'][_0x4db20a];if(_0x4d4f0b){if(_0x4d4f0b[_0x58bc36(0xa5f)]===0x0)this['requestMotion']('thrust');else{if(_0x4d4f0b[_0x58bc36(0xa5f)]===0x1)this['requestMotion']('swing');else _0x4d4f0b[_0x58bc36(0xa5f)]===0x2&&this[_0x58bc36(0x573)](_0x58bc36(0x3b1));}}},Game_Enemy[_0x588453(0x755)][_0x588453(0x2d7)]=function(){const _0x53101e=_0x588453,_0x557971=this[_0x53101e(0x391)]()[_0x53101e(0x190)]||0x0,_0x231acc=$dataSystem['attackMotions'][_0x557971];_0x231acc&&this['startWeaponAnimation'](_0x231acc[_0x53101e(0x65c)]);},Game_Enemy[_0x588453(0x755)]['getAttackMotion']=function(){const _0x50ae49=_0x588453,_0x133bd7=this[_0x50ae49(0x391)]()[_0x50ae49(0x190)]||0x0;return $dataSystem[_0x50ae49(0x5fc)][_0x133bd7];},Game_Enemy[_0x588453(0x755)]['getAttackMotionSlot']=function(_0x4d849a){return this['getAttackMotion']();},Game_Enemy[_0x588453(0x755)][_0x588453(0x496)]=function(){const _0x102066=_0x588453;Game_Battler[_0x102066(0x755)][_0x102066(0x496)][_0x102066(0x90a)](this),this[_0x102066(0xa14)]()&&this[_0x102066(0x1ea)]()&&this[_0x102066(0x573)](_0x102066(0x4b5)),SoundManager['playEnemyDamage']();},Game_Enemy[_0x588453(0x755)][_0x588453(0xa6b)]=function(){const _0x44ddba=_0x588453;Game_Battler[_0x44ddba(0x755)][_0x44ddba(0xa6b)][_0x44ddba(0x90a)](this),this[_0x44ddba(0x573)](_0x44ddba(0x74c));},Game_Enemy['prototype'][_0x588453(0x971)]=function(){const _0x5bd145=_0x588453;Game_Battler[_0x5bd145(0x755)][_0x5bd145(0x971)][_0x5bd145(0x90a)](this),this[_0x5bd145(0x573)](_0x5bd145(0x74c));},Game_Enemy['prototype'][_0x588453(0x8b0)]=function(){const _0x4fda5d=_0x588453;Game_Battler[_0x4fda5d(0x755)][_0x4fda5d(0x8b0)][_0x4fda5d(0x90a)](this),this['performAttack']();},Game_Enemy[_0x588453(0x755)][_0x588453(0x578)]=function(){const _0x3c7a40=_0x588453;if(this[_0x3c7a40(0x1ea)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x3c7a40(0x391)]()[_0x3c7a40(0x420)];}else return!![];},Game_Enemy[_0x588453(0x755)][_0x588453(0x883)]=function(){const _0x2608be=_0x588453;return this[_0x2608be(0x391)]()[_0x2608be(0x338)];},Game_Enemy[_0x588453(0x755)][_0x588453(0xa74)]=function(){const _0x21dcbc=_0x588453;return this[_0x21dcbc(0x391)]()['anchorY'];},Game_Enemy['prototype']['svBattlerShadowVisible']=function(){const _0x3cc39e=_0x588453;return this['svBattlerData']()[_0x3cc39e(0x23a)];},VisuMZ[_0x588453(0x39a)][_0x588453(0x703)]=Game_Enemy['prototype'][_0x588453(0x96e)],Game_Enemy['prototype'][_0x588453(0x96e)]=function(_0x35227d){const _0x58293f=_0x588453;VisuMZ['BattleCore'][_0x58293f(0x703)]['call'](this,_0x35227d),this[_0x58293f(0x406)](),this['setupBattleCoreData']();const _0x4622d3=this[_0x58293f(0xabe)]();_0x4622d3&&(_0x4622d3[_0x58293f(0x6ce)]=undefined,_0x4622d3[_0x58293f(0x775)](this));},Game_Enemy[_0x588453(0x755)]['resetNameTempVisibility']=function(){const _0x254256=_0x588453,_0x1494c2=VisuMZ[_0x254256(0x39a)][_0x254256(0x90d)][_0x254256(0x732)];this[_0x254256(0x50e)]=_0x1494c2[_0x254256(0xc4)]??0x0;},Game_Enemy[_0x588453(0x755)]['isNameTemporarilyVisible']=function(){const _0x5548e4=_0x588453;return this[_0x5548e4(0x50e)]&&this[_0x5548e4(0x50e)]>0x0;},Game_Enemy[_0x588453(0x755)][_0x588453(0x3ce)]=function(){const _0x5e0105=_0x588453;this['_nameTempVisibleDuration']&&this['_nameTempVisibleDuration']>0x0&&this[_0x5e0105(0x50e)]--;},Game_Enemy[_0x588453(0x755)]['clearNameTempVisibility']=function(){const _0x2c5713=_0x588453;this[_0x2c5713(0x50e)]=0x0;},Game_Unit[_0x588453(0x755)][_0x588453(0x2a4)]=function(_0xc0c60f){const _0x8a3c91=_0x588453;for(const _0xd265c of this[_0x8a3c91(0x425)]()){if(_0xd265c)_0xd265c[_0x8a3c91(0x2a4)](_0xc0c60f);}},Game_Unit[_0x588453(0x755)][_0x588453(0xaf3)]=function(){const _0x3a991d=_0x588453,_0x5d4a1e=this[_0x3a991d(0x157)]();return _0x5d4a1e[Math[_0x3a991d(0xaa2)](_0x5d4a1e[_0x3a991d(0x6e3)])];},VisuMZ[_0x588453(0x39a)]['Game_Party_addActor']=Game_Party[_0x588453(0x755)]['addActor'],Game_Party[_0x588453(0x755)]['addActor']=function(_0x1b5579){const _0x3ebcef=_0x588453;VisuMZ[_0x3ebcef(0x39a)][_0x3ebcef(0x458)][_0x3ebcef(0x90a)](this,_0x1b5579),BattleManager['refreshStatusWindow']();},VisuMZ[_0x588453(0x39a)][_0x588453(0xad4)]=Game_Party[_0x588453(0x755)][_0x588453(0x36e)],Game_Party[_0x588453(0x755)][_0x588453(0x36e)]=function(_0x22df06){const _0x3d4b2a=_0x588453;VisuMZ[_0x3d4b2a(0x39a)][_0x3d4b2a(0xad4)]['call'](this,_0x22df06),BattleManager[_0x3d4b2a(0x292)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x350)]=Game_Troop[_0x588453(0x755)][_0x588453(0x68d)],Game_Troop['prototype']['setup']=function(_0xe0b2a8){const _0x106e0f=_0x588453;$gameTemp[_0x106e0f(0x7be)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0xe0b2a8),VisuMZ['BattleCore'][_0x106e0f(0x350)][_0x106e0f(0x90a)](this,_0xe0b2a8),this['extendTroopMembers']();},VisuMZ['BattleCore'][_0x588453(0x891)]=Game_Troop[_0x588453(0x755)][_0x588453(0x434)],Game_Troop[_0x588453(0x755)][_0x588453(0x434)]=function(){const _0x567a0d=_0x588453;let _0x525756=VisuMZ[_0x567a0d(0x39a)][_0x567a0d(0x891)]['call'](this);return this['expRate']&&(_0x525756*=this[_0x567a0d(0x8f8)]()),Math['ceil'](_0x525756);},Game_Troop['prototype'][_0x588453(0x8f8)]=function(){return 0x1;},Game_Troop[_0x588453(0x755)][_0x588453(0x20d)]=function(){const _0x4e1d1c=_0x588453,_0x46bdb2=DataManager[_0x4e1d1c(0x93f)](this[_0x4e1d1c(0x324)]()['id']);if(_0x46bdb2[_0x4e1d1c(0x809)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x475ffe=RegExp['$1'][_0x4e1d1c(0x88c)](',')[_0x4e1d1c(0x89e)](_0x25501b=>Number(_0x25501b));this[_0x4e1d1c(0x561)](),this['processExtendTroopMembers'](_0x475ffe);}},Game_Troop[_0x588453(0x755)][_0x588453(0x561)]=function(){const _0x204818=_0x588453;let _0x4beead=_0x204818(0x841)+'\x0a';_0x4beead+=_0x204818(0x6a9),Imported[_0x204818(0x903)]&&(VisuMZ[_0x204818(0x473)][_0x204818(0x4ec)]<1.11&&(alert(_0x4beead[_0x204818(0x4a9)](_0x204818(0x3d3))),SceneManager[_0x204818(0x163)]())),Imported[_0x204818(0x731)]&&(VisuMZ[_0x204818(0xa00)][_0x204818(0x4ec)]<1.19&&(alert(_0x4beead[_0x204818(0x4a9)](_0x204818(0x20c))),SceneManager[_0x204818(0x163)]())),Imported[_0x204818(0x88e)]&&(VisuMZ[_0x204818(0x8dc)]['version']<1.15&&(alert(_0x4beead[_0x204818(0x4a9)](_0x204818(0x9fe))),SceneManager[_0x204818(0x163)]()));},Game_Troop[_0x588453(0x755)]['processExtendTroopMembers']=function(_0x53dea6){const _0x282a9b=_0x588453;this[_0x282a9b(0x44d)]={};for(const _0x49caab of this[_0x282a9b(0x425)]()){if(!_0x49caab)continue;_0x49caab[_0x282a9b(0x23f)]('');}for(const _0x16d432 of _0x53dea6){const _0x4ceb3d=$dataTroops[_0x16d432];if(_0x4ceb3d)this[_0x282a9b(0x9c9)](_0x4ceb3d);}this['makeUniqueNames']();},Game_Troop[_0x588453(0x755)][_0x588453(0x9c9)]=function(_0x539ab8){const _0x2a3aff=_0x588453;for(const _0x107732 of _0x539ab8[_0x2a3aff(0x425)]){if($dataEnemies[_0x107732['enemyId']]){const _0x150c99=_0x107732[_0x2a3aff(0x1e6)],_0x2b28e5=_0x107732['x'],_0x2a1c54=_0x107732['y'],_0x4b8538=new Game_Enemy(_0x150c99,_0x2b28e5,_0x2a1c54);_0x107732[_0x2a3aff(0x253)]&&_0x4b8538[_0x2a3aff(0x8e9)](),this[_0x2a3aff(0xaab)]['push'](_0x4b8538);}}},VisuMZ['BattleCore'][_0x588453(0x871)]=Game_Map['prototype'][_0x588453(0x728)],Game_Map['prototype'][_0x588453(0x728)]=function(){const _0x9e6fd1=_0x588453;VisuMZ[_0x9e6fd1(0x39a)][_0x9e6fd1(0x871)][_0x9e6fd1(0x90a)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x588453(0x755)][_0x588453(0x653)]=function(){const _0x5d2e0d=_0x588453;this['_regionBattleback1']={},this[_0x5d2e0d(0xab6)]={};if(!$dataMap)return;const _0x113abd=$dataMap[_0x5d2e0d(0x97d)];if(!_0x113abd)return;const _0x4bcb14=_0x113abd[_0x5d2e0d(0x809)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4bcb14)for(const _0x461c42 of _0x4bcb14){_0x461c42[_0x5d2e0d(0x809)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2935c9=Number(RegExp['$1']),_0x4a21ca=Number(RegExp['$2']),_0x50c957=_0x4a21ca===0x1?this[_0x5d2e0d(0x61f)]:this[_0x5d2e0d(0xab6)],_0x41d27f=String(RegExp['$3']);_0x50c957[_0x2935c9]=_0x41d27f;}},VisuMZ[_0x588453(0x39a)]['Game_Map_battleback1Name']=Game_Map[_0x588453(0x755)][_0x588453(0x6a6)],Game_Map[_0x588453(0x755)]['battleback1Name']=function(){const _0x3edf0f=_0x588453;if(!BattleManager['isBattleTest']()){const _0x2c2b43=$gamePlayer[_0x3edf0f(0x7ac)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3edf0f(0x61f)]&&this['_regionBattleback1'][_0x2c2b43])return this[_0x3edf0f(0x61f)][_0x2c2b43];}return VisuMZ[_0x3edf0f(0x39a)]['Game_Map_battleback1Name'][_0x3edf0f(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x80b)]=Game_Map[_0x588453(0x755)][_0x588453(0x584)],Game_Map['prototype']['battleback2Name']=function(){const _0x39b9b5=_0x588453;if(!BattleManager[_0x39b9b5(0x9cc)]()){const _0x278bcb=$gamePlayer[_0x39b9b5(0x7ac)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x39b9b5(0x61f)]&&this[_0x39b9b5(0xab6)][_0x278bcb])return this['_regionBattleback2'][_0x278bcb];}return VisuMZ[_0x39b9b5(0x39a)][_0x39b9b5(0x80b)][_0x39b9b5(0x90a)](this);},VisuMZ[_0x588453(0x39a)]['Game_Map_encounterList']=Game_Map[_0x588453(0x755)][_0x588453(0x925)],Game_Map[_0x588453(0x755)][_0x588453(0x925)]=function(){const _0x2ca375=_0x588453;let _0x1491a6=JsonEx[_0x2ca375(0x2c3)](VisuMZ['BattleCore'][_0x2ca375(0x11b)][_0x2ca375(0x90a)](this));return VisuMZ[_0x2ca375(0x39a)]['ShuffleArray'](_0x1491a6);},VisuMZ['BattleCore']['ShuffleArray']=function(_0x24d772){const _0x8782b6=_0x588453;var _0x497393,_0x223dab,_0x4b7c6d;for(_0x4b7c6d=_0x24d772[_0x8782b6(0x6e3)]-0x1;_0x4b7c6d>0x0;_0x4b7c6d--){_0x497393=Math[_0x8782b6(0x10a)](Math[_0x8782b6(0x697)]()*(_0x4b7c6d+0x1)),_0x223dab=_0x24d772[_0x4b7c6d],_0x24d772[_0x4b7c6d]=_0x24d772[_0x497393],_0x24d772[_0x497393]=_0x223dab;}return _0x24d772;},VisuMZ[_0x588453(0x39a)][_0x588453(0x7af)]=Game_Interpreter[_0x588453(0x755)]['command357'],Game_Interpreter[_0x588453(0x755)][_0x588453(0xa78)]=function(_0x3a2338){const _0x3d11f0=_0x588453;return $gameTemp[_0x3d11f0(0x50b)](this),VisuMZ['BattleCore'][_0x3d11f0(0x7af)][_0x3d11f0(0x90a)](this,_0x3a2338);},VisuMZ[_0x588453(0x39a)][_0x588453(0x323)]=Game_Interpreter['prototype'][_0x588453(0x5ee)],Game_Interpreter[_0x588453(0x755)][_0x588453(0x5ee)]=function(){const _0x3e44c2=_0x588453;if(SceneManager[_0x3e44c2(0x8b8)]())switch(this[_0x3e44c2(0x25c)]){case'battleAngle':if(Imported[_0x3e44c2(0x372)]){if($gameScreen[_0x3e44c2(0x706)]()[_0x3e44c2(0x280)]>0x0)return!![];this['_waitMode']='';}break;case _0x3e44c2(0x183):if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x973)]())return!![];this['_waitMode']='';break;case _0x3e44c2(0x4fc):if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x778)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x666):if(Imported[_0x3e44c2(0x372)]){if($gameScreen[_0x3e44c2(0x706)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x3e44c2(0x706)]()['cameraOffsetDuration']>0x0)return!![];this[_0x3e44c2(0x25c)]='';}break;case'battleEffect':if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x36a)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x65d):if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x173)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x6f2):if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x13e)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x47f):if(BattleManager['_logWindow'][_0x3e44c2(0x98c)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x381):if(BattleManager['_spriteset'][_0x3e44c2(0x682)]())return!![];this[_0x3e44c2(0x25c)]='';break;case'battleOpacity':if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x3f8)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x895):if(BattleManager['_spriteset'][_0x3e44c2(0xe4)]())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0x8cb):if(BattleManager[_0x3e44c2(0x9cf)]['isAnyoneSkewing']())return!![];this[_0x3e44c2(0x25c)]='';break;case _0x3e44c2(0xa41):if(Imported[_0x3e44c2(0x485)]){if(BattleManager['_spriteset'][_0x3e44c2(0x5c4)]())return!![];this[_0x3e44c2(0x25c)]='';}break;case _0x3e44c2(0x980):if(Imported[_0x3e44c2(0x372)]){if($gameScreen['battleCameraData']()[_0x3e44c2(0xa73)]>0x0)return!![];this['_waitMode']='';}break;case _0x3e44c2(0x7e3):if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x319)]())return!![];this['_waitMode']='';break;case'battleZoom':if(Imported[_0x3e44c2(0x372)]){if($gameScreen[_0x3e44c2(0x706)]()[_0x3e44c2(0x308)]>0x0)return!![];this['_waitMode']='';}break;case _0x3e44c2(0x810):if(Imported[_0x3e44c2(0x41b)]){if(BattleManager[_0x3e44c2(0x9cf)]['isAnyoneInjectAniPrepping']){if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x6cf)]())return!![];this['_waitMode']='battleInjectAni';}else this[_0x3e44c2(0x25c)]='';break;}break;case _0x3e44c2(0x975):if(Imported[_0x3e44c2(0x41b)]){if(BattleManager[_0x3e44c2(0x9cf)][_0x3e44c2(0x1e7)]())return!![];this['_waitMode']='';}break;}return VisuMZ[_0x3e44c2(0x39a)]['Game_Interpreter_updateWaitMode'][_0x3e44c2(0x90a)](this);},VisuMZ[_0x588453(0x39a)]['Game_Interpreter_command301']=Game_Interpreter[_0x588453(0x755)][_0x588453(0xa19)],Game_Interpreter[_0x588453(0x755)][_0x588453(0xa19)]=function(_0x3759bd){const _0x45a5cf=_0x588453;return!$gameParty['inBattle']()?this[_0x45a5cf(0xff)](_0x3759bd):VisuMZ[_0x45a5cf(0x39a)][_0x45a5cf(0x10c)][_0x45a5cf(0x90a)](this,_0x3759bd);},Game_Interpreter['prototype'][_0x588453(0x857)]=function(_0x4b4f2f){const _0x482bff=_0x588453;return VisuMZ[_0x482bff(0x39a)][_0x482bff(0x10c)][_0x482bff(0x90a)](this,_0x4b4f2f),BattleManager[_0x482bff(0xadc)](_0x4b72cb=>{const _0x250e83=_0x482bff;this['_branch'][this[_0x250e83(0x2d2)]]=_0x4b72cb;}),!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x428)]=function(_0x228ed8){const _0x210b3a=_0x588453,_0x5e80e0=$dataCommonEvents[_0x228ed8];if(!_0x5e80e0)return![];if(_0x5e80e0[_0x210b3a(0x70f)][_0x210b3a(0x6e3)]<=0x1)return![];return!![];},Game_Interpreter[_0x588453(0x755)][_0x588453(0xff)]=function(_0x47e17a){const _0x2dfacf=_0x588453,_0x2612b3=VisuMZ[_0x2dfacf(0x39a)][_0x2dfacf(0x90d)][_0x2dfacf(0x4b1)],_0x3a27b9=_0x2612b3[_0x2dfacf(0x105)],_0x49e7c3=$dataCommonEvents[_0x3a27b9];if(_0x49e7c3&&VisuMZ[_0x2dfacf(0x39a)][_0x2dfacf(0x428)](_0x3a27b9)){const _0x397721=this[_0x2dfacf(0x40d)]()?this[_0x2dfacf(0x326)]:0x0,_0x99f565=_0x49e7c3[_0x2dfacf(0x70f)];this[_0x2dfacf(0x2ff)](_0x99f565,_0x397721),this['_list']=JsonEx[_0x2dfacf(0x2c3)](this['_list']);const _0x267af7={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x2dfacf(0x2c3)](_0x47e17a)};return this[_0x2dfacf(0x42c)]['splice'](this[_0x2dfacf(0x98e)]+0x1,0x0,_0x267af7),!![];}else return VisuMZ[_0x2dfacf(0x39a)][_0x2dfacf(0x10c)][_0x2dfacf(0x90a)](this,_0x47e17a);},VisuMZ[_0x588453(0x39a)][_0x588453(0xa9d)]=BattleManager[_0x588453(0x181)],BattleManager[_0x588453(0x181)]=function(){const _0x33ba39=_0x588453;VisuMZ[_0x33ba39(0x39a)]['BattleManager_onEncounter'][_0x33ba39(0x90a)](this),this[_0x33ba39(0x92b)]();},BattleManager['onEncounterBattleCore']=function(){const _0x5daf16=_0x588453,_0x53933e=VisuMZ[_0x5daf16(0x39a)][_0x5daf16(0x90d)][_0x5daf16(0x4b1)],_0xbbdb14=_0x53933e[_0x5daf16(0x105)];_0xbbdb14&&VisuMZ[_0x5daf16(0x39a)][_0x5daf16(0x428)](_0xbbdb14)&&(this[_0x5daf16(0x293)]=!![],$gameTemp['reserveCommonEvent'](_0x53933e[_0x5daf16(0x105)]),$gameMap['updateInterpreter'](),$gameMap[_0x5daf16(0x45f)][_0x5daf16(0x937)]=!![]),_0x53933e['DefeatEvent']>0x0&&(this[_0x5daf16(0x862)]=!![]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x4cd)]=Scene_Map[_0x588453(0x755)]['updateCallMenu'],Scene_Map[_0x588453(0x755)][_0x588453(0x8a7)]=function(){const _0xb16896=_0x588453;if(BattleManager[_0xb16896(0x293)])return;VisuMZ[_0xb16896(0x39a)]['Scene_Map_updateCallMenu'][_0xb16896(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x577)]=Scene_Map[_0x588453(0x755)]['launchBattle'],Scene_Map['prototype'][_0x588453(0x17f)]=function(){const _0x54dafb=_0x588453;BattleManager[_0x54dafb(0x293)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x54dafb(0x39a)][_0x54dafb(0x577)]['call'](this);},Scene_Map[_0x588453(0x755)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x7ca)]=SceneManager['isSceneChanging'],SceneManager[_0x588453(0x72b)]=function(){const _0x37d4c7=_0x588453;if(BattleManager[_0x37d4c7(0x293)])return![];return VisuMZ[_0x37d4c7(0x39a)][_0x37d4c7(0x7ca)]['call'](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x3ff)]=Game_Interpreter['prototype'][_0x588453(0xa05)],Game_Interpreter['prototype'][_0x588453(0xa05)]=function(){const _0x7138db=_0x588453;VisuMZ[_0x7138db(0x39a)][_0x7138db(0x3ff)][_0x7138db(0x90a)](this),this[_0x7138db(0x937)]&&(this[_0x7138db(0x937)]=undefined,SceneManager[_0x7138db(0x39b)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x588453(0x755)]['battleCoreResumeLaunchBattle']=function(){const _0x197e25=_0x588453;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x197e25(0x432)]=!![],this[_0x197e25(0x1b4)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x375)]=Scene_Map[_0x588453(0x755)]['initialize'],Scene_Map['prototype'][_0x588453(0x155)]=function(){const _0x4d960c=_0x588453;VisuMZ[_0x4d960c(0x39a)]['Scene_Map_initializeAfter'][_0x4d960c(0x90a)](this),BattleManager[_0x4d960c(0x432)]&&(this[_0x4d960c(0x557)]=!![],BattleManager[_0x4d960c(0x432)]=undefined);},VisuMZ[_0x588453(0x39a)][_0x588453(0x98f)]=Scene_Map[_0x588453(0x755)][_0x588453(0x155)],Scene_Map[_0x588453(0x755)][_0x588453(0x155)]=function(){const _0x3f4dff=_0x588453;VisuMZ[_0x3f4dff(0x39a)][_0x3f4dff(0x98f)][_0x3f4dff(0x90a)](this),$gameTemp[_0x3f4dff(0x7be)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x3fe)]=Scene_ItemBase[_0x588453(0x755)][_0x588453(0x12f)],Scene_ItemBase[_0x588453(0x755)][_0x588453(0x12f)]=function(){const _0x39d97f=_0x588453;VisuMZ[_0x39d97f(0x39a)][_0x39d97f(0x3fe)][_0x39d97f(0x90a)](this);if(this[_0x39d97f(0x343)]()[_0x39d97f(0x97d)][_0x39d97f(0x809)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x39d97f(0x343)]()[_0x39d97f(0x97d)][_0x39d97f(0x809)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x39d97f(0x53d)]=[]),DataManager[_0x39d97f(0x75d)](this[_0x39d97f(0x343)]())&&($gameTemp[_0x39d97f(0x53d)]=[]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x9d8)]=Scene_Options[_0x588453(0x755)][_0x588453(0x214)],Scene_Options[_0x588453(0x755)]['maxCommands']=function(){const _0x278db4=_0x588453;let _0x2ed02c=VisuMZ[_0x278db4(0x39a)][_0x278db4(0x9d8)][_0x278db4(0x90a)](this);const _0x476734=VisuMZ[_0x278db4(0x39a)][_0x278db4(0x90d)];if(_0x476734[_0x278db4(0x23c)][_0x278db4(0x44e)]&&_0x476734[_0x278db4(0x23c)][_0x278db4(0x13c)])_0x2ed02c+=0x2;if(_0x476734[_0x278db4(0x833)][_0x278db4(0x44e)]&&_0x476734[_0x278db4(0x833)][_0x278db4(0x13c)])_0x2ed02c+=0x1;return _0x2ed02c;},VisuMZ[_0x588453(0x39a)][_0x588453(0x9e6)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x155)],Scene_Battle[_0x588453(0x755)]['initialize']=function(){const _0x1f2094=_0x588453;VisuMZ[_0x1f2094(0x39a)][_0x1f2094(0x9e6)][_0x1f2094(0x90a)](this),this[_0x1f2094(0x558)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x3a7)]=Scene_Battle['prototype'][_0x588453(0x187)],Scene_Battle[_0x588453(0x755)][_0x588453(0x187)]=function(){const _0x1550f9=_0x588453;SceneManager[_0x1550f9(0x738)]()?(Scene_Message[_0x1550f9(0x755)][_0x1550f9(0x187)][_0x1550f9(0x90a)](this),this[_0x1550f9(0x9cf)]&&this[_0x1550f9(0x9cf)][_0x1550f9(0x665)](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x1550f9(0x5b6)]()):(VisuMZ['BattleCore'][_0x1550f9(0x3a7)]['call'](this),$gameTroop[_0x1550f9(0x69e)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0x8e6)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x1b4)],Scene_Battle[_0x588453(0x755)]['stop']=function(){const _0x591c4b=_0x588453;SceneManager[_0x591c4b(0xa1b)]()?Scene_Message['prototype']['stop']['call'](this):VisuMZ[_0x591c4b(0x39a)][_0x591c4b(0x8e6)][_0x591c4b(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x5d4)]=Scene_Battle[_0x588453(0x755)][_0x588453(0xa05)],Scene_Battle[_0x588453(0x755)][_0x588453(0xa05)]=function(){const _0x218ba1=_0x588453;SceneManager[_0x218ba1(0xa1b)]()?Scene_Message[_0x218ba1(0x755)][_0x218ba1(0xa05)][_0x218ba1(0x90a)](this):VisuMZ['BattleCore']['Scene_Battle_terminate'][_0x218ba1(0x90a)](this),$gameTemp[_0x218ba1(0xad8)](),this[_0x218ba1(0x558)]();},Scene_Battle['prototype']['isRightInputMode']=function(){const _0x52bc7a=_0x588453;if(ConfigManager[_0x52bc7a(0xeb)]&&ConfigManager[_0x52bc7a(0x826)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x52bc7a(0x80f)]()===_0x52bc7a(0x469))return![];else{return Scene_Message[_0x52bc7a(0x755)][_0x52bc7a(0x936)]['call'](this);;}}},VisuMZ['BattleCore'][_0x588453(0x5f8)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x4a6)],Scene_Battle['prototype'][_0x588453(0x4a6)]=function(){const _0x3d03b0=_0x588453;this[_0x3d03b0(0xa08)](),VisuMZ[_0x3d03b0(0x39a)][_0x3d03b0(0x5f8)][_0x3d03b0(0x90a)](this),this[_0x3d03b0(0x22b)]();},VisuMZ['BattleCore'][_0x588453(0x2b1)]=Scene_Battle['prototype']['createEnemyWindow'],Scene_Battle[_0x588453(0x755)][_0x588453(0x79d)]=function(){const _0x30f1ff=_0x588453;VisuMZ['BattleCore'][_0x30f1ff(0x2b1)]['call'](this),this[_0x30f1ff(0x4eb)]();},Scene_Battle[_0x588453(0x755)]['createMultiTargetWindows']=function(){const _0x48199d=_0x588453;this[_0x48199d(0x289)](!![]),this[_0x48199d(0x289)](![]);},Scene_Battle[_0x588453(0x755)][_0x588453(0x39e)]=function(_0x266d16){const _0x321f97=_0x588453,_0x3e0afd=Window_BattleMultiTarget['WIDTH'],_0x42e05f=this['calcWindowHeight'](0x1,!![]);let _0x4d08f4=_0x266d16?Graphics['boxWidth']-_0x3e0afd:0x0;_0x4d08f4+=_0x266d16?Window_BattleMultiTarget['ACTOR_OFFSET_X']:Window_BattleMultiTarget[_0x321f97(0xa56)];const _0x18bb8a=[_0x321f97(0x4dc)][_0x321f97(0x51e)](this[_0x321f97(0x80f)]())?0x0:this[_0x321f97(0x8e5)]['height'];let _0x3d6ea9=Graphics[_0x321f97(0x571)]-_0x18bb8a-_0x42e05f;return _0x3d6ea9+=_0x266d16?Window_BattleMultiTarget[_0x321f97(0x68c)]:Window_BattleMultiTarget[_0x321f97(0x1de)],new Rectangle(_0x4d08f4,_0x3d6ea9,_0x3e0afd,_0x42e05f);},Scene_Battle[_0x588453(0x755)][_0x588453(0x289)]=function(_0x2d38e1){const _0x25b918=_0x588453,_0x12bdc1=this[_0x25b918(0x39e)](_0x2d38e1),_0x2728e1=new Window_BattleMultiTarget(_0x12bdc1,_0x2d38e1);this['addWindow'](_0x2728e1),_0x2d38e1?this['_actorMultiTargetWindow']=_0x2728e1:this[_0x25b918(0x5b1)]=_0x2728e1;},VisuMZ[_0x588453(0x39a)][_0x588453(0x537)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x55f)],Scene_Battle[_0x588453(0x755)][_0x588453(0x55f)]=function(){const _0x257515=_0x588453;VisuMZ[_0x257515(0x39a)][_0x257515(0x537)][_0x257515(0x90a)](this),this[_0x257515(0x80f)]()===_0x257515(0x469)&&this[_0x257515(0x5e9)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x59d)]=function(_0x3787a5){const _0x4beff5=_0x588453;_0x3787a5?(this['_windowLayer']['x']=(Graphics['width']-Graphics[_0x4beff5(0x586)])/0x2,this[_0x4beff5(0x49e)]['y']=(Graphics['height']-Graphics[_0x4beff5(0x571)])/0x2):(this['_windowLayer']['x']=Graphics[_0x4beff5(0x3ad)]*0xa,this['_windowLayer']['y']=Graphics[_0x4beff5(0x4ba)]*0xa);},VisuMZ[_0x588453(0x39a)]['Scene_Battle_selectNextCommand']=Scene_Battle['prototype'][_0x588453(0x632)],Scene_Battle[_0x588453(0x755)]['selectNextCommand']=function(){const _0x2621ae=_0x588453,_0x38fd81=BattleManager[_0x2621ae(0x112)]();VisuMZ[_0x2621ae(0x39a)]['Scene_Battle_selectNextCommand']['call'](this);if(_0x38fd81){if(_0x38fd81===BattleManager[_0x2621ae(0x112)]())return;if(_0x38fd81===BattleManager[_0x2621ae(0x5a9)])return;if(_0x38fd81[_0x2621ae(0xabe)]())_0x38fd81[_0x2621ae(0xabe)]()[_0x2621ae(0x8e4)]();}},VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x588453(0x755)][_0x588453(0x21f)],Scene_Battle[_0x588453(0x755)][_0x588453(0x21f)]=function(){const _0x1b7c6e=_0x588453,_0x40aa86=BattleManager[_0x1b7c6e(0x112)]();if(_0x40aa86&&_0x40aa86[_0x1b7c6e(0xabe)])_0x40aa86['battler']()['stepBack']();VisuMZ['BattleCore'][_0x1b7c6e(0x615)][_0x1b7c6e(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x2a0)]=Scene_Battle[_0x588453(0x755)]['logWindowRect'],Scene_Battle[_0x588453(0x755)]['logWindowRect']=function(){const _0x1c8682=_0x588453;if(VisuMZ[_0x1c8682(0x39a)][_0x1c8682(0x90d)]['BattleLog'][_0x1c8682(0x1e2)])return VisuMZ[_0x1c8682(0x39a)]['Settings']['BattleLog']['BattleLogRectJS'][_0x1c8682(0x90a)](this);return VisuMZ[_0x1c8682(0x39a)][_0x1c8682(0x2a0)][_0x1c8682(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x37f)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x27c)],Scene_Battle[_0x588453(0x755)][_0x588453(0x27c)]=function(){const _0x18a9a2=_0x588453;VisuMZ[_0x18a9a2(0x39a)][_0x18a9a2(0x37f)][_0x18a9a2(0x90a)](this),this[_0x18a9a2(0x2e9)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x2e9)]=function(){const _0x33d5ba=_0x588453,_0x4f5f79=this[_0x33d5ba(0x627)];_0x4f5f79['setHandler'](_0x33d5ba(0xab8),this[_0x33d5ba(0x7c7)][_0x33d5ba(0x80e)](this)),_0x4f5f79[_0x33d5ba(0xac9)](_0x33d5ba(0x16f),this[_0x33d5ba(0x3ab)][_0x33d5ba(0x80e)](this));const _0x1219e5=this['battleLayoutStyle']();switch(_0x1219e5){case'xp':case _0x33d5ba(0x418):return this[_0x33d5ba(0x627)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x588453(0x755)][_0x588453(0x7c7)]=function(){const _0x1e3f61=_0x588453;BattleManager['_autoBattle']=!![],$gameParty[_0x1e3f61(0x836)](),this[_0x1e3f61(0x632)](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x588453(0x755)]['commandOptions']=function(){const _0x4e17db=_0x588453;this[_0x4e17db(0xea)]()?(this[_0x4e17db(0xf3)]=!![],this[_0x4e17db(0x944)][_0x4e17db(0x2b9)](_0x4e17db(0x433),VisuMZ[_0x4e17db(0x39a)][_0x4e17db(0x90d)]['PartyCmd'][_0x4e17db(0x938)])):this[_0x4e17db(0x3ba)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0xea)]=function(){const _0x111189=_0x588453;return BattleManager[_0x111189(0x84e)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x3ba)]=function(){const _0x11fd0b=_0x588453;this[_0x11fd0b(0xf3)]=![],this['_spriteset'][_0x11fd0b(0x665)](),this[_0x11fd0b(0x49e)][_0x11fd0b(0x536)]=![];if(BattleManager['isBattleTest']())($dataSystem[_0x11fd0b(0x6a6)]||$dataSystem['battleback2Name'])&&SceneManager[_0x11fd0b(0x747)]();else($gameMap[_0x11fd0b(0x6a6)]()||$gameMap[_0x11fd0b(0x584)]())&&SceneManager[_0x11fd0b(0x747)]();SceneManager[_0x11fd0b(0x2b9)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x11fd0b(0x481)]=BattleManager[_0x11fd0b(0x112)]());},VisuMZ['BattleCore'][_0x588453(0x783)]=Scene_Battle[_0x588453(0x755)][_0x588453(0xce)],Scene_Battle[_0x588453(0x755)][_0x588453(0xce)]=function(){const _0x3aa725=_0x588453;VisuMZ[_0x3aa725(0x39a)][_0x3aa725(0x783)][_0x3aa725(0x90a)](this);if(this[_0x3aa725(0xf3)]&&!BattleManager[_0x3aa725(0x5a9)])this['callOptions']();},VisuMZ['BattleCore'][_0x588453(0xad1)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x665)],Scene_Battle['prototype'][_0x588453(0x665)]=function(){const _0x473858=_0x588453;VisuMZ['BattleCore'][_0x473858(0xad1)]['call'](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x588453(0x755)][_0x588453(0x22b)]=function(){const _0x35b184=_0x588453,_0x33e661=this[_0x35b184(0x515)]();this[_0x35b184(0x158)]=new Window_AutoBattleCancel(_0x33e661),this['_autoBattleWindow'][_0x35b184(0x8e9)](),this['addChild'](this['_autoBattleWindow']);},Scene_Battle[_0x588453(0x755)][_0x588453(0x515)]=function(){const _0x94ddb8=_0x588453;return VisuMZ[_0x94ddb8(0x39a)][_0x94ddb8(0x90d)][_0x94ddb8(0x23c)][_0x94ddb8(0x5cd)][_0x94ddb8(0x90a)](this);},Scene_Battle[_0x588453(0x755)]['clearOnceParallelInterpreters']=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x588453(0x755)][_0x588453(0x16b)]=function(){const _0x415064=_0x588453;if(!this[_0x415064(0x152)])return;for(const _0x2b9b88 of this['_onceParallelInterpreters']){_0x2b9b88&&_0x2b9b88['update']();}},Scene_Battle[_0x588453(0x755)]['playOnceParallelInterpreter']=function(_0x9c8ff3){const _0x296ea3=_0x588453,_0x131f85=$dataCommonEvents[_0x9c8ff3];if(!_0x131f85)return;const _0x4eabac=new Game_BattleOnceParallelInterpreter();this[_0x296ea3(0x365)](_0x4eabac),_0x4eabac[_0x296ea3(0x6cd)](_0x9c8ff3);},Scene_Battle[_0x588453(0x755)]['addOnceParallelInterpreter']=function(_0x2affc2){const _0x278530=_0x588453;this[_0x278530(0x152)]=this['_onceParallelInterpreters']||[],this[_0x278530(0x152)][_0x278530(0x2b9)](_0x2affc2);},Scene_Battle[_0x588453(0x755)][_0x588453(0x2af)]=function(_0x301898){const _0x9e4400=_0x588453;this[_0x9e4400(0x152)]=this[_0x9e4400(0x152)]||[],this[_0x9e4400(0x152)][_0x9e4400(0xaee)](_0x301898);},Game_Troop['prototype'][_0x588453(0x69e)]=function(){const _0x19c43a=_0x588453;for(const _0x3101c8 of this[_0x19c43a(0x324)]()[_0x19c43a(0xdb)]){if(!this[_0x19c43a(0xaf4)](_0x3101c8))continue;SceneManager[_0x19c43a(0x39b)][_0x19c43a(0x40a)](_0x3101c8);}},Game_Troop['prototype']['doesPageHaveOnceParallelStart']=function(_0x6d3736){const _0x4ae2d0=_0x588453;if(!_0x6d3736)return;for(const _0x253311 of _0x6d3736[_0x4ae2d0(0x70f)]){if([0x6c,0x198][_0x4ae2d0(0x51e)](_0x253311['code'])){const _0x4fe6a6=_0x253311['parameters'][0x0];if(_0x4fe6a6[_0x4ae2d0(0x809)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype']['playOnceParallelTroopPage']=function(_0x51bb44){const _0x55b682=_0x588453;if(!_0x51bb44)return;const _0x443902=new Game_BattleOnceParallelInterpreter();this[_0x55b682(0x365)](_0x443902),_0x443902[_0x55b682(0x3e7)](_0x51bb44);};function Game_BattleOnceParallelInterpreter(){const _0x51ea7a=_0x588453;this[_0x51ea7a(0x155)](...arguments);}Game_BattleOnceParallelInterpreter[_0x588453(0x755)]=Object['create'](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x588453(0x755)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x588453(0x755)][_0x588453(0x6cd)]=function(_0x39d384){const _0x372673=_0x588453,_0x3daaf0=$dataCommonEvents[_0x39d384];_0x3daaf0?this[_0x372673(0x68d)](_0x3daaf0['list'],0x0):this[_0x372673(0xa05)]();},Game_BattleOnceParallelInterpreter[_0x588453(0x755)][_0x588453(0xa05)]=function(){const _0xff36fc=_0x588453;if(!SceneManager[_0xff36fc(0x8b8)]())return;SceneManager[_0xff36fc(0x39b)][_0xff36fc(0x2af)](this),Game_Interpreter['prototype'][_0xff36fc(0xa05)][_0xff36fc(0x90a)](this);},Game_BattleOnceParallelInterpreter[_0x588453(0x755)]['setTroopPage']=function(_0x11888d){const _0x18286a=_0x588453;_0x11888d?this[_0x18286a(0x68d)](_0x11888d[_0x18286a(0x70f)],0x0):this['terminate']();},Scene_Battle[_0x588453(0x755)][_0x588453(0x710)]=function(){const _0x49d121=_0x588453;return VisuMZ[_0x49d121(0x39a)][_0x49d121(0x90d)][_0x49d121(0x6d4)][_0x49d121(0x5e0)];},VisuMZ[_0x588453(0x39a)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x588453(0x755)][_0x588453(0x4bf)],Scene_Battle['prototype'][_0x588453(0x4bf)]=function(){const _0x2cf095=_0x588453;this[_0x2cf095(0x710)]()?this[_0x2cf095(0x444)]():VisuMZ[_0x2cf095(0x39a)][_0x2cf095(0x417)]['call'](this);},Scene_Battle[_0x588453(0x755)][_0x588453(0x444)]=function(){const _0x16a115=_0x588453;if(BattleManager['isDTB']())this[_0x16a115(0x632)]();else BattleManager[_0x16a115(0xa02)]()&&VisuMZ[_0x16a115(0x39a)][_0x16a115(0x417)][_0x16a115(0x90a)](this);},VisuMZ['BattleCore']['Scene_Battle_commandFight']=Scene_Battle[_0x588453(0x755)][_0x588453(0x12c)],Scene_Battle[_0x588453(0x755)]['commandFight']=function(){const _0x102d9a=_0x588453;BattleManager[_0x102d9a(0xa02)]()?(this[_0x102d9a(0x828)](),this[_0x102d9a(0x61d)]()):VisuMZ[_0x102d9a(0x39a)][_0x102d9a(0xaf6)][_0x102d9a(0x90a)](this);},Scene_Battle[_0x588453(0x755)][_0x588453(0x828)]=function(){const _0x50a781=_0x588453;if(!VisuMZ[_0x50a781(0x39a)][_0x50a781(0xe2)])return;if(Imported[_0x50a781(0x731)]&&BattleManager[_0x50a781(0x764)]())return;const _0x58603=$gameParty[_0x50a781(0x157)]()[_0x50a781(0x38d)](_0x1839fb=>_0x1839fb[_0x50a781(0x3c5)]()&&_0x1839fb[_0x50a781(0x3c4)]());BattleManager[_0x50a781(0x29f)]=_0x58603[0x0]||null,BattleManager[_0x50a781(0x29f)]&&BattleManager[_0x50a781(0x29f)]['setActionState']('inputting');},VisuMZ[_0x588453(0x39a)][_0x588453(0x545)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x6b7)],Scene_Battle[_0x588453(0x755)][_0x588453(0x6b7)]=function(){const _0x246d1b=_0x588453;VisuMZ[_0x246d1b(0x39a)]['Scene_Battle_commandEscape'][_0x246d1b(0x90a)](this);if(!BattleManager[_0x246d1b(0xa02)]())BattleManager[_0x246d1b(0x29f)]=null;},VisuMZ[_0x588453(0x39a)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x588453(0x755)][_0x588453(0xa09)],Scene_Battle[_0x588453(0x755)][_0x588453(0xa09)]=function(){const _0x532e4c=_0x588453;VisuMZ[_0x532e4c(0x39a)][_0x532e4c(0x870)][_0x532e4c(0x90a)](this),this[_0x532e4c(0x53f)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x53f)]=function(){const _0x18c27c=_0x588453,_0x250506=this['_actorCommandWindow'];_0x250506[_0x18c27c(0xac9)](_0x18c27c(0x76d),this[_0x18c27c(0x148)][_0x18c27c(0x80e)](this)),_0x250506[_0x18c27c(0xac9)](_0x18c27c(0xab8),this[_0x18c27c(0x2c8)][_0x18c27c(0x80e)](this)),_0x250506[_0x18c27c(0xac9)](_0x18c27c(0x477),this[_0x18c27c(0x4c5)]['bind'](this)),BattleManager[_0x18c27c(0xa02)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x250506[_0x18c27c(0x983)][_0x18c27c(0x382)]:_0x250506['setHandler'](_0x18c27c(0x382),this[_0x18c27c(0xa51)][_0x18c27c(0x80e)](this)));},Scene_Battle[_0x588453(0x755)][_0x588453(0x148)]=function(){const _0x43386c=_0x588453;this[_0x43386c(0x6b7)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x2c8)]=function(){const _0x1ab355=_0x588453;BattleManager[_0x1ab355(0x112)]()[_0x1ab355(0x87a)](),BattleManager[_0x1ab355(0x934)](),BattleManager['selectNextActor'](),this[_0x1ab355(0xa2e)]();},Scene_Battle[_0x588453(0x755)]['actorCommandSingleSkill']=function(){const _0x4de08a=_0x588453,_0x484743=BattleManager['inputtingAction'](),_0x569908=this[_0x4de08a(0xa1e)]['currentExt']();_0x484743[_0x4de08a(0xacd)](_0x569908),BattleManager[_0x4de08a(0x112)]()[_0x4de08a(0x792)]($dataSkills[_0x569908]),this[_0x4de08a(0x3a3)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0xa51)]=function(){const _0x4a3529=_0x588453;this[_0x4a3529(0x4c4)]()?this['performTpbActiveCheckSwitch']():this[_0x4a3529(0x9dc)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0xe2)]=![],Scene_Battle[_0x588453(0x755)][_0x588453(0x4c4)]=function(){const _0x35c9c2=_0x588453;if(Imported[_0x35c9c2(0x731)]&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x35c9c2(0x39a)]['TpbActiveChangeEnabled'])return![];const _0x480981=$gameParty[_0x35c9c2(0x157)]()['filter'](_0x20f0e9=>_0x20f0e9['isTpbCharged']()&&_0x20f0e9[_0x35c9c2(0x3c4)]());return _0x480981['length']>0x0&&BattleManager[_0x35c9c2(0x112)]()!==_0x480981[_0x480981[_0x35c9c2(0x6e3)]-0x1];}},Scene_Battle[_0x588453(0x755)][_0x588453(0x205)]=function(){const _0x60a6a6=_0x588453,_0x25e9ba=BattleManager['actor'](),_0x40d0ec=_0x25e9ba[_0x60a6a6(0xabe)]();if(_0x40d0ec)_0x40d0ec['stepBack']();const _0x5f369d=$gameParty[_0x60a6a6(0x157)]()[_0x60a6a6(0x38d)](_0x104227=>_0x104227[_0x60a6a6(0x3c5)]()&&_0x104227['canInput']()),_0x50127e=_0x5f369d[_0x60a6a6(0x512)](_0x25e9ba),_0x5c307c=_0x5f369d[_0x50127e+0x1];BattleManager['_currentActor']=_0x5c307c||null;if(_0x5c307c)_0x5c307c[_0x60a6a6(0x43a)](_0x60a6a6(0x1a2));_0x25e9ba[_0x60a6a6(0x43a)]('undecided'),this[_0x60a6a6(0xa2e)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x9dc)]=function(){const _0x44f226=_0x588453;this['_partyCommandWindow']['setup'](),this[_0x44f226(0xa1e)][_0x44f226(0x307)]();if(!VisuMZ[_0x44f226(0x39a)][_0x44f226(0xe2)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x44f226(0x764)]())return;if(BattleManager[_0x44f226(0x29f)]){BattleManager[_0x44f226(0x29f)]['setActionState'](_0x44f226(0x3bd));const _0xe11620=BattleManager[_0x44f226(0x29f)][_0x44f226(0xabe)]();if(_0xe11620)_0xe11620[_0x44f226(0x8e4)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x588453(0x39a)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x588453(0x755)][_0x588453(0x594)],Scene_Battle[_0x588453(0x755)]['createHelpWindow']=function(){const _0x5cab61=_0x588453;VisuMZ[_0x5cab61(0x39a)]['Scene_Battle_createHelpWindow'][_0x5cab61(0x90a)](this),this[_0x5cab61(0x1e5)]();},Scene_Battle['prototype'][_0x588453(0x1e5)]=function(){const _0x30bf12=_0x588453;this[_0x30bf12(0xa1e)][_0x30bf12(0x2b4)](this[_0x30bf12(0x2bf)]),this['_partyCommandWindow'][_0x30bf12(0x2b4)](this[_0x30bf12(0x2bf)]);},Scene_Battle['prototype'][_0x588453(0x80f)]=function(){const _0x1fa2aa=_0x588453;if($gameTemp[_0x1fa2aa(0x2fd)]!==undefined)return $gameTemp[_0x1fa2aa(0x2fd)];if(this['_battleLayoutStyle'])return this[_0x1fa2aa(0x8da)];return this[_0x1fa2aa(0x8da)]=VisuMZ[_0x1fa2aa(0x39a)]['Settings'][_0x1fa2aa(0xac6)][_0x1fa2aa(0x88f)]['toLowerCase']()[_0x1fa2aa(0x4f2)](),this[_0x1fa2aa(0x8da)]===_0x1fa2aa(0x3d9)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x1fa2aa(0x8da)]=_0x1fa2aa(0x880)),this[_0x1fa2aa(0x8da)]===_0x1fa2aa(0x4dc)&&!Imported[_0x1fa2aa(0x881)]&&(this[_0x1fa2aa(0x8da)]=_0x1fa2aa(0x880)),this[_0x1fa2aa(0x8da)];},VisuMZ[_0x588453(0x39a)][_0x588453(0x6c2)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x3f9)],Scene_Battle[_0x588453(0x755)][_0x588453(0x3f9)]=function(){const _0x2d448b=_0x588453,_0xc8d4e7=this[_0x2d448b(0x80f)]();switch(_0xc8d4e7){case _0x2d448b(0x70f):return this['calcWindowHeight'](Math[_0x2d448b(0x85e)](0x1,$gameParty[_0x2d448b(0x69c)]()),!![]);break;default:return VisuMZ[_0x2d448b(0x39a)][_0x2d448b(0x6c2)]['call'](this);break;}},VisuMZ['BattleCore'][_0x588453(0x408)]=Scene_Battle['prototype'][_0x588453(0x336)],Scene_Battle[_0x588453(0x755)][_0x588453(0x336)]=function(){const _0x185927=_0x588453,_0x39a97f=this[_0x185927(0x80f)]();switch(_0x39a97f){case _0x185927(0x469):return this[_0x185927(0x62c)]();break;case _0x185927(0x880):case _0x185927(0x70f):case'xp':case'portrait':default:return VisuMZ[_0x185927(0x39a)][_0x185927(0x408)][_0x185927(0x90a)](this);break;}},Scene_Battle[_0x588453(0x755)][_0x588453(0x474)]=function(){const _0x3da3d3=_0x588453,_0x87b8e2=this['battleLayoutStyle']();switch(_0x87b8e2){case'xp':case _0x3da3d3(0x418):return this[_0x3da3d3(0x7bd)]();break;case _0x3da3d3(0x469):return this[_0x3da3d3(0x252)]();break;case _0x3da3d3(0x880):case _0x3da3d3(0x70f):default:return this[_0x3da3d3(0x918)]();break;}},VisuMZ['BattleCore'][_0x588453(0x4a7)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x139)],Scene_Battle['prototype'][_0x588453(0x139)]=function(){const _0xe40277=_0x588453,_0x41de64=this[_0xe40277(0x80f)]();switch(_0x41de64){case'xp':case _0xe40277(0x418):return this[_0xe40277(0xac3)]();break;case _0xe40277(0x469):return this[_0xe40277(0x533)]();case'default':case _0xe40277(0x70f):default:return this[_0xe40277(0x360)]();break;}},Scene_Battle[_0x588453(0x755)]['partyCommandWindowRectDefaultStyle']=function(){const _0x315b81=_0x588453,_0x1484ae=VisuMZ['BattleCore'][_0x315b81(0x90d)][_0x315b81(0xac6)],_0x57e80a=_0x1484ae[_0x315b81(0x368)]||0xc0,_0x483233=this['windowAreaHeight'](),_0x378429=this['isRightInputMode']()?Graphics['boxWidth']-_0x57e80a:0x0,_0xcce6d=Graphics[_0x315b81(0x571)]-_0x483233;return new Rectangle(_0x378429,_0xcce6d,_0x57e80a,_0x483233);},Scene_Battle[_0x588453(0x755)]['actorCommandWindowRect']=function(){const _0x593100=_0x588453;return this[_0x593100(0x139)]();},VisuMZ['BattleCore'][_0x588453(0x15b)]=Scene_Battle[_0x588453(0x755)]['updateStatusWindowPosition'],Scene_Battle[_0x588453(0x755)][_0x588453(0x897)]=function(){const _0x12dc7b=_0x588453,_0x809f90=this['battleLayoutStyle']();switch(_0x809f90){case'xp':case _0x12dc7b(0x418):case _0x12dc7b(0x469):break;case _0x12dc7b(0x880):case _0x12dc7b(0x70f):default:VisuMZ[_0x12dc7b(0x39a)][_0x12dc7b(0x15b)][_0x12dc7b(0x90a)](this);break;}},VisuMZ[_0x588453(0x39a)][_0x588453(0x3d2)]=Scene_Battle[_0x588453(0x755)]['startActorSelection'],Scene_Battle[_0x588453(0x755)]['startActorSelection']=function(){const _0x30fea1=_0x588453;VisuMZ[_0x30fea1(0x39a)][_0x30fea1(0x3d2)][_0x30fea1(0x90a)](this),this[_0x30fea1(0x3f1)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x9a9)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x604)],Scene_Battle[_0x588453(0x755)][_0x588453(0x604)]=function(){const _0x424e43=_0x588453;VisuMZ['BattleCore'][_0x424e43(0x9a9)][_0x424e43(0x90a)](this),this[_0x424e43(0x62e)][_0x424e43(0x8ca)](),this[_0x424e43(0x3f1)]();},Scene_Battle[_0x588453(0x755)]['makeTargetSelectionMoreVisible']=function(){const _0x400956=_0x588453,_0x4d6752=this['battleLayoutStyle']();['xp',_0x400956(0x418),_0x400956(0x469)][_0x400956(0x51e)](_0x4d6752)&&this[_0x400956(0xa1e)][_0x400956(0x307)](),(_0x4d6752===_0x400956(0x469)||this[_0x400956(0x8ff)]())&&(this[_0x400956(0xa66)][_0x400956(0x307)](),this['_itemWindow']['close']());},VisuMZ[_0x588453(0x39a)]['Scene_Battle_onActorOk']=Scene_Battle[_0x588453(0x755)][_0x588453(0x72f)],Scene_Battle[_0x588453(0x755)][_0x588453(0x72f)]=function(){const _0x5d359d=_0x588453;VisuMZ[_0x5d359d(0x39a)][_0x5d359d(0xad9)][_0x5d359d(0x90a)](this),this[_0x5d359d(0x7d6)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x88b)]=function(){const _0x57fb32=_0x588453;return[_0x57fb32(0x246),'guard',_0x57fb32(0x477)][_0x57fb32(0x51e)](this['_actorCommandWindow'][_0x57fb32(0xac7)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0x88d)]=Scene_Battle['prototype']['onActorCancel'],Scene_Battle[_0x588453(0x755)][_0x588453(0xa59)]=function(){const _0x4e678f=_0x588453;this['isNonSubmenuCancel']()?(this[_0x4e678f(0x8e5)][_0x4e678f(0x8d0)](),this[_0x4e678f(0xa99)][_0x4e678f(0x8e9)](),this[_0x4e678f(0xa1e)][_0x4e678f(0x8a5)]()):VisuMZ['BattleCore']['Scene_Battle_onActorCancel']['call'](this),this[_0x4e678f(0x5ea)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x182)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x664)],Scene_Battle['prototype']['onEnemyOk']=function(){const _0x58aa3b=_0x588453;if(!this[_0x58aa3b(0x62e)]['enemy']()){this[_0x58aa3b(0x62e)][_0x58aa3b(0x8a5)]();return;}const _0x27b006=BattleManager[_0x58aa3b(0x5c7)]();_0x27b006[_0x58aa3b(0x106)](this['_enemyWindow'][_0x58aa3b(0xf1)]()),this[_0x58aa3b(0x62e)][_0x58aa3b(0x86b)](),VisuMZ[_0x58aa3b(0x39a)][_0x58aa3b(0x182)][_0x58aa3b(0x90a)](this),this[_0x58aa3b(0x7d6)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x82b)]=Scene_Battle['prototype'][_0x588453(0x2d9)],Scene_Battle[_0x588453(0x755)][_0x588453(0x2d9)]=function(){const _0x302dc7=_0x588453;this[_0x302dc7(0x88b)]()?(this[_0x302dc7(0x8e5)][_0x302dc7(0x8d0)](),this[_0x302dc7(0x62e)][_0x302dc7(0x8e9)](),this[_0x302dc7(0xa1e)][_0x302dc7(0x8a5)]()):VisuMZ['BattleCore'][_0x302dc7(0x82b)]['call'](this),this[_0x302dc7(0x5ea)](),this['_enemyWindow'][_0x302dc7(0x86b)]();},Scene_Battle[_0x588453(0x755)][_0x588453(0x7d6)]=function(){const _0x4d00af=_0x588453,_0x4baad5=this[_0x4d00af(0x80f)]();(_0x4baad5===_0x4d00af(0x469)||this[_0x4d00af(0x8ff)]())&&(this[_0x4d00af(0xa66)][_0x4d00af(0x5cf)](),this[_0x4d00af(0xa66)][_0x4d00af(0x3ef)]&&this['_skillWindow'][_0x4d00af(0x8d0)](),this[_0x4d00af(0x7a3)][_0x4d00af(0x5cf)](),this[_0x4d00af(0x7a3)][_0x4d00af(0x3ef)]&&this[_0x4d00af(0x7a3)]['show']());},Scene_Battle[_0x588453(0x755)][_0x588453(0x5ea)]=function(){const _0x2127e4=_0x588453,_0x4f9fef=this[_0x2127e4(0x80f)]();['xp',_0x2127e4(0x418),_0x2127e4(0x469)]['includes'](_0x4f9fef)&&this[_0x2127e4(0xa1e)][_0x2127e4(0x5cf)](),this[_0x2127e4(0x7d6)]();},Scene_Battle[_0x588453(0x755)]['statusWindowRectDefaultStyle']=function(){const _0x244c2d=_0x588453,_0x53e799=VisuMZ[_0x244c2d(0x39a)]['Settings'][_0x244c2d(0xac6)],_0x4c8360=Window_BattleStatus[_0x244c2d(0x755)][_0x244c2d(0x566)](),_0x5a0e20=Graphics[_0x244c2d(0x586)]-(_0x53e799[_0x244c2d(0x368)]||0xc0),_0xe41e31=this[_0x244c2d(0x3f9)]()+_0x4c8360,_0x40e676=this[_0x244c2d(0x936)]()?0x0:Graphics[_0x244c2d(0x586)]-_0x5a0e20,_0x2202ad=Graphics['boxHeight']-_0xe41e31+_0x4c8360;return new Rectangle(_0x40e676,_0x2202ad,_0x5a0e20,_0xe41e31);},Scene_Battle[_0x588453(0x755)][_0x588453(0x7bd)]=function(){const _0x529122=_0x588453,_0xe6f953=Window_BattleStatus[_0x529122(0x755)][_0x529122(0x566)](),_0x57c5db=Graphics[_0x529122(0x586)],_0x1056de=this[_0x529122(0x3f9)]()+_0xe6f953,_0x3a5a02=0x0,_0x3d30df=Graphics[_0x529122(0x571)]-_0x1056de+_0xe6f953;return new Rectangle(_0x3a5a02,_0x3d30df,_0x57c5db,_0x1056de);},Scene_Battle[_0x588453(0x755)]['partyCommandWindowRectXPStyle']=function(){const _0x4f7d19=_0x588453,_0x3c269a=Graphics[_0x4f7d19(0x586)]/0x2,_0x2e6672=this[_0x4f7d19(0x63d)](VisuMZ[_0x4f7d19(0x39a)][_0x4f7d19(0x90d)][_0x4f7d19(0xac6)][_0x4f7d19(0x3db)],!![]),_0x2ae7f6=Math[_0x4f7d19(0x422)]((Graphics[_0x4f7d19(0x586)]-_0x3c269a)/0x2),_0x27314f=Graphics[_0x4f7d19(0x571)]-_0x2e6672-this[_0x4f7d19(0x7bd)]()[_0x4f7d19(0x4ba)];return new Rectangle(_0x2ae7f6,_0x27314f,_0x3c269a,_0x2e6672);},Scene_Battle[_0x588453(0x755)][_0x588453(0x62c)]=function(){const _0x5e6e79=_0x588453,_0x1c35f1=Graphics[_0x5e6e79(0x3ad)],_0x2f1b13=Math[_0x5e6e79(0x422)]((Graphics['boxWidth']-_0x1c35f1)/0x2),_0x116a20=this[_0x5e6e79(0x325)](),_0x3c54d6=(Graphics[_0x5e6e79(0x4ba)]-Graphics[_0x5e6e79(0x571)])/-0x2;return new Rectangle(_0x2f1b13,_0x3c54d6,_0x1c35f1,_0x116a20);},Scene_Battle['prototype']['statusWindowRectBorderStyle']=function(){const _0x50209a=_0x588453,_0x4d9a68=Graphics['width'],_0x2fba7a=Math['round']((Graphics[_0x50209a(0x586)]-_0x4d9a68)/0x2),_0x4e590f=this[_0x50209a(0x63d)](0x4,!![]),_0x4af8c4=Graphics[_0x50209a(0x571)]-_0x4e590f+(Graphics[_0x50209a(0x4ba)]-Graphics[_0x50209a(0x571)])/0x2;return new Rectangle(_0x2fba7a,_0x4af8c4,_0x4d9a68,_0x4e590f);},Scene_Battle[_0x588453(0x755)][_0x588453(0x533)]=function(){const _0x116d45=_0x588453,_0x3ed85e=Math[_0x116d45(0x10a)](Graphics[_0x116d45(0x3ad)]/0x3),_0x3d7294=this[_0x116d45(0x936)]()?(Graphics['width']+Graphics[_0x116d45(0x586)])/0x2-_0x3ed85e:(Graphics[_0x116d45(0x3ad)]-Graphics[_0x116d45(0x586)])/-0x2,_0x43de18=this[_0x116d45(0x62c)](),_0x22cabb=_0x43de18['y']+_0x43de18['height'],_0x5404fd=this['statusWindowRectBorderStyle'](),_0x146572=_0x5404fd['y']-_0x22cabb;return new Rectangle(_0x3d7294,_0x22cabb,_0x3ed85e,_0x146572);},Scene_Battle['prototype'][_0x588453(0x223)]=function(){const _0x14c288=_0x588453,_0x45f87f=Math[_0x14c288(0x935)](Graphics['width']/0x3),_0x4c0444=Math[_0x14c288(0x422)]((Graphics[_0x14c288(0x586)]-_0x45f87f)/0x2),_0x7b63b8=this[_0x14c288(0x533)](),_0xd54963=_0x7b63b8['y'],_0x3b542a=_0x7b63b8['height'];return new Rectangle(_0x4c0444,_0xd54963,_0x45f87f,_0x3b542a);},Scene_Battle[_0x588453(0x755)]['repositionCancelButtonBorderStyle']=function(){const _0x1d1478=_0x588453;this[_0x1d1478(0xa15)]['y']=this[_0x1d1478(0x2bf)]['y']+this[_0x1d1478(0x2bf)][_0x1d1478(0x4ba)],this[_0x1d1478(0x936)]()?this['battleLayoutStyle']()===_0x1d1478(0x469)?this[_0x1d1478(0xa15)]['x']=0x8:this['_cancelButton']['x']=-this[_0x1d1478(0xa15)][_0x1d1478(0x3ad)]-0x4:this[_0x1d1478(0xa15)]['x']=Graphics[_0x1d1478(0x3ad)]-(Graphics['width']-Graphics[_0x1d1478(0x586)])/0x2-this[_0x1d1478(0xa15)][_0x1d1478(0x3ad)]-0x4;},VisuMZ[_0x588453(0x39a)][_0x588453(0x756)]=Scene_Battle[_0x588453(0x755)][_0x588453(0x217)],Scene_Battle[_0x588453(0x755)][_0x588453(0x217)]=function(){const _0x339340=_0x588453;if(this['battleLayoutStyle']()==='border')return this[_0x339340(0x223)]();else return this['isSkillItemWindowsMiddle']()?this[_0x339340(0x3a6)]():VisuMZ[_0x339340(0x39a)][_0x339340(0x756)][_0x339340(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x9e0)]=Scene_Battle[_0x588453(0x755)]['itemWindowRect'],Scene_Battle[_0x588453(0x755)]['itemWindowRect']=function(){const _0x23d4f0=_0x588453;if(this[_0x23d4f0(0x80f)]()===_0x23d4f0(0x469))return this[_0x23d4f0(0x223)]();else return this[_0x23d4f0(0x8ff)]()?this[_0x23d4f0(0x3a6)]():VisuMZ['BattleCore']['Scene_Battle_itemWindowRect'][_0x23d4f0(0x90a)](this);},Scene_Battle['prototype'][_0x588453(0x8ff)]=function(){const _0x42d23e=_0x588453;return VisuMZ[_0x42d23e(0x39a)][_0x42d23e(0x90d)][_0x42d23e(0xac6)][_0x42d23e(0x633)];},Scene_Battle[_0x588453(0x755)][_0x588453(0x3a6)]=function(){const _0x49ce3c=_0x588453,_0x74e422=Sprite_Button['prototype'][_0x49ce3c(0x400)]()*0x2+0x4;let _0x1c5342=Graphics['boxWidth']-_0x74e422;Imported[_0x49ce3c(0xe0)]&&SceneManager[_0x49ce3c(0x567)]()&&(_0x1c5342+=_0x74e422);const _0xa3852c=this[_0x49ce3c(0x9d1)](),_0x5b4f5f=Graphics[_0x49ce3c(0x571)]-_0xa3852c-this[_0x49ce3c(0x474)]()['height']+Window_BattleStatus['prototype'][_0x49ce3c(0x566)](),_0x15b9b6=0x0;return new Rectangle(_0x15b9b6,_0xa3852c,_0x1c5342,_0x5b4f5f);},Scene_Battle[_0x588453(0x755)]['createEnemyNameContainer']=function(){const _0x533e8e=_0x588453;if(!VisuMZ[_0x533e8e(0x39a)][_0x533e8e(0x90d)][_0x533e8e(0x732)][_0x533e8e(0x6ff)])return;this[_0x533e8e(0x21b)]=new Sprite(),this[_0x533e8e(0x21b)]['x']=this['_windowLayer']['x'],this[_0x533e8e(0x21b)]['y']=this['_windowLayer']['y'];const _0x3b2e67=this[_0x533e8e(0x816)][_0x533e8e(0x512)](this[_0x533e8e(0x49e)]);this[_0x533e8e(0x57d)](this['_enemyNameContainer'],_0x3b2e67);for(let _0x2df456=0x0;_0x2df456<0x8;_0x2df456++){const _0x5d8ab8=new Window_EnemyName(_0x2df456);this[_0x533e8e(0x21b)]['addChild'](_0x5d8ab8);}},Sprite_Battler[_0x588453(0xa72)]=VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x848)][_0x588453(0x421)],VisuMZ[_0x588453(0x39a)][_0x588453(0x853)]=Sprite_Battler['prototype'][_0x588453(0x423)],Sprite_Battler[_0x588453(0x755)]['initMembers']=function(){const _0x54ec44=_0x588453;VisuMZ['BattleCore'][_0x54ec44(0x853)][_0x54ec44(0x90a)](this),this[_0x54ec44(0xee)]();if(this[_0x54ec44(0x671)]===Sprite_Enemy)this[_0x54ec44(0x74f)]();this['createDistortionSprite']();},Sprite_Battler[_0x588453(0x755)][_0x588453(0xee)]=function(){const _0x316d69=_0x588453;this[_0x316d69(0x494)]=0x0,this[_0x316d69(0xaba)]=0x0,this[_0x316d69(0xa03)]=0x0,this[_0x316d69(0x5c1)]=0x0,this[_0x316d69(0x495)]=0x0,this[_0x316d69(0x91f)]=0x0,this[_0x316d69(0xa26)]='Linear',this[_0x316d69(0x32b)]=0x0,this[_0x316d69(0x4dd)]=0x0,this['_jumpDuration']=0x0,this[_0x316d69(0x2ea)]=0x0,this[_0x316d69(0x814)]=0xff,this[_0x316d69(0x63b)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x316d69(0x1fe)]=_0x316d69(0x7f1),this['_currentAngle']=0x0,this[_0x316d69(0x67d)]=0x0,this[_0x316d69(0x126)]=0x0,this[_0x316d69(0x859)]=0x0,this[_0x316d69(0x819)]='Linear',this[_0x316d69(0x1c3)]=!![],this[_0x316d69(0x100)]=0x0,this[_0x316d69(0x97a)]=0x0,this[_0x316d69(0x8be)]=0x0,this[_0x316d69(0x30d)]=0x0,this[_0x316d69(0x9f2)]=0x0,this[_0x316d69(0x88a)]=0x0,this[_0x316d69(0x9f9)]='Linear',this[_0x316d69(0x251)]=0x1,this[_0x316d69(0xa69)]=0x1,this[_0x316d69(0x7ad)]=0x1,this[_0x316d69(0x42d)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this[_0x316d69(0x81c)]=_0x316d69(0x7f1),this[_0x316d69(0x825)]=0x1,this[_0x316d69(0x5c0)]=0x0,this['_targetHomeY']=0x0,this[_0x316d69(0x6ba)]=0x0,this[_0x316d69(0x1ed)]=0x0,this[_0x316d69(0x7a7)]=_0x316d69(0x7f1),this['_shakeFlinchDuration']=0x0,this[_0x316d69(0x958)]=0x0;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x74f)]=function(){const _0x416ef7=_0x588453;this[_0x416ef7(0x6f9)]=new Sprite(),this[_0x416ef7(0x6f9)][_0x416ef7(0x590)]=ImageManager[_0x416ef7(0x90e)](_0x416ef7(0x6d8)),this[_0x416ef7(0x6f9)]['bitmap'][_0x416ef7(0x89c)]=VisuMZ[_0x416ef7(0x39a)]['Settings']['Actor']['SmoothImage'],this[_0x416ef7(0x6f9)][_0x416ef7(0x4db)]['x']=0.5,this[_0x416ef7(0x6f9)]['anchor']['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x416ef7(0x6f9)]['visible']=![],this[_0x416ef7(0x348)](this[_0x416ef7(0x6f9)]);},Sprite_Battler['prototype'][_0x588453(0x908)]=function(){const _0x487369=_0x588453;this[_0x487369(0x678)]=new Sprite(),this['_distortionSprite'][_0x487369(0x4db)]['x']=0.5,this['_distortionSprite'][_0x487369(0x4db)]['y']=0.5,this[_0x487369(0x348)](this['_distortionSprite']);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x668)]=function(){const _0x3980f2=_0x588453;if(this[_0x3980f2(0x331)]&&this[_0x3980f2(0x331)]()){Sprite[_0x3980f2(0x755)][_0x3980f2(0x668)][_0x3980f2(0x90a)](this);return;}const _0x462e86=this[_0x3980f2(0x678)];if(!_0x462e86)return;!_0x462e86['_colorFilter']&&_0x462e86[_0x3980f2(0x9a6)](),_0x462e86[_0x3980f2(0x634)]['setHue'](this[_0x3980f2(0x476)]),_0x462e86[_0x3980f2(0x634)][_0x3980f2(0x611)](this[_0x3980f2(0x642)]),_0x462e86['_colorFilter'][_0x3980f2(0x532)](this['_colorTone']);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x60d)]=function(){const _0x1a178d=_0x588453;if(!this['_distortionSprite'])return;if(this[_0x1a178d(0x6f9)]){const _0x1f93e4=this['getChildIndex'](this[_0x1a178d(0x678)]);this[_0x1a178d(0x57d)](this[_0x1a178d(0x6f9)],_0x1f93e4),this[_0x1a178d(0x827)]();}this[_0x1a178d(0x166)]&&this[_0x1a178d(0x678)][_0x1a178d(0x348)](this[_0x1a178d(0x166)]),this[_0x1a178d(0x6b3)]&&this[_0x1a178d(0x678)][_0x1a178d(0x348)](this[_0x1a178d(0x6b3)]),this[_0x1a178d(0x3d0)]&&this[_0x1a178d(0x678)]['addChild'](this[_0x1a178d(0x3d0)]),this[_0x1a178d(0x596)]&&this[_0x1a178d(0x678)][_0x1a178d(0x348)](this[_0x1a178d(0x596)]),this['_dragonbonesSpriteContainer']&&this[_0x1a178d(0x678)]['addChild'](this[_0x1a178d(0xfd)]);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x827)]=function(){const _0x10899e=_0x588453;if(!this['_shadowSprite'])return;if(this[_0x10899e(0xab2)]&&this[_0x10899e(0xab2)][_0x10899e(0x371)]()){const _0x16b3bb=this[_0x10899e(0x6f9)][_0x10899e(0x590)];this[_0x10899e(0x6f9)][_0x10899e(0x507)](0x0,0x0,_0x16b3bb[_0x10899e(0x3ad)],_0x16b3bb[_0x10899e(0x4ba)]);}else this[_0x10899e(0x6f9)][_0x10899e(0x507)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x9c8)]=function(){const _0x2c11bd=_0x588453;return SceneManager['isSceneBattle']()?SceneManager[_0x2c11bd(0x39b)]['_spriteset'][_0x2c11bd(0x37c)]:this[_0x2c11bd(0x484)];},Sprite_Battler[_0x588453(0x755)][_0x588453(0xa62)]=function(_0x29661d,_0x179c18){const _0x1f205e=_0x588453;if(!this['_battler'][_0x1f205e(0xa14)]())return;if(BattleManager[_0x1f205e(0x240)]())return;const _0x5c1cbd=VisuMZ['BattleCore'][_0x1f205e(0x90d)][_0x1f205e(0x69a)],_0x19fa2a=new Sprite_Damage();_0x19fa2a[_0x1f205e(0x51d)]=_0x5c1cbd['PopupDuration'],this[_0x1f205e(0x999)](_0x19fa2a),_0x19fa2a[_0x1f205e(0xa62)](_0x29661d,_0x179c18),this[_0x1f205e(0x413)](_0x19fa2a);},Sprite_Battler['prototype'][_0x588453(0x969)]=function(_0x33aa4f,_0x21c685,_0x18e757){const _0x42a259=_0x588453;if(!this['_battler']['isSpriteVisible']())return;if(BattleManager[_0x42a259(0x240)]())return;const _0x4122fc=VisuMZ['BattleCore'][_0x42a259(0x90d)][_0x42a259(0x69a)],_0x13b105=new Sprite_Damage();_0x13b105[_0x42a259(0x51d)]=_0x4122fc[_0x42a259(0x948)],this[_0x42a259(0x999)](_0x13b105),_0x13b105[_0x42a259(0x969)](_0x33aa4f,_0x21c685,_0x18e757),this[_0x42a259(0x413)](_0x13b105);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x2eb)]=function(){const _0x1b64c1=_0x588453;if(!this[_0x1b64c1(0xab2)][_0x1b64c1(0x6c1)]())return;while(this[_0x1b64c1(0xab2)]['isDamagePopupRequested']()){this[_0x1b64c1(0xab2)][_0x1b64c1(0xa14)]()&&this[_0x1b64c1(0x737)]();}this[_0x1b64c1(0xab2)][_0x1b64c1(0x71d)](),this[_0x1b64c1(0xab2)][_0x1b64c1(0x9f8)]();},Sprite_Battler['prototype'][_0x588453(0x737)]=function(){const _0x5a87aa=_0x588453;if(BattleManager[_0x5a87aa(0x240)]())return;const _0x2eaad1=VisuMZ['BattleCore'][_0x5a87aa(0x90d)]['Damage'],_0x39418d=new Sprite_Damage();_0x39418d[_0x5a87aa(0x51d)]=_0x2eaad1[_0x5a87aa(0x948)],this[_0x5a87aa(0x999)](_0x39418d),_0x39418d[_0x5a87aa(0x68d)](this[_0x5a87aa(0xab2)]),_0x39418d[_0x5a87aa(0x25d)](this['_battler']),this['addDamageSprite'](_0x39418d);},Sprite_Battler['prototype'][_0x588453(0x413)]=function(_0x54df88){const _0x964268=_0x588453;this[_0x964268(0xaaf)]['push'](_0x54df88);if(this[_0x964268(0x699)]()){const _0x4aff7d=SceneManager['_scene']['_statusWindow'];if(_0x4aff7d)_0x4aff7d[_0x964268(0x413)](_0x54df88,this[_0x964268(0xab2)]);}else{this[_0x964268(0x9c8)]()[_0x964268(0x348)](_0x54df88);if(SceneManager[_0x964268(0x9b6)]())_0x54df88[_0x964268(0x30a)]['x']=-0x1;}},Sprite_Battler[_0x588453(0x755)][_0x588453(0x699)]=function(){const _0x2c538a=_0x588453;return!$gameSystem[_0x2c538a(0x879)]()&&this[_0x2c538a(0xab2)]&&this[_0x2c538a(0xab2)][_0x2c538a(0xa52)]();return!$gameSystem[_0x2c538a(0x879)]()&&this[_0x2c538a(0xab2)]&&this[_0x2c538a(0xab2)][_0x2c538a(0xa52)]()&&Window_BattleStatus[_0x2c538a(0x755)][_0x2c538a(0x80f)]()===_0x2c538a(0x418);},Sprite_Battler[_0x588453(0x755)]['sortDamageSprites']=function(_0x7a1eda){const _0x46c43b=_0x588453;this[_0x46c43b(0x913)](_0x7a1eda,!![]);const _0x48c0bd=VisuMZ[_0x46c43b(0x39a)][_0x46c43b(0x90d)][_0x46c43b(0x69a)],_0x191d7c=SceneManager[_0x46c43b(0x9b6)]()?-0x1:0x1;if(_0x48c0bd['NewPopupBottom'])for(const _0x44e934 of this[_0x46c43b(0xaaf)]){_0x44e934['x']+=_0x48c0bd[_0x46c43b(0xa27)]*_0x191d7c,_0x44e934['y']+=_0x48c0bd[_0x46c43b(0xad0)];}else{const _0x302713=this['_damages'][this['_damages'][_0x46c43b(0x6e3)]-0x1];_0x302713&&(_0x7a1eda['x']=_0x302713['x']+_0x48c0bd['PopupShiftX']*_0x191d7c,_0x7a1eda['y']=_0x302713['y']+_0x48c0bd['PopupShiftY']);}},Sprite_Battler['prototype'][_0x588453(0x913)]=function(_0x5c3637,_0x268bf8){const _0x293df9=_0x588453,_0x5ef2d5=SceneManager[_0x293df9(0x9b6)]()?-0x1:0x1;let _0x407357=this['_baseX'];_0x407357+=this[_0x293df9(0x410)]();let _0x46b858=this[_0x293df9(0xaba)];const _0x3945a5=this[_0x293df9(0x678)]['scale']['y'];_0x46b858+=this[_0x293df9(0x9a8)]();const _0x312901=SceneManager[_0x293df9(0x39b)][_0x293df9(0x8e5)];if(_0x312901&&this['parent']===_0x312901){_0x407357+=_0x312901['x']-this[_0x293df9(0x197)]();const _0x5426b0=_0x312901[_0x293df9(0xaa9)]()*0x3/0x4;_0x46b858=_0x312901['y']+_0x5426b0,_0x46b858=Math['min'](_0x46b858,_0x312901['y']+this['y']-this['height']+_0x5426b0);}_0x5c3637['x']=Math[_0x293df9(0x422)](_0x407357+this[_0x293df9(0x197)]()*_0x5ef2d5),_0x5c3637['y']=Math[_0x293df9(0x422)](_0x46b858+this[_0x293df9(0x129)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0x2f0)]=Sprite_Battler[_0x588453(0x755)][_0x588453(0x197)],Sprite_Battler['prototype']['damageOffsetX']=function(){const _0xa8df11=_0x588453;let _0x1d6a5f=VisuMZ[_0xa8df11(0x39a)][_0xa8df11(0x2f0)][_0xa8df11(0x90a)](this),_0x5ee356=VisuMZ[_0xa8df11(0x39a)][_0xa8df11(0x90d)][_0xa8df11(0x69a)]['PopupOffsetX']||0x0;return Math[_0xa8df11(0x422)](_0x1d6a5f+_0x5ee356);},VisuMZ[_0x588453(0x39a)][_0x588453(0x184)]=Sprite_Battler[_0x588453(0x755)][_0x588453(0x129)],Sprite_Battler[_0x588453(0x755)][_0x588453(0x129)]=function(){const _0x2aa811=_0x588453;let _0x1fbe1f=VisuMZ['BattleCore'][_0x2aa811(0x184)][_0x2aa811(0x90a)](this);switch(VisuMZ[_0x2aa811(0x39a)][_0x2aa811(0x90d)]['Damage']['PopupPosition']){case'head':_0x1fbe1f-=this[_0x2aa811(0x4ba)]*this['scale']['y'];break;case'center':_0x1fbe1f-=this[_0x2aa811(0x4ba)]*this['scale']['y']*0.5;break;}let _0x795fa5=VisuMZ[_0x2aa811(0x39a)][_0x2aa811(0x90d)][_0x2aa811(0x69a)][_0x2aa811(0xae5)]||0x0;return Math[_0x2aa811(0x422)](_0x1fbe1f+_0x795fa5);},Sprite_Actor[_0x588453(0x755)][_0x588453(0x197)]=function(){const _0x1c1917=_0x588453;return Sprite_Battler['prototype'][_0x1c1917(0x197)]['call'](this);},Sprite_Actor['prototype'][_0x588453(0x129)]=function(){const _0x34f4d1=_0x588453;return Sprite_Battler['prototype'][_0x34f4d1(0x129)][_0x34f4d1(0x90a)](this);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x823)]=function(_0x65ec6b){const _0x2646b1=_0x588453;this[_0x2646b1(0x699)]()?SceneManager[_0x2646b1(0x39b)][_0x2646b1(0x8e5)][_0x2646b1(0x3a2)](_0x65ec6b):(this['damageContainer']()[_0x2646b1(0x781)](_0x65ec6b),this[_0x2646b1(0xaaf)][_0x2646b1(0xaee)](_0x65ec6b),_0x65ec6b[_0x2646b1(0x9b9)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0xa32)]=Sprite_Battler[_0x588453(0x755)][_0x588453(0x559)],Sprite_Battler[_0x588453(0x755)][_0x588453(0x559)]=function(_0x2e7608,_0x470b8d){const _0x13fca1=_0x588453,_0x5d7352=VisuMZ[_0x13fca1(0x39a)][_0x13fca1(0x90d)];if(this[_0x13fca1(0x671)]===Sprite_Actor)_0x2e7608+=_0x5d7352[_0x13fca1(0x848)][_0x13fca1(0x4f7)]||0x0,_0x470b8d+=_0x5d7352[_0x13fca1(0x848)][_0x13fca1(0xcb)]||0x0;else this[_0x13fca1(0x671)]===Sprite_Enemy&&(_0x2e7608+=_0x5d7352[_0x13fca1(0x732)][_0x13fca1(0x4f7)]||0x0,_0x470b8d+=_0x5d7352[_0x13fca1(0x732)][_0x13fca1(0xcb)]||0x0);this[_0x13fca1(0xab2)]&&(_0x2e7608=this[_0x13fca1(0xab2)][_0x13fca1(0x9df)]??_0x2e7608,_0x470b8d=this[_0x13fca1(0xab2)][_0x13fca1(0x81a)]??_0x470b8d),VisuMZ[_0x13fca1(0x39a)][_0x13fca1(0xa32)][_0x13fca1(0x90a)](this,_0x2e7608,_0x470b8d),this[_0x13fca1(0x5c0)]=this[_0x13fca1(0x482)],this[_0x13fca1(0x518)]=this['_homeY'],this[_0x13fca1(0x6ba)]=0x0,this['_homeWholeDuration']=0x0,this[_0x13fca1(0x7a7)]=_0x13fca1(0x7f1);},VisuMZ[_0x588453(0x39a)][_0x588453(0x522)]=Sprite_Battler['prototype']['update'],Sprite_Battler['prototype']['update']=function(){const _0x2dfaf0=_0x588453;VisuMZ[_0x2dfaf0(0x39a)][_0x2dfaf0(0x522)][_0x2dfaf0(0x90a)](this),!this['_battler']&&this[_0x2dfaf0(0x791)]&&(this['_hpGaugeSprite'][_0x2dfaf0(0x536)]=![]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x379)]=Sprite_Battler[_0x588453(0x755)]['updateMain'],Sprite_Battler[_0x588453(0x755)][_0x588453(0x177)]=function(){const _0x47d9ab=_0x588453;this[_0x47d9ab(0x176)](),this[_0x47d9ab(0x87d)](),this[_0x47d9ab(0x46c)](),this[_0x47d9ab(0x52e)](),VisuMZ[_0x47d9ab(0x39a)][_0x47d9ab(0x379)]['call'](this),this['updateHpGaugePosition'](),this['updateShakeFlinch']();if(this['constructor']===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x588453(0x39a)][_0x588453(0x886)]=Sprite_Battler[_0x588453(0x755)][_0x588453(0xa81)],Sprite_Battler['prototype'][_0x588453(0xa81)]=function(){const _0x5923f4=_0x588453;this['updateHomeMove'](),VisuMZ[_0x5923f4(0x39a)][_0x5923f4(0x886)][_0x5923f4(0x90a)](this),this[_0x5923f4(0x75a)](),this[_0x5923f4(0x890)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x8e3)]=function(){const _0x11d829=_0x588453,_0x5d494f=this[_0x11d829(0x864)]();if(this[_0x11d829(0xab2)][_0x11d829(0x676)]())this[_0x11d829(0xaa6)]++,Graphics[_0x11d829(0x8a6)]%0x1e<0xf?_0x5d494f[_0x11d829(0x611)]([0xff,0xff,0xff,0x40]):_0x5d494f[_0x11d829(0x611)]([0x0,0x0,0x0,0x0]);else this['_selectionEffectCount']>0x0&&(this['_selectionEffectCount']=0x0,_0x5d494f[_0x11d829(0x611)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x588453(0x755)][_0x588453(0x583)]=function(_0x7d4680,_0x4d86e3){const _0x1f4aba=_0x588453,_0x6de970=VisuMZ[_0x1f4aba(0x39a)][_0x1f4aba(0x90d)];if(this[_0x1f4aba(0x671)]===Sprite_Actor)_0x7d4680+=_0x6de970[_0x1f4aba(0x848)][_0x1f4aba(0x4f7)]||0x0,_0x4d86e3+=_0x6de970[_0x1f4aba(0x848)]['OffsetY']||0x0;else this[_0x1f4aba(0x671)]===Sprite_Enemy&&(_0x7d4680+=_0x6de970[_0x1f4aba(0x732)][_0x1f4aba(0x4f7)]||0x0,_0x4d86e3+=_0x6de970['Enemy'][_0x1f4aba(0xcb)]||0x0);const _0x2c273f=_0x7d4680-this['_homeX'],_0x5f94ea=_0x4d86e3-this[_0x1f4aba(0x628)];this[_0x1f4aba(0x482)]=_0x7d4680,this[_0x1f4aba(0x628)]=_0x4d86e3,this[_0x1f4aba(0x85f)]-=_0x2c273f,this['_offsetY']-=_0x5f94ea,this[_0x1f4aba(0x153)]-=_0x2c273f,this[_0x1f4aba(0x508)]-=_0x5f94ea,this[_0x1f4aba(0xa81)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x556)]=function(_0x4d0ffd,_0x4bebbd,_0x1e8380,_0x197063){const _0x34f140=_0x588453,_0x2fd051=VisuMZ['BattleCore']['Settings'];if(this['constructor']===Sprite_Actor)_0x4d0ffd+=_0x2fd051[_0x34f140(0x848)][_0x34f140(0x4f7)]||0x0,_0x4bebbd+=_0x2fd051[_0x34f140(0x848)][_0x34f140(0xcb)]||0x0;else this[_0x34f140(0x671)]===Sprite_Enemy&&(_0x4d0ffd+=_0x2fd051[_0x34f140(0x732)][_0x34f140(0x4f7)]||0x0,_0x4bebbd+=_0x2fd051[_0x34f140(0x732)]['OffsetY']||0x0);(this[_0x34f140(0x5c0)]!==_0x4d0ffd||this[_0x34f140(0x518)]!==_0x4bebbd)&&(this[_0x34f140(0x5c0)]=_0x4d0ffd,this[_0x34f140(0x518)]=_0x4bebbd,this[_0x34f140(0x6ba)]=_0x1e8380,this[_0x34f140(0x1ed)]=_0x1e8380,this[_0x34f140(0x7a7)]=_0x197063,_0x1e8380<=0x0&&this[_0x34f140(0x233)]());},Sprite_Battler['prototype'][_0x588453(0x284)]=function(){const _0x5e8c90=_0x588453;if(this[_0x5e8c90(0x6ba)]<=0x0)return;const _0x51b74b=this[_0x5e8c90(0x6ba)],_0x385ea8=this['_homeWholeDuration'],_0x3afdf3=this[_0x5e8c90(0x7a7)];Imported[_0x5e8c90(0xe0)]?(this[_0x5e8c90(0x482)]=this['applyEasing'](this[_0x5e8c90(0x482)],this[_0x5e8c90(0x5c0)],_0x51b74b,_0x385ea8,_0x3afdf3),this[_0x5e8c90(0x628)]=this[_0x5e8c90(0xfb)](this[_0x5e8c90(0x628)],this[_0x5e8c90(0x518)],_0x51b74b,_0x385ea8,_0x3afdf3)):(this['_homeX']=(this['_homeX']*(_0x51b74b-0x1)+this[_0x5e8c90(0x5c0)])/_0x51b74b,this[_0x5e8c90(0x628)]=(this[_0x5e8c90(0x628)]*(_0x51b74b-0x1)+this[_0x5e8c90(0x518)])/_0x51b74b);this[_0x5e8c90(0x6ba)]--;if(this['_homeDuration']<=0x0)this['onHomeMoveEnd']();},Sprite_Battler[_0x588453(0x755)]['onHomeMoveEnd']=function(){const _0x1810e0=_0x588453;this[_0x1810e0(0x482)]=this[_0x1810e0(0x5c0)],this[_0x1810e0(0x628)]=this[_0x1810e0(0x518)];},Sprite_Battler[_0x588453(0x755)][_0x588453(0x75a)]=function(){const _0x4c586f=_0x588453;this[_0x4c586f(0x494)]=this['x'],this[_0x4c586f(0xaba)]=this['y'],this[_0x4c586f(0x4a4)](),this[_0x4c586f(0x168)](),this['x']+=this[_0x4c586f(0x410)](),this['y']+=this[_0x4c586f(0x9a8)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x4c586f(0x10a)](this['x']),this['y']=Math[_0x4c586f(0x10a)](this['y']);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x410)]=function(){let _0x203cfb=0x0;return _0x203cfb;},Sprite_Battler['prototype'][_0x588453(0x9a8)]=function(){const _0x2fd054=_0x588453;let _0x35802f=0x0;return this[_0x2fd054(0xab2)]&&!this[_0x2fd054(0xab2)][_0x2fd054(0xa77)]()&&(_0x35802f-=this[_0x2fd054(0xa03)],_0x35802f-=this[_0x2fd054(0x32b)]),_0x35802f;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x94b)]=function(){const _0x550bbd=_0x588453;let _0x50919f=0x0;if(this[_0x550bbd(0x678)]&&this[_0x550bbd(0x671)]!==Sprite_SvEnemy){const _0x38c6b7=this[_0x550bbd(0x678)]['scale']['y'];_0x50919f-=(_0x38c6b7-0x1)*this[_0x550bbd(0x4ba)];}return _0x50919f;},Sprite_Battler[_0x588453(0x755)]['updateFlip']=function(){const _0x5eb005=_0x588453,_0x11cd02=this[_0x5eb005(0xab2)]&&this[_0x5eb005(0xab2)][_0x5eb005(0x41f)]();this['_flipScaleX']=(_0x11cd02?-0x1:0x1)*Math[_0x5eb005(0x201)](this[_0x5eb005(0x30a)]['x']);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x754)]=function(_0x57eae9,_0x170e0c,_0x273faf){const _0x274c7a=_0x588453;if(!this[_0x274c7a(0x6a3)]())return;if(this[_0x274c7a(0x5c1)]===_0x57eae9)return;this[_0x274c7a(0x5c1)]=_0x57eae9,this[_0x274c7a(0x495)]=_0x170e0c,this[_0x274c7a(0x91f)]=_0x170e0c,this[_0x274c7a(0xa26)]=_0x273faf||'Linear';if(_0x170e0c<=0x0)this[_0x274c7a(0xa03)]=_0x57eae9;},Sprite_Battler['prototype'][_0x588453(0x4a4)]=function(){const _0x609e3=_0x588453;if(this[_0x609e3(0x495)]<=0x0)return;const _0xe1034c=this[_0x609e3(0x495)],_0xfe3bc5=this[_0x609e3(0x91f)],_0x8a55d4=this[_0x609e3(0xa26)];Imported['VisuMZ_0_CoreEngine']?this['_floatHeight']=this[_0x609e3(0xfb)](this[_0x609e3(0xa03)],this['_targetFloatHeight'],_0xe1034c,_0xfe3bc5,_0x8a55d4):this[_0x609e3(0xa03)]=(this[_0x609e3(0xa03)]*(_0xe1034c-0x1)+this[_0x609e3(0x5c1)])/_0xe1034c;this[_0x609e3(0x495)]--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x588453(0x755)]['onFloatEnd']=function(){const _0x39a708=_0x588453;this[_0x39a708(0xa03)]=this['_targetFloatHeight'];},Sprite_Battler['prototype'][_0x588453(0x20f)]=function(){const _0xc73905=_0x588453;return this[_0xc73905(0x495)]>0x0;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x2a1)]=function(_0x15c8d5,_0x180405){const _0x359082=_0x588453;if(!this[_0x359082(0x6a3)]())return;if(_0x180405<=0x0)return;this[_0x359082(0x4dd)]=_0x15c8d5,this[_0x359082(0x504)]=_0x180405,this[_0x359082(0x2ea)]=_0x180405;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x168)]=function(){const _0xd7240a=_0x588453;if(this[_0xd7240a(0x504)]<=0x0)return;const _0x5b1f3e=this[_0xd7240a(0x2ea)]-this[_0xd7240a(0x504)],_0x7105ef=this['_jumpWholeDuration']/0x2,_0x12e75e=this['_jumpMaxHeight'],_0x3acae1=-_0x12e75e/Math['pow'](_0x7105ef,0x2);this['_jumpHeight']=_0x3acae1*Math[_0xd7240a(0x4e9)](_0x5b1f3e-_0x7105ef,0x2)+_0x12e75e,this[_0xd7240a(0x504)]--;if(this[_0xd7240a(0x504)]<=0x0)return this[_0xd7240a(0x4b2)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x4b2)]=function(){const _0x56d1e3=_0x588453;this[_0x56d1e3(0x32b)]=0x0;},Sprite_Battler[_0x588453(0x755)]['isJumping']=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x588453(0x755)][_0x588453(0xa21)]=function(_0x396884,_0x26de91,_0x1a4c15){const _0x5b1028=_0x588453;if(this[_0x5b1028(0x814)]===_0x396884)return;this['_targetOpacity']=_0x396884,this['_opacityDuration']=_0x26de91,this[_0x5b1028(0x565)]=_0x26de91,this['_opacityEasing']=_0x1a4c15||_0x5b1028(0x7f1);if(_0x26de91<=0x0)this[_0x5b1028(0x8d6)]=_0x396884;},Sprite_Battler[_0x588453(0x755)]['updateOpacity']=function(){const _0x519d80=_0x588453;if(this['constructor'][_0x519d80(0x4cf)]===_0x519d80(0x4ca))return;if(this[_0x519d80(0x63b)]<=0x0)return;const _0x5b04d2=this[_0x519d80(0x63b)],_0x993019=this['_opacityWholeDuration'],_0x5898b=this[_0x519d80(0x1fe)];Imported[_0x519d80(0xe0)]?this[_0x519d80(0x8d6)]=this[_0x519d80(0xfb)](this[_0x519d80(0x8d6)],this[_0x519d80(0x814)],_0x5b04d2,_0x993019,_0x5898b):this['opacity']=(this[_0x519d80(0x8d6)]*(_0x5b04d2-0x1)+this[_0x519d80(0x814)])/_0x5b04d2;this['_opacityDuration']--;if(this['_opacityDuration']<=0x0)this[_0x519d80(0x2d1)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x2d1)]=function(){const _0x45b1d5=_0x588453;this['opacity']=this[_0x45b1d5(0x814)];},Sprite_Battler[_0x588453(0x755)]['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x8cf)]=function(){const _0x203874=_0x588453;this[_0x203874(0x6f9)][_0x203874(0x536)]=this['_battler'][_0x203874(0x1ea)](),this[_0x203874(0xaa1)]();},Sprite_Battler[_0x588453(0x755)]['updateShadowPosition']=function(){const _0x3aaf0f=_0x588453;if(!this[_0x3aaf0f(0x6f9)])return;this[_0x3aaf0f(0x6f9)]['y']=this[_0x3aaf0f(0xaba)]-this['y']-0x2;},Sprite_Battler[_0x588453(0x755)]['updateShadowScale']=function(){const _0x5a0645=_0x588453;if(!this[_0x5a0645(0xab2)])return;this[_0x5a0645(0x2be)]=this[_0x5a0645(0xab2)][_0x5a0645(0xad2)](),this[_0x5a0645(0x270)]=this[_0x5a0645(0xab2)][_0x5a0645(0x16a)]();},Game_BattlerBase[_0x588453(0x755)]['battlerShadowScaleX']=function(){const _0x21e098=_0x588453,_0x2999e6=this[_0x21e098(0xa52)]()?this['actor']():this['enemy']();if(_0x2999e6){const _0x2e11e9=_0x2999e6[_0x21e098(0x97d)];if(_0x2e11e9[_0x21e098(0x809)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2e11e9[_0x21e098(0x809)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x588453(0x755)]['battlerShadowScaleY']=function(){const _0x91430a=_0x588453,_0x395a12=this[_0x91430a(0xa52)]()?this[_0x91430a(0x112)]():this[_0x91430a(0xf1)]();if(_0x395a12){const _0x29e87d=_0x395a12['note'];if(_0x29e87d[_0x91430a(0x809)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x29e87d[_0x91430a(0x809)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x588453(0x755)]['updateScale']=function(){const _0x46c28d=_0x588453;if(this[_0x46c28d(0x671)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x46c28d(0x29d)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x29d)]=function(){const _0x59aad2=_0x588453,_0x3a55c0=this[_0x59aad2(0x678)];_0x3a55c0&&(_0x3a55c0[_0x59aad2(0x30a)]['x']=this[_0x59aad2(0x118)](),_0x3a55c0[_0x59aad2(0x30a)]['y']=this[_0x59aad2(0x3d7)]());},Sprite_Battler['prototype']['mainSpriteScaleX']=function(){const _0x23cefd=_0x588453;let _0x4d1d5b=0x1;return _0x4d1d5b*=this['_flipScaleX'],_0x4d1d5b*=this[_0x23cefd(0x251)],_0x4d1d5b;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x3d7)]=function(){const _0x536a6a=_0x588453;return 0x1*this[_0x536a6a(0xa69)];},Sprite_Battler['prototype']['mainSpriteWidth']=function(){const _0x3ddceb=_0x588453;return this[_0x3ddceb(0x3ad)]*this[_0x3ddceb(0x118)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x7cf)]=function(){const _0x515067=_0x588453;return this[_0x515067(0x4ba)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x588453(0x755)]['startGrow']=function(_0x5838cf,_0x29c587,_0x274ba7,_0x49f320){const _0x1baf18=_0x588453;if(!this[_0x1baf18(0x6a3)]())return;if(!this[_0x1baf18(0x678)])return;if(this[_0x1baf18(0x7ad)]===_0x5838cf&&this[_0x1baf18(0x42d)]===_0x29c587)return;this[_0x1baf18(0x7ad)]=_0x5838cf,this[_0x1baf18(0x42d)]=_0x29c587,this[_0x1baf18(0x426)]=_0x274ba7,this[_0x1baf18(0x353)]=_0x274ba7,this[_0x1baf18(0x81c)]=_0x49f320||_0x1baf18(0x7f1),_0x274ba7<=0x0&&(this['_growX']=this[_0x1baf18(0x7ad)],this[_0x1baf18(0xa69)]=this['_targetGrowY']);},Sprite_Battler[_0x588453(0x755)]['updateGrow']=function(){const _0x4d7e73=_0x588453;if(this['_growDuration']<=0x0)return;if(!this[_0x4d7e73(0x678)])return;const _0x4fe395=this[_0x4d7e73(0x426)],_0x3432fb=this[_0x4d7e73(0x353)],_0x19371c=this[_0x4d7e73(0x81c)];Imported[_0x4d7e73(0xe0)]?(this['_growX']=this['applyEasing'](this['_growX'],this[_0x4d7e73(0x7ad)],_0x4fe395,_0x3432fb,_0x19371c),this['_growY']=this['applyEasing'](this['_growY'],this[_0x4d7e73(0x42d)],_0x4fe395,_0x3432fb,_0x19371c)):(this['_growX']=(this['_growX']*(_0x4fe395-0x1)+this[_0x4d7e73(0x7ad)])/_0x4fe395,this[_0x4d7e73(0xa69)]=(this[_0x4d7e73(0xa69)]*(_0x4fe395-0x1)+this['_targetGrowY'])/_0x4fe395);this[_0x4d7e73(0x426)]--;if(this[_0x4d7e73(0x426)]<=0x0)this[_0x4d7e73(0x3c1)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x3c1)]=function(){const _0x2c8da3=_0x588453;this[_0x2c8da3(0x251)]=this[_0x2c8da3(0x7ad)],this[_0x2c8da3(0xa69)]=this[_0x2c8da3(0x42d)];},Sprite_Battler[_0x588453(0x755)][_0x588453(0x2db)]=function(){const _0x23c042=_0x588453;return this[_0x23c042(0x426)]>0x0;},Sprite_Battler['prototype'][_0x588453(0x650)]=function(_0x4aef01,_0x3c9fef,_0x3f5c9a,_0x77612c){const _0x331e47=_0x588453;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x331e47(0x8be)]===_0x4aef01&&this[_0x331e47(0x30d)]===_0x3c9fef)return;this[_0x331e47(0x8be)]=_0x4aef01,this[_0x331e47(0x30d)]=_0x3c9fef,this[_0x331e47(0x9f2)]=_0x3f5c9a,this['_skewWholeDuration']=_0x3f5c9a,this[_0x331e47(0x9f9)]=_0x77612c||_0x331e47(0x7f1),_0x3f5c9a<=0x0&&(this[_0x331e47(0x678)][_0x331e47(0x96f)]['x']=this['_targetSkewX'],this[_0x331e47(0x678)][_0x331e47(0x96f)]['y']=this[_0x331e47(0x30d)]);},Sprite_Battler['prototype'][_0x588453(0x87d)]=function(){const _0x3fa8f8=_0x588453;if(this[_0x3fa8f8(0x9f2)]<=0x0)return;if(!this[_0x3fa8f8(0x678)])return;const _0x17e988=this['_skewDuration'],_0x45352c=this[_0x3fa8f8(0x88a)],_0x2e06c6=this[_0x3fa8f8(0x9f9)],_0x3a9c1d=this['_distortionSprite'];Imported[_0x3fa8f8(0xe0)]?(_0x3a9c1d[_0x3fa8f8(0x96f)]['x']=this[_0x3fa8f8(0xfb)](_0x3a9c1d[_0x3fa8f8(0x96f)]['x'],this[_0x3fa8f8(0x8be)],_0x17e988,_0x45352c,_0x2e06c6),_0x3a9c1d['skew']['y']=this[_0x3fa8f8(0xfb)](_0x3a9c1d[_0x3fa8f8(0x96f)]['y'],this['_targetSkewY'],_0x17e988,_0x45352c,_0x2e06c6)):(_0x3a9c1d[_0x3fa8f8(0x96f)]['x']=(_0x3a9c1d[_0x3fa8f8(0x96f)]['x']*(_0x17e988-0x1)+this[_0x3fa8f8(0x8be)])/_0x17e988,_0x3a9c1d[_0x3fa8f8(0x96f)]['y']=(_0x3a9c1d[_0x3fa8f8(0x96f)]['y']*(_0x17e988-0x1)+this[_0x3fa8f8(0x30d)])/_0x17e988);this[_0x3fa8f8(0x9f2)]--;if(this[_0x3fa8f8(0x9f2)]<=0x0)this[_0x3fa8f8(0x45a)]();},Sprite_Battler['prototype'][_0x588453(0x45a)]=function(){const _0x5d8d96=_0x588453;this[_0x5d8d96(0x678)][_0x5d8d96(0x96f)]['x']=this[_0x5d8d96(0x8be)],this[_0x5d8d96(0x678)][_0x5d8d96(0x96f)]['y']=this[_0x5d8d96(0x30d)];},Sprite_Battler[_0x588453(0x755)][_0x588453(0x279)]=function(){const _0x28ddb7=_0x588453;return this[_0x28ddb7(0x9f2)]>0x0;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x6bd)]=function(_0x57f1a1,_0x5966cb,_0xf6600f,_0x2c9c38){const _0xe32106=_0x588453;if(!this[_0xe32106(0x6a3)]())return;if(!this[_0xe32106(0x678)])return;if(this['_targetAngle']===_0x57f1a1)return;this[_0xe32106(0x67d)]=_0x57f1a1,this[_0xe32106(0x126)]=_0x5966cb,this[_0xe32106(0x859)]=_0x5966cb,this[_0xe32106(0x819)]=_0xf6600f||'Linear',this['_angleRevertOnFinish']=_0x2c9c38,this[_0xe32106(0x1c3)]===undefined&&(this[_0xe32106(0x1c3)]=!![]),_0x5966cb<=0x0&&(this[_0xe32106(0x59c)]=_0x57f1a1,this[_0xe32106(0x1c3)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x588453(0x755)][_0x588453(0x46c)]=function(){const _0x52a608=_0x588453;this['updateAngleCalculations'](),this[_0x52a608(0x4b8)]();},Sprite_Battler[_0x588453(0x755)]['updateAngleCalculations']=function(){const _0x31bd61=_0x588453;if(this[_0x31bd61(0x126)]<=0x0)return;const _0x3f8638=this[_0x31bd61(0x126)],_0x10f936=this[_0x31bd61(0x859)],_0x16545b=this[_0x31bd61(0x819)];Imported['VisuMZ_0_CoreEngine']?this[_0x31bd61(0x59c)]=this[_0x31bd61(0xfb)](this[_0x31bd61(0x59c)],this[_0x31bd61(0x67d)],_0x3f8638,_0x10f936,_0x16545b):this[_0x31bd61(0x59c)]=(this[_0x31bd61(0x59c)]*(_0x3f8638-0x1)+this[_0x31bd61(0x67d)])/_0x3f8638;this['_angleDuration']--;if(this[_0x31bd61(0x126)]<=0x0)this[_0x31bd61(0x144)]();},Sprite_Battler['prototype'][_0x588453(0x144)]=function(){const _0x38b8d1=_0x588453;this[_0x38b8d1(0x59c)]=this[_0x38b8d1(0x67d)],this[_0x38b8d1(0x1c3)]&&(this['_targetAngle']=0x0,this[_0x38b8d1(0x59c)]=0x0);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x762)]=function(){const _0x5794cc=_0x588453;return this[_0x5794cc(0x126)]>0x0;},Sprite_Battler[_0x588453(0x755)][_0x588453(0x4b8)]=function(){const _0x19f54c=_0x588453;if(!this[_0x19f54c(0x678)])return;const _0x49fb8f=this['_currentAngle'],_0x8db4ab=this[_0x19f54c(0x30a)]['x'],_0x9d6ad2=this[_0x19f54c(0xab2)]['isActor']()?-0x1:0x1;this[_0x19f54c(0x678)][_0x19f54c(0x639)]=_0x49fb8f*_0x8db4ab*_0x9d6ad2;const _0x5980b8=this['_distortionSprite'][_0x19f54c(0x30a)]['y'];this[_0x19f54c(0x678)]['y']=this[_0x19f54c(0x4ba)]*-0.5*(0x2-_0x5980b8),this['_distortionSprite']['y']=Math[_0x19f54c(0x935)](this[_0x19f54c(0x678)]['y']);const _0x1fb06b=[this[_0x19f54c(0x3d0)],this[_0x19f54c(0x166)],this[_0x19f54c(0xfd)]];for(const _0x4a3102 of _0x1fb06b){if(!_0x4a3102)continue;_0x4a3102['y']=this[_0x19f54c(0x4ba)]*0.5;}this['_shadowSprite']&&(this[_0x19f54c(0x2be)]=this[_0x19f54c(0x2be)]??0x1,this['_shadowScaleY']=this[_0x19f54c(0x270)]??0x1,this[_0x19f54c(0x6f9)][_0x19f54c(0x30a)]['x']=this['_distortionSprite'][_0x19f54c(0x30a)]['x']*this[_0x19f54c(0x2be)],this['_shadowSprite'][_0x19f54c(0x30a)]['y']=this[_0x19f54c(0x678)][_0x19f54c(0x30a)]['y']*this[_0x19f54c(0x270)]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x151)]=Sprite_Actor['prototype'][_0x588453(0x309)],Sprite_Actor[_0x588453(0x755)][_0x588453(0x309)]=function(){const _0x1e5d98=_0x588453;VisuMZ[_0x1e5d98(0x39a)][_0x1e5d98(0x151)]['call'](this),VisuMZ[_0x1e5d98(0x39a)][_0x1e5d98(0x90d)]['HpGauge']['ShowActorGauge']&&this[_0x1e5d98(0x31f)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x922)]=Sprite_Enemy[_0x588453(0x755)]['createStateIconSprite'],Sprite_Enemy[_0x588453(0x755)][_0x588453(0x1c1)]=function(){const _0x21765a=_0x588453;VisuMZ['BattleCore'][_0x21765a(0x90d)][_0x21765a(0x833)][_0x21765a(0x3b8)]&&this[_0x21765a(0x31f)](),VisuMZ[_0x21765a(0x39a)]['Sprite_Enemy_createStateIconSprite'][_0x21765a(0x90a)](this);},Sprite_Battler[_0x588453(0x755)]['createHpGaugeSprite']=function(){const _0x39af65=_0x588453;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x488161=VisuMZ['BattleCore'][_0x39af65(0x90d)][_0x39af65(0x833)],_0x33916a=new Sprite_HpGauge();_0x33916a['anchor']['x']=_0x488161['AnchorX'],_0x33916a[_0x39af65(0x4db)]['y']=_0x488161[_0x39af65(0x686)],_0x33916a['scale']['x']=_0x33916a[_0x39af65(0x30a)]['y']=_0x488161[_0x39af65(0x5ed)],this[_0x39af65(0x791)]=_0x33916a,this[_0x39af65(0x348)](this[_0x39af65(0x791)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x39af65(0x9f1)](this[_0x39af65(0x791)]);},VisuMZ[_0x588453(0x39a)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x588453(0x755)]['setBattler'],Sprite_Battler['prototype'][_0x588453(0x775)]=function(_0x275e0f){const _0x3ed07d=_0x588453,_0x1cc419=this[_0x3ed07d(0xab2)];VisuMZ[_0x3ed07d(0x39a)][_0x3ed07d(0x60b)][_0x3ed07d(0x90a)](this,_0x275e0f),this['setupHpGaugeSprite'](_0x275e0f);if(_0x1cc419!==_0x275e0f)this[_0x3ed07d(0x4e3)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x5be)]=function(_0x2173be){const _0x37b890=_0x588453;if(!_0x2173be)return;if(!this[_0x37b890(0x791)])return;if(_0x2173be[_0x37b890(0xa52)]()){}else{if(_0x2173be['isEnemy']()){if(this['constructor']===Sprite_SvEnemy&&!_0x2173be['hasSvBattler']())return;}}this['_hpGaugeSprite']['setup'](_0x2173be,'hp');},Sprite_Battler[_0x588453(0x755)][_0x588453(0x2e7)]=function(){const _0x52665b=_0x588453;return this[_0x52665b(0xab2)]&&this[_0x52665b(0xab2)][_0x52665b(0x2e7)]();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x38a)]=function(){const _0x5117c0=_0x588453,_0x588193=this[_0x5117c0(0x3d0)][_0x5117c0(0x590)];if(!_0x588193)return;const _0xf23a5c=_0x588193[_0x5117c0(0x3ad)];let _0x478926=_0x588193[_0x5117c0(0x4ba)];if(this[_0x5117c0(0xab2)][_0x5117c0(0x8c6)]()){if(this[_0x5117c0(0x36b)])_0x478926=Math[_0x5117c0(0x85e)](0x0,this[_0x5117c0(0x36b)]['height']-0x4);}this['_mainSprite']['setFrame'](0x0,0x0,_0xf23a5c,_0x478926),this[_0x5117c0(0x507)](0x0,0x0,_0xf23a5c,_0x478926);},Sprite_Battler[_0x588453(0x755)]['updateHpGaugePosition']=function(){const _0x52de0f=_0x588453;if(!this[_0x52de0f(0xab2)])return;if(!this[_0x52de0f(0x791)])return;const _0x551c45=VisuMZ[_0x52de0f(0x39a)][_0x52de0f(0x90d)][_0x52de0f(0x833)],_0x4143b1=this[_0x52de0f(0x791)];_0x4143b1[_0x52de0f(0x536)]=this[_0x52de0f(0x793)]();const _0x9b62fa=_0x551c45['OffsetX'],_0x2630d6=_0x551c45['OffsetY'];_0x4143b1['x']=_0x9b62fa,_0x4143b1['x']+=this['_battler'][_0x52de0f(0x23b)](),_0x4143b1['y']=-this[_0x52de0f(0x4ba)]+_0x2630d6,_0x4143b1['y']+=this[_0x52de0f(0xab2)]['battleUIOffsetY'](),Spriteset_Battle[_0x52de0f(0x2b5)]&&SceneManager[_0x52de0f(0x39b)][_0x52de0f(0x9cf)]&&(_0x4143b1['x']+=this['x'],_0x4143b1['y']+=this['y']);},Sprite_Battler[_0x588453(0x755)]['isVisualHpGaugeDisplayed']=function(){const _0x3ba2ca=_0x588453;if(!this[_0x3ba2ca(0xab2)])return![];if(this[_0x3ba2ca(0xab2)][_0x3ba2ca(0xa52)]())return!![];if(this[_0x3ba2ca(0xab2)]['isHidden']())return![];if(this['opacity']<=0x0)return![];const _0x2d29df=this[_0x3ba2ca(0xab2)][_0x3ba2ca(0xf1)]()['note'];if(_0x2d29df[_0x3ba2ca(0x809)](/<SHOW HP GAUGE>/i))return!![];if(_0x2d29df['match'](/<HIDE HP GAUGE>/i))return![];const _0x1fe59d=VisuMZ[_0x3ba2ca(0x39a)][_0x3ba2ca(0x90d)][_0x3ba2ca(0x833)];if(_0x1fe59d[_0x3ba2ca(0x1bb)]){if(_0x1fe59d['BTestBypass']&&BattleManager[_0x3ba2ca(0x9cc)]())return!![];if(this[_0x3ba2ca(0xab2)]['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x3ba2ca(0x213)]();}return!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x170)]=Sprite_Battler['prototype'][_0x588453(0x64b)],Sprite_Battler[_0x588453(0x755)][_0x588453(0x64b)]=function(){const _0x539c82=_0x588453;if(!this['_battler'])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x539c82(0x39a)][_0x539c82(0x170)]['call'](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x701)]=Sprite_Battler[_0x588453(0x755)][_0x588453(0x12e)],Sprite_Battler[_0x588453(0x755)]['startMove']=function(_0x52a602,_0x446229,_0x3c8814){const _0x5ece99=_0x588453;this[_0x5ece99(0x6a3)]()&&VisuMZ[_0x5ece99(0x39a)][_0x5ece99(0x701)][_0x5ece99(0x90a)](this,_0x52a602,_0x446229,_0x3c8814);},Sprite_Battler['prototype'][_0x588453(0x6a3)]=function(){const _0x19312d=_0x588453;if(this[_0x19312d(0xab2)]&&this[_0x19312d(0xab2)][_0x19312d(0x8c6)]())return![];if(this['_battler']&&!this[_0x19312d(0xab2)][_0x19312d(0xd7)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x588453(0x755)][_0x588453(0x7c5)]=function(){},Sprite_Battler[_0x588453(0x755)]['stepBack']=function(){const _0x1c4c9f=_0x588453;this[_0x1c4c9f(0x12e)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x588453(0xab0)]=function(){},Sprite_Battler[_0x588453(0x755)]['stepFlinch']=function(){const _0x539462=_0x588453,_0x9ed2d1=VisuMZ[_0x539462(0x39a)][_0x539462(0x90d)]['Actor'],_0x534c96=this[_0x539462(0xab2)]&&this[_0x539462(0xab2)][_0x539462(0xa52)]()?0x1:-0x1,_0x103234=this[_0x539462(0x494)]-this[_0x539462(0x482)]+_0x534c96*_0x9ed2d1[_0x539462(0xa63)],_0x1fa515=this[_0x539462(0xaba)]-this[_0x539462(0x628)]+_0x534c96*_0x9ed2d1[_0x539462(0x1d0)],_0x6f37dc=_0x9ed2d1[_0x539462(0x346)];this[_0x539462(0x12e)](_0x103234,_0x1fa515,_0x6f37dc);},Sprite_Battler['prototype'][_0x588453(0xa35)]=function(_0x5f198c,_0x4cfa26){const _0x2e8a02=_0x588453,_0x1297e0=VisuMZ[_0x2e8a02(0x39a)][_0x2e8a02(0x90d)]['Actor'];this[_0x2e8a02(0x743)]=Math[_0x2e8a02(0x935)]((_0x1297e0[_0x2e8a02(0x396)]??0x18)*_0x4cfa26),this[_0x2e8a02(0x958)]=Math['max'](this[_0x2e8a02(0x958)],_0x5f198c);},Sprite_Battler[_0x588453(0x755)][_0x588453(0x7fa)]=function(){const _0x5a7a84=_0x588453,_0x20d7dc=VisuMZ[_0x5a7a84(0x39a)][_0x5a7a84(0x90d)]['Actor'];if(!(_0x20d7dc['ShakeFlinch']??![]))return;if(this[_0x5a7a84(0x743)]>0x0){const _0x38bc07=this[_0x5a7a84(0x743)];this['_shakeFlinchPower']=this[_0x5a7a84(0x958)]*(_0x38bc07-0x1)/_0x38bc07,this['_shakeFlinchDuration']--,this['_shakeFlinchDuration']<=0x0&&(this['_shakeFlinchPower']=0x0);}this['_shakeFlinchPower']>0x0?(this[_0x5a7a84(0x3d0)]['x']=Math['randomInt'](this['_shakeFlinchPower'])*(Math['random']()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x5a7a84(0x3d0)]['y']=this['height']*0.5,this[_0x5a7a84(0x3d0)]['y']+=Math['randomInt'](this[_0x5a7a84(0x958)])*(Math[_0x5a7a84(0x697)]()<0.5?-0x1:0x1))):(this[_0x5a7a84(0x3d0)]['x']=0x0,this[_0x5a7a84(0x3d0)]['y']=this[_0x5a7a84(0x4ba)]*0.5);},VisuMZ[_0x588453(0x39a)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x588453(0x755)]['initMembers'],Sprite_Actor[_0x588453(0x755)][_0x588453(0x423)]=function(){const _0x41ce88=_0x588453;VisuMZ[_0x41ce88(0x39a)][_0x41ce88(0x275)][_0x41ce88(0x90a)](this),this[_0x41ce88(0x60d)]();},Sprite_Actor['prototype'][_0x588453(0x864)]=function(){const _0x479a64=_0x588453;return this[_0x479a64(0x678)]||this[_0x479a64(0x3d0)]||this;},VisuMZ[_0x588453(0x39a)][_0x588453(0x807)]=Sprite_Actor[_0x588453(0x755)]['moveToStartPosition'],Sprite_Actor['prototype']['moveToStartPosition']=function(){},Sprite_Actor['prototype'][_0x588453(0x6a1)]=function(_0x53a344){const _0x2a5462=_0x588453;if(SceneManager[_0x2a5462(0x738)]())return;if(!_0x53a344)return;if(!_0x53a344[_0x2a5462(0x6a3)]())return;VisuMZ[_0x2a5462(0x39a)]['Sprite_Actor_moveToStartPosition'][_0x2a5462(0x90a)](this);},VisuMZ['BattleCore'][_0x588453(0xc5)]=Sprite_Actor[_0x588453(0x755)][_0x588453(0xa75)],Sprite_Actor[_0x588453(0x755)][_0x588453(0xa75)]=function(_0x170315){const _0xe2443c=_0x588453;VisuMZ[_0xe2443c(0x39a)]['Settings'][_0xe2443c(0x848)][_0xe2443c(0x2ae)]?VisuMZ[_0xe2443c(0x39a)][_0xe2443c(0x90d)][_0xe2443c(0x848)][_0xe2443c(0x2ae)][_0xe2443c(0x90a)](this,_0x170315):VisuMZ[_0xe2443c(0x39a)][_0xe2443c(0xc5)][_0xe2443c(0x90a)](this,_0x170315);},VisuMZ['BattleCore'][_0x588453(0x344)]=Sprite_Actor[_0x588453(0x755)][_0x588453(0x775)],Sprite_Actor['prototype'][_0x588453(0x775)]=function(_0x408e63){const _0xba3f5d=_0x588453;VisuMZ['BattleCore'][_0xba3f5d(0x344)]['call'](this,_0x408e63),this['setBattlerBattleCore'](_0x408e63);},Sprite_Actor[_0x588453(0x755)][_0x588453(0x724)]=function(_0x33aa24){const _0x4d0215=_0x588453;if(!_0x33aa24)return;if(!this[_0x4d0215(0x3d0)])return;this[_0x4d0215(0x3d0)][_0x4d0215(0x4db)]['x']=this[_0x4d0215(0x237)][_0x4d0215(0x883)](),this[_0x4d0215(0x3d0)]['anchor']['y']=this['_actor'][_0x4d0215(0xa74)](),this[_0x4d0215(0x827)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x5a0)]=Sprite_Actor['prototype'][_0x588453(0x665)],Sprite_Actor[_0x588453(0x755)][_0x588453(0x665)]=function(){const _0x860776=_0x588453;VisuMZ[_0x860776(0x39a)][_0x860776(0x5a0)][_0x860776(0x90a)](this),this[_0x860776(0x237)]&&(this['updateStateSprite'](),this[_0x860776(0x32a)]());},VisuMZ[_0x588453(0x39a)][_0x588453(0x1a3)]=Sprite_Actor[_0x588453(0x755)][_0x588453(0x30e)],Sprite_Actor[_0x588453(0x755)][_0x588453(0x30e)]=function(){const _0x4f09fe=_0x588453;VisuMZ[_0x4f09fe(0x39a)][_0x4f09fe(0x1a3)][_0x4f09fe(0x90a)](this),this[_0x4f09fe(0x3d0)]&&this[_0x4f09fe(0x3d0)]['bitmap']&&this[_0x4f09fe(0xab2)]&&(this[_0x4f09fe(0x3d0)]['bitmap'][_0x4f09fe(0x89c)]!==this[_0x4f09fe(0xab2)][_0x4f09fe(0x1b8)]()&&(this['_mainSprite'][_0x4f09fe(0x590)][_0x4f09fe(0x89c)]=this[_0x4f09fe(0xab2)][_0x4f09fe(0x1b8)]()));},VisuMZ[_0x588453(0x39a)][_0x588453(0x4fe)]=Sprite_Actor['prototype'][_0x588453(0x8cf)],Sprite_Actor['prototype'][_0x588453(0x8cf)]=function(){const _0x182823=_0x588453;VisuMZ[_0x182823(0x39a)][_0x182823(0x4fe)]['call'](this),this[_0x182823(0x947)]();},Sprite_Actor[_0x588453(0x755)]['updateShadowBattleCore']=function(){const _0x3b929c=_0x588453;if(!this[_0x3b929c(0x3d0)])return;if(!this[_0x3b929c(0x6f9)])return;this['updateShadowVisibility'](),this[_0x3b929c(0xaa1)]();},Sprite_Actor[_0x588453(0x755)][_0x588453(0x7bc)]=function(){const _0x4bfba7=_0x588453;{this[_0x4bfba7(0xca)]['scale']['x']=0x1/(this[_0x4bfba7(0x30a)]['x']||0.001),this[_0x4bfba7(0xca)]['scale']['y']=0x1/(this[_0x4bfba7(0x30a)]['y']||0.001);}{this['_stateSprite']['x']=0x0,this[_0x4bfba7(0xca)]['y']=-this[_0x4bfba7(0x4ba)]-0x20+0x60;const _0x47a3fb=VisuMZ[_0x4bfba7(0x39a)][_0x4bfba7(0x90d)]['Actor'];this[_0x4bfba7(0xca)]['x']+=_0x47a3fb[_0x4bfba7(0x7cb)]??0x0,this[_0x4bfba7(0xca)]['y']+=_0x47a3fb[_0x4bfba7(0x4a2)]??0x0;}},Sprite_Actor[_0x588453(0x755)][_0x588453(0x32a)]=function(){const _0x25edea=_0x588453;if(!$gameSystem['isSideView']()&&this['constructor']===Sprite_Actor){const _0x36c02f=Scene_Battle[_0x25edea(0x755)][_0x25edea(0x80f)]();[_0x25edea(0x880),'list',_0x25edea(0x418),_0x25edea(0x469)][_0x25edea(0x51e)](_0x36c02f)&&(this[_0x25edea(0x8d6)]=0x0);}},Sprite_Actor[_0x588453(0x755)][_0x588453(0x974)]=function(){const _0x55f828=_0x588453,_0xa4f7db=this[_0x55f828(0x237)];if(_0xa4f7db){if(_0xa4f7db['_performDamageMotion'])return;const _0xfd3e3c=_0xa4f7db[_0x55f828(0x6f8)]();if(_0xa4f7db['isInputting']()||_0xa4f7db[_0x55f828(0x96b)]())this[_0x55f828(0x22f)]('walk');else{if(_0xfd3e3c===0x3)this['startMotion'](_0x55f828(0x929));else{if(_0xfd3e3c===0x2)this[_0x55f828(0x22f)](_0x55f828(0x805));else{if(this[_0x55f828(0x193)])this['startMotion'](_0x55f828(0x76d));else{if(_0xa4f7db[_0x55f828(0x386)]())this[_0x55f828(0x22f)](_0x55f828(0x539));else{if(_0xa4f7db['isChanting']())this[_0x55f828(0x22f)](_0x55f828(0xa8a));else{if(_0xa4f7db[_0x55f828(0x395)]()||_0xa4f7db[_0x55f828(0x920)]())this[_0x55f828(0x22f)]('guard');else{if(_0xfd3e3c===0x1)this[_0x55f828(0x22f)]('abnormal');else{if(_0xa4f7db['isDying']())this[_0x55f828(0x22f)](_0x55f828(0x11a));else{if(_0xa4f7db[_0x55f828(0x1ad)]())this[_0x55f828(0x22f)](_0x55f828(0x91c));else _0xa4f7db['currentAction']()?this[_0x55f828(0x22f)](_0x55f828(0x539)):this['startMotion'](_0x55f828(0x91c));}}}}}}}}}}},Sprite_Actor[_0x588453(0x755)][_0x588453(0xab0)]=function(){const _0x329057=_0x588453,_0x2f037b=0xa,_0xe91b5a=0x12c*_0x2f037b,_0x31fdf7=0x1e*_0x2f037b;this[_0x329057(0x12e)](_0xe91b5a,0x0,_0x31fdf7);},Sprite_Actor[_0x588453(0x755)][_0x588453(0x78b)]=function(){const _0x544839=_0x588453;Sprite_Battler[_0x544839(0x755)]['onMoveEnd'][_0x544839(0x90a)](this);},Sprite_Actor['prototype'][_0x588453(0xacf)]=function(){const _0x5a4fb6=_0x588453;return Sprite_Battler[_0x5a4fb6(0xa72)];},Sprite_Weapon['prototype'][_0x588453(0x3d4)]=function(){const _0x4d5176=_0x588453;return Sprite_Battler[_0x4d5176(0xa72)];},Sprite_Actor[_0x588453(0x755)]['setupMotion']=function(){},Sprite_Actor['prototype']['setupWeaponAnimation']=function(){},Sprite_Actor[_0x588453(0x755)][_0x588453(0x79b)]=function(){const _0x1fbc37=_0x588453;if(this[_0x1fbc37(0x82a)]&&++this[_0x1fbc37(0x6da)]>=this[_0x1fbc37(0xacf)]()){if(this[_0x1fbc37(0x82a)]['loop'])this[_0x1fbc37(0x6c3)]=(this['_pattern']+0x1)%0x4;else{if(this['_pattern']<0x2)this['_pattern']++;else{const _0x2c162c=this[_0x1fbc37(0x237)];if(_0x2c162c)_0x2c162c[_0x1fbc37(0xac2)]=undefined;this[_0x1fbc37(0x974)]();}}this['_motionCount']=0x0;}},Sprite_Actor[_0x588453(0x755)][_0x588453(0xa44)]=function(_0x531e70){const _0x44ad13=_0x588453;if(this['_battler']&&this[_0x44ad13(0xab2)]['isDead']()){this['_motion']=Sprite_Actor['MOTIONS']['dead'];return;}const _0xf7972d=Sprite_Actor[_0x44ad13(0x67c)][_0x531e70];this[_0x44ad13(0x82a)]=_0xf7972d,this[_0x44ad13(0x6da)]=0x0,this[_0x44ad13(0x6c3)]=0x0;},Sprite_Actor['prototype'][_0x588453(0xa4f)]=function(_0x307360){const _0x54c37c=_0x588453;if(this['hasStaticSvBattler']())return;this[_0x54c37c(0xfc)](),this[_0x54c37c(0x6b3)][_0x54c37c(0x68d)](_0x307360),this['_actor'][_0x54c37c(0x5f5)]();},Sprite_Actor[_0x588453(0x755)]['adjustWeaponSpriteOffset']=function(){const _0x13964a=_0x588453;let _0x22a336=-0x10,_0x4fb9ce=this[_0x13964a(0x4ba)]*0.5;const _0x33546c=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x35ea75=this[_0x13964a(0xab2)][_0x13964a(0x863)]()[_0x13964a(0x89e)](_0x51df95=>_0x51df95&&_0x51df95[_0x13964a(0x97d)][_0x13964a(0x809)](_0x33546c)?Number(RegExp['$1']):0x0),_0xba0f1a=this[_0x13964a(0xab2)]['traitObjects']()['map'](_0x26c3f7=>_0x26c3f7&&_0x26c3f7[_0x13964a(0x97d)][_0x13964a(0x809)](_0x33546c)?Number(RegExp['$2']):0x0);_0x22a336=_0x35ea75[_0x13964a(0x159)]((_0x805b53,_0xc5af72)=>_0x805b53+_0xc5af72,_0x22a336),_0x4fb9ce=_0xba0f1a['reduce']((_0x25394d,_0x2b6a7f)=>_0x25394d+_0x2b6a7f,_0x4fb9ce),this[_0x13964a(0x6b3)]['x']=_0x22a336,this[_0x13964a(0x6b3)]['y']=_0x4fb9ce,this[_0x13964a(0x6b3)][_0x13964a(0x665)]();},Sprite_Weapon[_0x588453(0x755)][_0x588453(0x68d)]=function(_0x316b0d){const _0x5e4b63=_0x588453;this[_0x5e4b63(0x620)]=_0x316b0d,this['_animationCount']=-0x1,this[_0x5e4b63(0x6c3)]=0x0,this[_0x5e4b63(0x8a3)](),this[_0x5e4b63(0x660)]();},Sprite_Actor[_0x588453(0x755)][_0x588453(0x200)]=function(){},Sprite_Actor[_0x588453(0x755)][_0x588453(0x7c5)]=function(){const _0x255472=_0x588453,_0x2132e9=VisuMZ[_0x255472(0x39a)][_0x255472(0x90d)][_0x255472(0x608)],_0x2dc15c=_0x2132e9[_0x255472(0x32d)],_0x5cada0=_0x2132e9[_0x255472(0x5e2)],_0x4033e2=_0x2132e9[_0x255472(0x103)];this['startMove'](-_0x2dc15c,-_0x5cada0,_0x4033e2);},VisuMZ[_0x588453(0x39a)]['Sprite_Actor_updateFrame']=Sprite_Actor[_0x588453(0x755)][_0x588453(0x660)],Sprite_Actor['prototype'][_0x588453(0x660)]=function(){const _0xf81d3c=_0x588453;this['hasStaticSvBattler']()?this[_0xf81d3c(0x38a)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0xf81d3c(0x39a)][_0xf81d3c(0xd4)][_0xf81d3c(0x90a)](this));},Sprite_Actor['prototype'][_0x588453(0x63e)]=function(){const _0x4b0779=_0x588453;if(this[_0x4b0779(0xab2)]&&this[_0x4b0779(0xab2)]['_freezeMotionData']){const _0x2bd8ee=this[_0x4b0779(0xab2)]['_freezeMotionData'];this['_motion']=Sprite_Actor['MOTIONS'][_0x2bd8ee[_0x4b0779(0x636)]],this[_0x4b0779(0x6c3)]=_0x2bd8ee[_0x4b0779(0x62d)];const _0x7e10f5=this['_weaponSprite'];_0x7e10f5['freezeFrame'](_0x2bd8ee[_0x4b0779(0x65c)],_0x2bd8ee['pattern']),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon['prototype'][_0x588453(0x7ab)]=function(_0x2bb209,_0x480eaf){const _0x56c2f1=_0x588453;this[_0x56c2f1(0x620)]=_0x2bb209,this['_animationCount']=-Infinity,this['_pattern']=_0x480eaf,this[_0x56c2f1(0x8a3)](),this['updateFrame']();},Sprite_Enemy[_0x588453(0x755)][_0x588453(0x423)]=function(){const _0x19a450=_0x588453;Sprite_Battler[_0x19a450(0x755)][_0x19a450(0x423)][_0x19a450(0x90a)](this),this[_0x19a450(0xd1)]=null,this['_appeared']=![],this[_0x19a450(0x6ce)]='',this[_0x19a450(0xd6)]=0x0,this['_effectType']=null,this[_0x19a450(0x301)]=0x0,this['_shake']=0x0,this[_0x19a450(0x43f)](),this[_0x19a450(0x1c1)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x35e)]=Sprite_Enemy[_0x588453(0x755)][_0x588453(0x665)],Sprite_Enemy['prototype']['update']=function(){const _0x50da09=_0x588453;VisuMZ[_0x50da09(0x39a)][_0x50da09(0x35e)][_0x50da09(0x90a)](this),this[_0x50da09(0x827)](),this['updateNameTempVisibility']();},Sprite_Enemy[_0x588453(0x755)]['createMainSprite']=function(){const _0x2b7230=_0x588453;this[_0x2b7230(0x3d0)]=new Sprite(),this[_0x2b7230(0x3d0)][_0x2b7230(0x4db)]['x']=0.5,this[_0x2b7230(0x3d0)]['anchor']['y']=0x1,this['addChild'](this[_0x2b7230(0x3d0)]),this[_0x2b7230(0x60d)]();},Sprite_Enemy[_0x588453(0x755)]['mainSprite']=function(){const _0x592bd2=_0x588453;return this[_0x592bd2(0x678)]||this[_0x592bd2(0x3d0)]||this;},Sprite_Enemy[_0x588453(0x755)][_0x588453(0x8a3)]=function(_0x1fb8aa){const _0x4bbcba=_0x588453;this[_0x4bbcba(0x590)]=new Bitmap(0x1,0x1);if(this[_0x4bbcba(0x1ea)]()){const _0x385d38=this[_0x4bbcba(0xd1)][_0x4bbcba(0x391)]();this[_0x4bbcba(0x590)]=new Bitmap(_0x385d38['width'],_0x385d38[_0x4bbcba(0x4ba)]),this[_0x4bbcba(0x3d0)][_0x4bbcba(0x590)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x4bbcba(0x879)]()){const _0x1b930e=ImageManager[_0x4bbcba(0x188)](_0x1fb8aa);_0x1b930e['addLoadListener'](this[_0x4bbcba(0x53b)]['bind'](this,_0x1b930e));}else{const _0x1ce80b=ImageManager[_0x4bbcba(0x97b)](_0x1fb8aa);_0x1ce80b[_0x4bbcba(0x454)](this[_0x4bbcba(0x53b)][_0x4bbcba(0x80e)](this,_0x1ce80b));}}},Sprite_Enemy[_0x588453(0x755)][_0x588453(0x53b)]=function(_0x427cb6){const _0x53a75a=_0x588453;this[_0x53a75a(0x3d0)][_0x53a75a(0x590)]=_0x427cb6,this[_0x53a75a(0x590)]=new Bitmap(_0x427cb6[_0x53a75a(0x3ad)],_0x427cb6[_0x53a75a(0x4ba)]);},VisuMZ[_0x588453(0x39a)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x588453(0x755)]['setHue'],Sprite_Enemy[_0x588453(0x755)][_0x588453(0x8eb)]=function(_0x13a2c1){const _0x4a0c66=_0x588453;this[_0x4a0c66(0x3d0)]&&this['_mainSprite']['setHue'](_0x13a2c1);},VisuMZ[_0x588453(0x39a)][_0x588453(0x232)]=Sprite_Enemy[_0x588453(0x755)][_0x588453(0x174)],Sprite_Enemy['prototype'][_0x588453(0x174)]=function(){const _0x5ae49b=_0x588453;this['allowCollapse']()?VisuMZ[_0x5ae49b(0x39a)][_0x5ae49b(0x232)][_0x5ae49b(0x90a)](this):(this[_0x5ae49b(0x1a6)]=!this['_enemy'][_0x5ae49b(0x55d)](),!this[_0x5ae49b(0x1a6)]&&(this['opacity']=0x0));},VisuMZ['BattleCore'][_0x588453(0xa8d)]=Sprite_Enemy[_0x588453(0x755)][_0x588453(0x196)],Sprite_Enemy['prototype']['updateCollapse']=function(){const _0x547d11=_0x588453;if(this[_0x547d11(0x578)]())VisuMZ['BattleCore'][_0x547d11(0xa8d)]['call'](this);},Sprite_Enemy[_0x588453(0x755)][_0x588453(0x660)]=function(){const _0x4b66a8=_0x588453;Sprite_Battler[_0x4b66a8(0x755)][_0x4b66a8(0x660)]['call'](this);const _0x4e3bce=this[_0x4b66a8(0x864)]()||this;if(!_0x4e3bce)return;!_0x4e3bce['bitmap']&&(_0x4e3bce[_0x4b66a8(0x590)]=new Bitmap(this[_0x4b66a8(0x3ad)]||0x1,this[_0x4b66a8(0x4ba)]||0x1));if(this[_0x4b66a8(0xa4d)]==='bossCollapse')this[_0x4b66a8(0x3d0)][_0x4b66a8(0x507)](0x0,0x0,this[_0x4b66a8(0x3d0)][_0x4b66a8(0x3ad)]||0x1,this[_0x4b66a8(0x301)]);else{let _0xdd4823=0x1;if(_0x4e3bce&&_0x4e3bce[_0x4b66a8(0x590)])_0xdd4823=_0x4e3bce[_0x4b66a8(0x590)][_0x4b66a8(0x3ad)];let _0x8510be=0x1;if(this[_0x4b66a8(0x590)])_0x8510be=this[_0x4b66a8(0x590)][_0x4b66a8(0x4ba)];_0x4e3bce['setFrame'](0x0,0x0,_0xdd4823,_0x8510be);}},VisuMZ['BattleCore'][_0x588453(0x741)]=Sprite_Enemy[_0x588453(0x755)]['updateBossCollapse'],Sprite_Enemy[_0x588453(0x755)]['updateBossCollapse']=function(){const _0x1756b3=_0x588453;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x1756b3(0x741)][_0x1756b3(0x90a)](this);},Sprite_Enemy[_0x588453(0x755)]['isMoving']=function(){const _0x2fdfe2=_0x588453;return Sprite_Battler[_0x2fdfe2(0x755)][_0x2fdfe2(0x64b)][_0x2fdfe2(0x90a)](this);},VisuMZ['BattleCore'][_0x588453(0x8ea)]=Sprite_Enemy['prototype'][_0x588453(0x7bc)],Sprite_Enemy[_0x588453(0x755)][_0x588453(0x7bc)]=function(){const _0x4effe5=_0x588453;VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite'][_0x4effe5(0x90a)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x588453(0x755)][_0x588453(0x2a9)]=function(){const _0x5d99c6=_0x588453,_0x1040ba=VisuMZ[_0x5d99c6(0x39a)][_0x5d99c6(0x90d)][_0x5d99c6(0x732)];if(_0x1040ba[_0x5d99c6(0x8f7)]&&!_0x1040ba[_0x5d99c6(0x6ff)]){this[_0x5d99c6(0x552)][_0x5d99c6(0x8d6)]=0x0;return;}this[_0x5d99c6(0x552)]['x']=0x0,this[_0x5d99c6(0x552)]['x']+=this[_0x5d99c6(0xab2)]['battleUIOffsetX']();let _0x3e3f20=0x1;if(this[_0x5d99c6(0x590)])_0x3e3f20=this[_0x5d99c6(0x590)][_0x5d99c6(0x4ba)];this[_0x5d99c6(0x552)]['y']=-_0x3e3f20-this['_stateIconSprite']['height']-0x4,this[_0x5d99c6(0x552)]['y']+=this[_0x5d99c6(0xab2)][_0x5d99c6(0x167)](),this['_stateIconSprite']['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x5d99c6(0x552)][_0x5d99c6(0x30a)]['y']=0x1/(this['scale']['y']||0.001),this[_0x5d99c6(0x1ea)]()&&(this[_0x5d99c6(0x166)][_0x5d99c6(0xca)][_0x5d99c6(0x30a)]['x']=-0x1/(this[_0x5d99c6(0x30a)]['x']||0.001),this[_0x5d99c6(0x166)]['_stateSprite'][_0x5d99c6(0x30a)]['y']=0x1/(this['scale']['y']||0.001));},Sprite_Enemy['prototype'][_0x588453(0x3ce)]=function(){const _0x7d88d5=_0x588453;this['_battler']&&this['_battler'][_0x7d88d5(0x3ce)]();},VisuMZ[_0x588453(0x39a)]['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x588453(0x755)][_0x588453(0x775)],Sprite_Enemy[_0x588453(0x755)][_0x588453(0x775)]=function(_0x41b7e5){const _0x3a2f2b=_0x588453;VisuMZ['BattleCore'][_0x3a2f2b(0x5c2)][_0x3a2f2b(0x90a)](this,_0x41b7e5),this[_0x3a2f2b(0x1a1)](_0x41b7e5);},Sprite_Enemy[_0x588453(0x755)]['setSvBattlerSprite']=function(_0x4410a9){const _0x2ae5b3=_0x588453;!this['_svBattlerSprite']&&(this[_0x2ae5b3(0x166)]=new Sprite_SvEnemy(_0x4410a9),this[_0x2ae5b3(0x60d)]()),this[_0x2ae5b3(0x166)][_0x2ae5b3(0x775)](_0x4410a9);},Sprite_Enemy['prototype'][_0x588453(0x1ea)]=function(){const _0x5d2640=_0x588453;return this[_0x5d2640(0xd1)]&&this['_enemy'][_0x5d2640(0x1ea)]();},Sprite_Enemy[_0x588453(0x755)]['allowCollapse']=function(){const _0xd9af07=_0x588453;return this[_0xd9af07(0x1ea)]()?this['_enemy'][_0xd9af07(0x578)]():!![];},Sprite_Enemy['prototype'][_0x588453(0x974)]=function(){const _0x120103=_0x588453;this[_0x120103(0x1ea)]()&&this[_0x120103(0x166)][_0x120103(0x974)]();},Sprite_Enemy[_0x588453(0x755)][_0x588453(0xa44)]=function(_0x534095){const _0x5cda49=_0x588453;if(this[_0x5cda49(0x1ea)]())this[_0x5cda49(0x166)][_0x5cda49(0xa44)](_0x534095);},Sprite_Enemy['prototype'][_0x588453(0xa4f)]=function(_0xe90fd0){const _0xe79035=_0x588453;if(this[_0xe79035(0x1ea)]())this[_0xe79035(0x166)][_0xe79035(0xa4f)](_0xe90fd0);},Sprite_Enemy[_0x588453(0x755)][_0x588453(0x7c5)]=function(){const _0x9493c3=_0x588453,_0x590975=VisuMZ[_0x9493c3(0x39a)][_0x9493c3(0x90d)][_0x9493c3(0x608)],_0x48ab5f=_0x590975[_0x9493c3(0x32d)],_0x1186b9=_0x590975[_0x9493c3(0x5e2)],_0x5958bc=_0x590975['StepDuration'];this[_0x9493c3(0x12e)](_0x48ab5f,_0x1186b9,_0x5958bc);};function Sprite_SvEnemy(){const _0x383547=_0x588453;this[_0x383547(0x155)](...arguments);}Sprite_SvEnemy[_0x588453(0x755)]=Object[_0x588453(0xa42)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x671)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x588453(0x755)]['initialize']=function(_0x83d807){const _0x11a02c=_0x588453;Sprite_Actor[_0x11a02c(0x755)][_0x11a02c(0x155)][_0x11a02c(0x90a)](this,_0x83d807),this[_0x11a02c(0x30a)]['x']=-0x1,this[_0x11a02c(0xca)]['scale']['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x588453(0x74f)]=function(){},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x950)]=function(){},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0xa75)]=function(_0xe953d5){},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x8cf)]=function(){},Sprite_SvEnemy[_0x588453(0x755)]['updateShadowPosition']=function(){},Sprite_SvEnemy['prototype'][_0x588453(0x7bc)]=function(){const _0x324da8=_0x588453;this[_0x324da8(0xca)][_0x324da8(0x536)]=![];},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x30e)]=function(){const _0x2e821d=_0x588453;Sprite_Battler[_0x2e821d(0x755)][_0x2e821d(0x30e)]['call'](this);const _0x4a2d56=this[_0x2e821d(0x237)][_0x2e821d(0x8b7)]();this[_0x2e821d(0x6ce)]!==_0x4a2d56&&(this[_0x2e821d(0x6ce)]=_0x4a2d56,this[_0x2e821d(0x3d0)][_0x2e821d(0x590)]=ImageManager[_0x2e821d(0x5fe)](_0x4a2d56)),this[_0x2e821d(0x3d0)]&&this['_mainSprite'][_0x2e821d(0x590)]&&this['_battler']&&(this[_0x2e821d(0x3d0)][_0x2e821d(0x590)][_0x2e821d(0x89c)]!==this['_battler'][_0x2e821d(0x1b8)]()&&(this[_0x2e821d(0x3d0)][_0x2e821d(0x590)][_0x2e821d(0x89c)]=this[_0x2e821d(0xab2)][_0x2e821d(0x1b8)]()));},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0xab0)]=function(){},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x12e)]=function(_0x39adb0,_0x4515e8,_0x58a986){const _0x8c862c=_0x588453;if(this[_0x8c862c(0x484)])this[_0x8c862c(0x484)][_0x8c862c(0x12e)](_0x39adb0,_0x4515e8,_0x58a986);},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x974)]=function(){const _0x5ef4c3=_0x588453,_0x301cdd=this['_actor'];if(_0x301cdd){const _0x465c21=_0x301cdd[_0x5ef4c3(0x6f8)]();if(_0x301cdd['isInputting']()||_0x301cdd[_0x5ef4c3(0x96b)]())this[_0x5ef4c3(0x22f)](_0x5ef4c3(0x91c));else{if(_0x465c21===0x3)this[_0x5ef4c3(0x22f)](_0x5ef4c3(0x929));else{if(_0x465c21===0x2)this[_0x5ef4c3(0x22f)](_0x5ef4c3(0x805));else{if(_0x301cdd[_0x5ef4c3(0x412)]())this[_0x5ef4c3(0x22f)](_0x5ef4c3(0xa8a));else{if(_0x301cdd[_0x5ef4c3(0x395)]()||_0x301cdd[_0x5ef4c3(0x920)]())this['startMotion'](_0x5ef4c3(0x5e8));else{if(_0x465c21===0x1)this[_0x5ef4c3(0x22f)](_0x5ef4c3(0x89b));else{if(_0x301cdd[_0x5ef4c3(0xa34)]())this[_0x5ef4c3(0x22f)](_0x5ef4c3(0x11a));else _0x301cdd['isUndecided']()?this[_0x5ef4c3(0x22f)](_0x5ef4c3(0x91c)):this[_0x5ef4c3(0x22f)](_0x301cdd[_0x5ef4c3(0x391)]()[_0x5ef4c3(0x7b2)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x6e5)]=function(){const _0x1d1a8e=_0x588453;return this[_0x1d1a8e(0x484)]?this[_0x1d1a8e(0x484)][_0x1d1a8e(0x85f)]===0x0&&this[_0x1d1a8e(0x484)][_0x1d1a8e(0x4c7)]===0x0:!![];},Sprite_SvEnemy[_0x588453(0x755)][_0x588453(0x52e)]=function(){},VisuMZ[_0x588453(0x39a)][_0x588453(0x64d)]=Sprite_Animation[_0x588453(0x755)][_0x588453(0x6b5)],Sprite_Animation[_0x588453(0x755)][_0x588453(0x6b5)]=function(_0x594a96){const _0x27f268=_0x588453;return _0x594a96[_0x27f268(0x678)]?this['targetDistortionSpritePosition'](_0x594a96):VisuMZ[_0x27f268(0x39a)][_0x27f268(0x64d)][_0x27f268(0x90a)](this,_0x594a96);},Sprite_Animation[_0x588453(0x755)]['targetDistortionSpritePosition']=function(_0x4e1a28){const _0x37674e=_0x588453;let _0x40c5ef=_0x4e1a28['x'],_0x105816=_0x4e1a28['y'],_0x2138d3=_0x4e1a28[_0x37674e(0x4ba)],_0x4f1ac9=_0x4e1a28[_0x37674e(0x678)][_0x37674e(0x30a)]['y'];_0x4e1a28['x']=_0x4e1a28[_0x37674e(0x494)]+_0x4e1a28[_0x37674e(0x410)](),_0x4e1a28['y']=_0x4e1a28[_0x37674e(0xaba)]+_0x4e1a28[_0x37674e(0x9a8)](),_0x4e1a28[_0x37674e(0x4ba)]*=_0x4f1ac9;let _0x31350e=VisuMZ[_0x37674e(0x39a)][_0x37674e(0x64d)][_0x37674e(0x90a)](this,_0x4e1a28);return _0x4e1a28['x']=_0x40c5ef,_0x4e1a28['y']=_0x105816,_0x4e1a28[_0x37674e(0x4ba)]=_0x2138d3,_0x31350e;},VisuMZ[_0x588453(0x39a)][_0x588453(0x6b2)]=Sprite_AnimationMV[_0x588453(0x755)][_0x588453(0xa81)],Sprite_AnimationMV[_0x588453(0x755)][_0x588453(0xa81)]=function(){const _0x1f8d39=_0x588453;VisuMZ[_0x1f8d39(0x39a)]['Sprite_AnimationMV_updatePosition'][_0x1f8d39(0x90a)](this);if(!SceneManager[_0x1f8d39(0x8b8)]())return;if(this[_0x1f8d39(0x7db)]['position']===0x3)this['x']=Math['round'](Graphics[_0x1f8d39(0x586)]/0x2),this['y']=Math[_0x1f8d39(0x422)](Graphics[_0x1f8d39(0x571)]/0x2);else{if(this[_0x1f8d39(0x99d)])return;}},Sprite_Damage[_0x588453(0x755)]['setupBattleCore']=function(_0x2d06c0){const _0x29e568=_0x588453,_0x10e577=_0x2d06c0[_0x29e568(0x6f1)]()||_0x2d06c0[_0x29e568(0x56d)]();if(_0x10e577['missed']||_0x10e577[_0x29e568(0x257)])this[_0x29e568(0x6a4)]=0x0,this['createMiss']();else{if(_0x10e577[_0x29e568(0x6b0)])this['_colorType']=_0x10e577[_0x29e568(0x7de)]>=0x0?0x0:0x1,this[_0x29e568(0x5ca)](_0x10e577[_0x29e568(0x7de)]);else _0x2d06c0[_0x29e568(0x610)]()&&_0x10e577[_0x29e568(0x4e0)]!==0x0&&(this['_colorType']=_0x10e577[_0x29e568(0x4e0)]>=0x0?0x2:0x3,this[_0x29e568(0x5ca)](_0x10e577[_0x29e568(0x4e0)]));}_0x10e577['critical']&&this[_0x29e568(0x3f2)]();},Sprite_Damage['prototype']['setup']=function(_0x1d2eb1){},Sprite_Damage[_0x588453(0x755)][_0x588453(0x5ca)]=function(_0x4da10c){const _0x26e15a=_0x588453;let _0x951c26=this[_0x26e15a(0x26d)](_0x4da10c);const _0xe3b61f=this[_0x26e15a(0x919)](),_0x5b69e7=Math['floor'](_0xe3b61f*0.75);for(let _0x4661c6=0x0;_0x4661c6<_0x951c26[_0x26e15a(0x6e3)];_0x4661c6++){const _0x502406=this[_0x26e15a(0x451)](_0x5b69e7,_0xe3b61f);_0x502406[_0x26e15a(0x590)][_0x26e15a(0x7ae)](_0x951c26[_0x4661c6],0x0,0x0,_0x5b69e7,_0xe3b61f,'center'),_0x502406['x']=(_0x4661c6-(_0x951c26[_0x26e15a(0x6e3)]-0x1)/0x2)*_0x5b69e7,_0x502406['dy']=-_0x4661c6;}},Sprite_Damage[_0x588453(0x755)][_0x588453(0x26d)]=function(_0x1cda93){const _0x1ab030=_0x588453;let _0x4e849b=Math[_0x1ab030(0x201)](_0x1cda93)[_0x1ab030(0xa4b)]();this[_0x1ab030(0x373)]()&&(_0x4e849b=VisuMZ[_0x1ab030(0x6d5)](_0x4e849b));const _0x17f4f0=VisuMZ['BattleCore'][_0x1ab030(0x90d)]['Damage'];let _0x137782='',_0x3f29c0='';switch(this[_0x1ab030(0x6a4)]){case 0x0:_0x137782=_0x17f4f0[_0x1ab030(0x5b9)]||'-%1',_0x3f29c0=TextManager['hp'];if(_0x1cda93===0x0)_0x137782='%1';break;case 0x1:_0x137782=_0x17f4f0[_0x1ab030(0x714)]||'+%1',_0x3f29c0=TextManager['hp'];break;case 0x2:_0x137782=_0x17f4f0['mpDamageFmt']||'-%1\x20MP',_0x3f29c0=TextManager['mp'];break;case 0x3:_0x137782=_0x17f4f0[_0x1ab030(0x8f1)]||_0x1ab030(0x33c),_0x3f29c0=TextManager['mp'];break;}return _0x137782[_0x1ab030(0x4a9)](_0x4e849b,_0x3f29c0)[_0x1ab030(0x4f2)]();},Sprite_Damage[_0x588453(0x755)]['useDigitGrouping']=function(){const _0x30be19=_0x588453;return Imported[_0x30be19(0xe0)]?VisuMZ[_0x30be19(0x244)][_0x30be19(0x90d)][_0x30be19(0x638)][_0x30be19(0x787)]:![];},Sprite_Damage[_0x588453(0x755)][_0x588453(0x3f2)]=function(){const _0x3a9d66=_0x588453,_0x2fb93f=VisuMZ[_0x3a9d66(0x39a)][_0x3a9d66(0x90d)][_0x3a9d66(0x69a)];_0x2fb93f[_0x3a9d66(0x53a)]=_0x2fb93f[_0x3a9d66(0x53a)]||[0x0,0x0,0x0,0x0],this[_0x3a9d66(0x617)]=_0x2fb93f[_0x3a9d66(0x53a)]['slice'](0x0),this[_0x3a9d66(0x5d6)]=_0x2fb93f['CriticalDuration']||0x1;},Sprite_Damage['prototype'][_0x588453(0xa62)]=function(_0xe25eec,_0x267967){const _0x222641=_0x588453;this[_0x222641(0x617)]=_0x267967[_0x222641(0x76b)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x222641(0x2c3)](this[_0x222641(0x617)]),this[_0x222641(0x5d6)]=_0x267967[_0x222641(0x45c)]||0x0;const _0xb4099a=this['fontSize'](),_0x40e7ab=Math['floor'](_0xb4099a*0x1e),_0x19a9b5=this['createChildSprite'](_0x40e7ab,_0xb4099a);_0x19a9b5[_0x222641(0x590)][_0x222641(0x655)]=ColorManager['getColor'](_0x267967['textColor']),_0x19a9b5['bitmap']['drawText'](_0xe25eec,0x0,0x0,_0x40e7ab,_0xb4099a,_0x222641(0x3bf)),_0x19a9b5['dy']=0x0;},Sprite_Damage[_0x588453(0x755)]['setupIconTextPopup']=function(_0x2b9b61,_0x4b4299,_0x3b6451){const _0x4c2198=_0x588453,_0x34ee42=Math[_0x4c2198(0x85e)](this[_0x4c2198(0x919)](),ImageManager[_0x4c2198(0x256)]),_0x3826db=Math[_0x4c2198(0x10a)](_0x34ee42*0x1e),_0x179ac8=this[_0x4c2198(0x451)](_0x3826db,_0x34ee42),_0x1623fd=ImageManager[_0x4c2198(0x547)]/0x2,_0x387300=_0x179ac8[_0x4c2198(0x590)][_0x4c2198(0x9b8)](_0x4b4299+'\x20');_0x179ac8[_0x4c2198(0x590)][_0x4c2198(0x655)]=ColorManager[_0x4c2198(0x74a)](_0x3b6451[_0x4c2198(0x655)]),_0x179ac8['bitmap'][_0x4c2198(0x7ae)](_0x4b4299,_0x1623fd,0x0,_0x3826db-_0x1623fd,_0x34ee42,_0x4c2198(0x3bf));const _0xa13af2=Math[_0x4c2198(0x422)]((_0x34ee42-ImageManager[_0x4c2198(0x256)])/0x2),_0x4e5c51=_0x3826db/0x2-ImageManager[_0x4c2198(0x547)]-_0x387300/0x2+_0x1623fd/0x2,_0x3066b2=ImageManager[_0x4c2198(0x90e)]('IconSet'),_0x859959=ImageManager[_0x4c2198(0x547)],_0x187e8c=ImageManager[_0x4c2198(0x256)],_0x35edb2=_0x2b9b61%0x10*_0x859959,_0x340f71=Math[_0x4c2198(0x10a)](_0x2b9b61/0x10)*_0x187e8c;_0x179ac8['bitmap'][_0x4c2198(0x8d3)](_0x3066b2,_0x35edb2,_0x340f71,_0x859959,_0x187e8c,_0x4e5c51,_0xa13af2),this['_flashColor']=_0x3b6451[_0x4c2198(0x76b)]||[0x0,0x0,0x0,0x0],this[_0x4c2198(0x617)]=JsonEx[_0x4c2198(0x2c3)](this[_0x4c2198(0x617)]),this['_flashDuration']=_0x3b6451[_0x4c2198(0x45c)]||0x0,_0x179ac8['dy']=0x0,_0x3b6451[_0x4c2198(0x87c)]&&(_0x179ac8['x']+=_0x3b6451[_0x4c2198(0x87c)]),_0x3b6451['offsetY']&&(_0x179ac8['dy']+=_0x3b6451[_0x4c2198(0x931)]);},VisuMZ[_0x588453(0x39a)][_0x588453(0x9bc)]=Sprite_Damage[_0x588453(0x755)][_0x588453(0x451)],Sprite_Damage[_0x588453(0x755)][_0x588453(0x451)]=function(_0x8ccded,_0x4de176){const _0x568517=_0x588453;return _0x4de176=Math[_0x568517(0x422)](_0x4de176*1.2),VisuMZ[_0x568517(0x39a)]['Sprite_Damage_createChildSprite'][_0x568517(0x90a)](this,_0x8ccded,_0x4de176);},VisuMZ[_0x588453(0x39a)][_0x588453(0x28d)]=Sprite_StateIcon['prototype'][_0x588453(0x660)],Sprite_StateIcon['prototype']['updateFrame']=function(){const _0x1c87cf=_0x588453;VisuMZ[_0x1c87cf(0x39a)]['Sprite_StateIcon_updateFrame'][_0x1c87cf(0x90a)](this),this[_0x1c87cf(0x8d6)]=this[_0x1c87cf(0x3bc)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x588453(0x2ef)]=Sprite_Weapon[_0x588453(0x755)][_0x588453(0x8a3)],Sprite_Weapon[_0x588453(0x755)][_0x588453(0x8a3)]=function(){const _0x260f0c=_0x588453;VisuMZ[_0x260f0c(0x39a)]['Sprite_Weapon_loadBitmap'][_0x260f0c(0x90a)](this),this['bitmap']&&(this[_0x260f0c(0x590)][_0x260f0c(0x89c)]=VisuMZ['BattleCore'][_0x260f0c(0x90d)][_0x260f0c(0x848)]['SmoothImage']);},VisuMZ[_0x588453(0x39a)][_0x588453(0x6cc)]=Sprite_Gauge[_0x588453(0x755)][_0x588453(0x3ee)],Sprite_Gauge[_0x588453(0x755)][_0x588453(0x3ee)]=function(){const _0x630de8=_0x588453;return this['_statusType']!==_0x630de8(0x535)?VisuMZ[_0x630de8(0x39a)][_0x630de8(0x90d)]['HpGauge']['AniDuration']??0x14:VisuMZ[_0x630de8(0x39a)][_0x630de8(0x6cc)][_0x630de8(0x90a)](this);};function Sprite_HpGauge(){const _0x2e20d5=_0x588453;this[_0x2e20d5(0x155)](...arguments);}Sprite_HpGauge[_0x588453(0x755)]=Object[_0x588453(0xa42)](Sprite_Gauge[_0x588453(0x755)]),Sprite_HpGauge[_0x588453(0x755)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x588453(0x155)]=function(){const _0x5038d1=_0x588453;Sprite_Gauge[_0x5038d1(0x755)][_0x5038d1(0x155)][_0x5038d1(0x90a)](this);},Sprite_HpGauge[_0x588453(0x755)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x588453(0x755)][_0x588453(0xdf)]=function(){const _0x383a91=_0x588453;this[_0x383a91(0x590)][_0x383a91(0x399)]();const _0x3a1cba=this[_0x383a91(0x487)]();!isNaN(_0x3a1cba)&&this[_0x383a91(0x17c)]();};function Sprite_EnemyName(){const _0x2b59bb=_0x588453;this[_0x2b59bb(0x155)](...arguments);}Sprite_EnemyName[_0x588453(0x755)]=Object[_0x588453(0xa42)](Sprite_Name['prototype']),Sprite_EnemyName['prototype'][_0x588453(0x671)]=Sprite_EnemyName,Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x155)]=function(){const _0x4a6cff=_0x588453;Sprite_Name[_0x4a6cff(0x755)][_0x4a6cff(0x155)]['call'](this),this[_0x4a6cff(0x6df)]();},Sprite_EnemyName['prototype'][_0x588453(0x423)]=function(){const _0x5d1699=_0x588453;Sprite_Name[_0x5d1699(0x755)][_0x5d1699(0x423)][_0x5d1699(0x90a)](this),this[_0x5d1699(0x8d6)]=0x0,this[_0x5d1699(0x122)]=null,this[_0x5d1699(0x4db)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x588453(0x6df)]=function(){const _0x5b5c27=_0x588453;VisuMZ['BattleCore'][_0x5b5c27(0x90d)][_0x5b5c27(0x732)][_0x5b5c27(0x8f7)]&&(this[_0x5b5c27(0x552)]=new Sprite_StateIcon(),this[_0x5b5c27(0x348)](this[_0x5b5c27(0x552)]));},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x64e)]=function(){const _0x47a606=_0x588453;return Graphics[_0x47a606(0x586)];},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x67b)]=function(){const _0x3e5557=_0x588453;return this[_0x3e5557(0x266)]=this[_0x3e5557(0x266)]||Window_Base[_0x3e5557(0x755)][_0x3e5557(0xaa9)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName['prototype'][_0x588453(0x919)]=function(){const _0x32ffb7=_0x588453;return VisuMZ['BattleCore']['Settings'][_0x32ffb7(0x732)][_0x32ffb7(0x2c4)]||$gameSystem[_0x32ffb7(0x527)]();},Sprite_EnemyName[_0x588453(0x755)]['linkSprite']=function(_0x325687){this['_linkedSprite']=_0x325687;},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x665)]=function(){const _0x253b0f=_0x588453;Sprite_Name[_0x253b0f(0x755)][_0x253b0f(0x665)][_0x253b0f(0x90a)](this),this[_0x253b0f(0xa65)](),this['updatePosition'](),this[_0x253b0f(0x8f0)](),this['updateOpacity']();},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0xdf)]=function(){const _0x2f455a=_0x588453;this[_0x2f455a(0x911)]=undefined;const _0x52a924=this['name'](),_0x3b866d=this[_0x2f455a(0x64e)](),_0x33ce81=Window_Base['prototype'][_0x2f455a(0xaa9)]();this[_0x2f455a(0x249)](),this[_0x2f455a(0x590)][_0x2f455a(0x399)](),this[_0x2f455a(0x590)][_0x2f455a(0x7ae)](_0x52a924,0x0,0x0,_0x3b866d,_0x33ce81,_0x2f455a(0x3bf));},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0xa65)]=function(){const _0x4c5449=_0x588453;if(!this[_0x4c5449(0x122)])return;this[_0x4c5449(0xab2)]!==this['_linkedSprite']['_battler']&&this[_0x4c5449(0x68d)](this[_0x4c5449(0x122)]['_battler']);},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0xa81)]=function(){const _0x2fa355=_0x588453;if(!this['_linkedSprite'])return;this[_0x2fa355(0x266)]=this['_lineHeight']||Window_Base[_0x2fa355(0x755)][_0x2fa355(0xaa9)](),this['x']=Math[_0x2fa355(0x422)](this['_linkedSprite'][_0x2fa355(0x494)]),this['y']=Math['round'](this[_0x2fa355(0x122)]['_baseY']-this['_lineHeight']*0.5);const _0x51b45a=VisuMZ[_0x2fa355(0x39a)][_0x2fa355(0x90d)][_0x2fa355(0x732)];this['x']+=Math[_0x2fa355(0x422)](_0x51b45a[_0x2fa355(0x55e)]||0x0),this['y']+=Math[_0x2fa355(0x422)](_0x51b45a[_0x2fa355(0xa79)]||0x0);},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x8f0)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x588453(0x755)]['updateStateIconSprite']=function(){const _0x5eaf8e=_0x588453;if(!this[_0x5eaf8e(0x552)])return;this[_0x5eaf8e(0xab2)]!==this['_stateIconSprite']['_battler']&&this[_0x5eaf8e(0x552)][_0x5eaf8e(0x68d)](this['_battler']);const _0x4fa34d=this[_0x5eaf8e(0x27a)]();this['_lineHeight']=this[_0x5eaf8e(0x266)]||Window_Base[_0x5eaf8e(0x755)]['lineHeight'](),this[_0x5eaf8e(0x552)]['x']=Math[_0x5eaf8e(0x422)]((_0x4fa34d+ImageManager[_0x5eaf8e(0x547)])/0x2)+0x8,this[_0x5eaf8e(0x552)]['y']=this[_0x5eaf8e(0x266)]/0x2;const _0x202e30=VisuMZ[_0x5eaf8e(0x39a)][_0x5eaf8e(0x90d)][_0x5eaf8e(0x732)];this[_0x5eaf8e(0x552)]['x']+=_0x202e30[_0x5eaf8e(0x677)]||0x0,this[_0x5eaf8e(0x552)]['y']+=_0x202e30['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x890)]=function(){const _0x173a3a=_0x588453,_0x2f42a1=this[_0x173a3a(0xa40)]();if(_0x2f42a1&&this['opacity']<0xff)this['opacity']+=0x10;else!_0x2f42a1&&this[_0x173a3a(0x8d6)]>0x0&&(this[_0x173a3a(0x8d6)]-=0x10);},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0xa40)]=function(){const _0x1983ee=_0x588453;if(this[_0x1983ee(0xe8)]())return![];else{if(!this[_0x1983ee(0xab2)])return![];else{if(!this[_0x1983ee(0xab2)][_0x1983ee(0x8ef)]())return![];else{if(this['temporaryVisibile']())return!![];else{if(this[_0x1983ee(0xab2)][_0x1983ee(0x8c6)]())return![];else{if(this['isBattlerTargeted']())return!![];else{if(this[_0x1983ee(0x855)]())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x1983ee(0x5d7)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x746)]=function(){const _0x2142d8=_0x588453;return this[_0x2142d8(0xab2)]&&this[_0x2142d8(0xab2)]['isNameTemporarilyVisible']();},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0xe8)]=function(){const _0x15877b=_0x588453;return VisuMZ[_0x15877b(0x39a)][_0x15877b(0x90d)][_0x15877b(0x732)][_0x15877b(0x874)];},Sprite_EnemyName['prototype'][_0x588453(0x1dc)]=function(){const _0x36dfae=_0x588453;return this[_0x36dfae(0xab2)]&&BattleManager[_0x36dfae(0x204)][_0x36dfae(0x51e)](this[_0x36dfae(0xab2)]);},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x855)]=function(){return![];},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x844)]=function(){const _0x41eb84=_0x588453;return VisuMZ[_0x41eb84(0x39a)][_0x41eb84(0x90d)][_0x41eb84(0x732)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x5d7)]=function(){const _0x141064=_0x588453;return VisuMZ[_0x141064(0x39a)][_0x141064(0x90d)]['Enemy'][_0x141064(0x329)]?this['_battler'][_0x141064(0x676)]():SceneManager['_scene'][_0x141064(0x62e)]&&SceneManager['_scene'][_0x141064(0x62e)][_0x141064(0x3ef)]&&SceneManager[_0x141064(0x39b)][_0x141064(0x62e)][_0x141064(0xaab)][_0x141064(0x51e)](this[_0x141064(0xab2)]);},Sprite_EnemyName[_0x588453(0x755)][_0x588453(0x27a)]=function(){const _0xda832=_0x588453;if(!this['_battler'])return 0x0;if(this[_0xda832(0x911)])return this['_cacheTextWidth'];const _0x3b6404=this['name']();return this[_0xda832(0x249)](),this[_0xda832(0x911)]=this[_0xda832(0x590)][_0xda832(0x9b8)](_0x3b6404)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x588453(0x39a)][_0x588453(0x2c6)]=Sprite_Battleback[_0x588453(0x755)][_0x588453(0xa94)],Sprite_Battleback[_0x588453(0x755)][_0x588453(0xa94)]=function(){const _0x128a3a=_0x588453,_0x374a65=VisuMZ[_0x128a3a(0x39a)][_0x128a3a(0x90d)][_0x128a3a(0x178)];if(!_0x374a65)return VisuMZ[_0x128a3a(0x39a)][_0x128a3a(0x2c6)][_0x128a3a(0x90a)](this);const _0xbb42ea=String(_0x374a65[_0x128a3a(0x7a0)])||'MZ';switch(_0xbb42ea){case'MZ':VisuMZ[_0x128a3a(0x39a)][_0x128a3a(0x2c6)]['call'](this);break;case _0x128a3a(0x82f):this[_0x128a3a(0x7bf)]();break;case'ScaleToFit':this[_0x128a3a(0x6cb)]();break;case _0x128a3a(0x50a):this[_0x128a3a(0x614)]();break;case'ScaleUp':this[_0x128a3a(0x69f)]();break;}},Sprite_Battleback[_0x588453(0x755)][_0x588453(0x7bf)]=function(){const _0x5701fe=_0x588453,_0x494912=VisuMZ['BattleCore'][_0x5701fe(0x90d)][_0x5701fe(0x178)];if(_0x494912&&_0x494912[_0x5701fe(0x811)])return _0x494912[_0x5701fe(0x811)][_0x5701fe(0x90a)](this);this['width']=Graphics[_0x5701fe(0x3ad)],this[_0x5701fe(0x4ba)]=Graphics[_0x5701fe(0x4ba)];const _0xd7c857=0x1;this[_0x5701fe(0x30a)]['x']=_0xd7c857,this[_0x5701fe(0x30a)]['y']=_0xd7c857,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x588453(0x6cb)]=function(){const _0x764f54=_0x588453,_0x34cc09=VisuMZ[_0x764f54(0x39a)]['Settings']['BattlebackScale'];if(_0x34cc09&&_0x34cc09['jsScaleToFit'])return _0x34cc09['jsScaleToFit']['call'](this);this[_0x764f54(0x3ad)]=Graphics[_0x764f54(0x3ad)],this[_0x764f54(0x4ba)]=Graphics[_0x764f54(0x4ba)];const _0x18b0fb=this[_0x764f54(0x3ad)]/this['bitmap'][_0x764f54(0x3ad)],_0x11de53=this[_0x764f54(0x4ba)]/this[_0x764f54(0x590)][_0x764f54(0x4ba)],_0xb14802=Math['max'](_0x18b0fb,_0x11de53);this[_0x764f54(0x30a)]['x']=_0xb14802,this[_0x764f54(0x30a)]['y']=_0xb14802,this['x']=(Graphics[_0x764f54(0x3ad)]-this[_0x764f54(0x3ad)])/0x2,this['y']=Graphics[_0x764f54(0x4ba)]-this[_0x764f54(0x4ba)];},Sprite_Battleback[_0x588453(0x755)]['adjustPosition_ScaleDown']=function(){const _0x9ff4bc=_0x588453,_0x3ff991=VisuMZ['BattleCore']['Settings'][_0x9ff4bc(0x178)];if(_0x3ff991&&_0x3ff991['jsScaleDown'])return _0x3ff991[_0x9ff4bc(0x110)][_0x9ff4bc(0x90a)](this);this['width']=Graphics[_0x9ff4bc(0x3ad)],this['height']=Graphics[_0x9ff4bc(0x4ba)];const _0x5be1c4=Math[_0x9ff4bc(0x31b)](0x1,this['width']/this[_0x9ff4bc(0x590)][_0x9ff4bc(0x3ad)]),_0xd368f4=Math['min'](0x1,this[_0x9ff4bc(0x4ba)]/this[_0x9ff4bc(0x590)]['height']),_0x126703=Math[_0x9ff4bc(0x85e)](_0x5be1c4,_0xd368f4);this['scale']['x']=_0x126703,this[_0x9ff4bc(0x30a)]['y']=_0x126703,this['x']=(Graphics[_0x9ff4bc(0x3ad)]-this[_0x9ff4bc(0x3ad)])/0x2,this['y']=Graphics[_0x9ff4bc(0x4ba)]-this[_0x9ff4bc(0x4ba)];},Sprite_Battleback[_0x588453(0x755)][_0x588453(0x69f)]=function(){const _0x4f257e=_0x588453,_0x30f57b=VisuMZ['BattleCore'][_0x4f257e(0x90d)][_0x4f257e(0x178)];if(_0x30f57b&&_0x30f57b['jsScaleUp'])return _0x30f57b['jsScaleUp']['call'](this);this['width']=Graphics['width'],this[_0x4f257e(0x4ba)]=Graphics[_0x4f257e(0x4ba)];const _0x365464=Math['max'](0x1,this[_0x4f257e(0x3ad)]/this['bitmap'][_0x4f257e(0x3ad)]),_0x3600c4=Math['max'](0x1,this[_0x4f257e(0x4ba)]/this[_0x4f257e(0x590)]['height']),_0x2dc224=Math[_0x4f257e(0x85e)](_0x365464,_0x3600c4);this[_0x4f257e(0x30a)]['x']=_0x2dc224,this[_0x4f257e(0x30a)]['y']=_0x2dc224,this['x']=(Graphics[_0x4f257e(0x3ad)]-this['width'])/0x2,this['y']=Graphics['height']-this['height'];},Spriteset_Battle[_0x588453(0x2b5)]=VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0xac6)][_0x588453(0x5ba)]??!![],Spriteset_Battle[_0x588453(0x755)][_0x588453(0x9f3)]=function(){const _0xa56b91=_0x588453;if(!$gameSystem[_0xa56b91(0x879)]())return![];return![];},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x68b)]=function(){return 0x0;},Spriteset_Battle[_0x588453(0x755)][_0x588453(0xae0)]=function(){return 0x0;},VisuMZ['BattleCore'][_0x588453(0x519)]=Spriteset_Battle[_0x588453(0x755)][_0x588453(0x8c9)],Spriteset_Battle[_0x588453(0x755)][_0x588453(0x8c9)]=function(){const _0x12dda0=_0x588453;VisuMZ[_0x12dda0(0x39a)][_0x12dda0(0x519)]['call'](this),this[_0x12dda0(0x274)](),this[_0x12dda0(0x82d)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x18e)]=Spriteset_Battle[_0x588453(0x755)]['update'],Spriteset_Battle['prototype'][_0x588453(0x665)]=function(){const _0x238715=_0x588453;VisuMZ['BattleCore'][_0x238715(0x18e)][_0x238715(0x90a)](this),this['updateBattlerContainer'](),this[_0x238715(0x7ce)](),this[_0x238715(0x982)](),this[_0x238715(0x7e9)]();},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x274)]=function(){const _0xc1d27f=_0x588453;this['_weather']=new Weather(),this[_0xc1d27f(0x8bb)][_0xc1d27f(0x348)](this[_0xc1d27f(0x91d)]);},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x982)]=function(){const _0x1b79ea=_0x588453;this[_0x1b79ea(0x91d)][_0x1b79ea(0xa5f)]=$gameScreen[_0x1b79ea(0x93a)](),this['_weather']['power']=$gameScreen[_0x1b79ea(0x575)]();},Game_Interpreter[_0x588453(0x755)][_0x588453(0x468)]=function(_0x144c9c){const _0x3620b0=_0x588453;$gameScreen['changeWeather'](_0x144c9c[0x0],_0x144c9c[0x1],_0x144c9c[0x2]);if(_0x144c9c[0x3])this[_0x3620b0(0x539)](_0x144c9c[0x2]);return!![];},VisuMZ['BattleCore'][_0x588453(0x96c)]=Game_Interpreter['prototype'][_0x588453(0x13d)],Game_Interpreter['prototype'][_0x588453(0x13d)]=function(_0x3b775d){const _0x3f662e=_0x588453;return SceneManager[_0x3f662e(0x8b8)]()?(SceneManager[_0x3f662e(0x39b)]['_spriteset'][_0x3f662e(0x143)](_0x3b775d[0x0],_0x3b775d[0x1]),!![]):VisuMZ[_0x3f662e(0x39a)]['Game_Interpreter_command283']['call'](this,_0x3b775d);},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x75f)]=function(_0x1587e6,_0x159ce8){_0x1587e6['bitmap']=_0x159ce8;},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x143)]=function(_0x1b06bc,_0x511a26){const _0x1a9ddf=_0x588453;_0x1b06bc=_0x1b06bc||'',_0x511a26=_0x511a26||'';_0x1b06bc===''&&_0x511a26===''&&(_0x1b06bc=this[_0x1a9ddf(0xa3d)][_0x1a9ddf(0x6a6)](),_0x511a26=this[_0x1a9ddf(0x123)]['battleback2Name']());const _0x38e81e=ImageManager[_0x1a9ddf(0x8f2)](_0x1b06bc),_0x171cf1=ImageManager[_0x1a9ddf(0x7dc)](_0x511a26);_0x38e81e[_0x1a9ddf(0x454)](this[_0x1a9ddf(0x44f)]['bind'](this,this[_0x1a9ddf(0xa3d)],this[_0x1a9ddf(0x123)],_0x38e81e,_0x171cf1));},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x44f)]=function(_0x3f4b0d,_0x5c122d,_0x2ac946,_0x1001c2){const _0x1f5b67=_0x588453;_0x1001c2[_0x1f5b67(0x454)](this[_0x1f5b67(0x7f5)][_0x1f5b67(0x80e)](this,_0x3f4b0d,_0x5c122d,_0x2ac946,_0x1001c2));},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x7f5)]=function(_0x5c63,_0x423d15,_0x1607fe,_0xcda9ce){const _0x320668=_0x588453;_0x5c63[_0x320668(0x590)]=_0x1607fe,_0x423d15[_0x320668(0x590)]=_0xcda9ce,_0x5c63[_0x320668(0xa94)](),_0x423d15[_0x320668(0xa94)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x8ed)]=Spriteset_Battle[_0x588453(0x755)][_0x588453(0x17a)],Spriteset_Battle[_0x588453(0x755)]['createBattleField']=function(){const _0x308a33=_0x588453;VisuMZ[_0x308a33(0x39a)][_0x308a33(0x8ed)]['call'](this),this[_0x308a33(0x4bc)]();},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x4bc)]=function(){const _0x3819d0=_0x588453;this[_0x3819d0(0x4c2)](),this[_0x3819d0(0x789)](),this[_0x3819d0(0x788)](),this['createDamageContainer'](),this['adjustFlippedBattlefield']();},Spriteset_Battle['prototype'][_0x588453(0x4c2)]=function(){const _0x1dd939=_0x588453;this[_0x1dd939(0x663)]=new Sprite(),this['_battleField'][_0x1dd939(0x348)](this[_0x1dd939(0x663)]);},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x788)]=function(){const _0x4b8ff7=_0x588453;this[_0x4b8ff7(0x6c5)]=new Sprite(),Spriteset_Battle[_0x4b8ff7(0x2b5)]?this[_0x4b8ff7(0x348)](this[_0x4b8ff7(0x6c5)]):this[_0x4b8ff7(0x8bb)]['addChild'](this[_0x4b8ff7(0x6c5)]);},Spriteset_Battle['prototype'][_0x588453(0x18c)]=function(){const _0x5217c2=_0x588453;this[_0x5217c2(0x37c)]=new Sprite(),this[_0x5217c2(0x37c)]['x']=this[_0x5217c2(0x8bb)]['x'],this[_0x5217c2(0x37c)]['y']=this[_0x5217c2(0x8bb)]['y'],this[_0x5217c2(0x348)](this[_0x5217c2(0x37c)]);},Spriteset_Battle['prototype'][_0x588453(0x930)]=function(){const _0x5cc3d8=_0x588453;if(!this['isFlipped']())return;this[_0x5cc3d8(0x663)][_0x5cc3d8(0x30a)]['x']=-0x1,this[_0x5cc3d8(0x663)]['x']=this[_0x5cc3d8(0x8bb)]['width'],this[_0x5cc3d8(0x9dd)][_0x5cc3d8(0x30a)]['x']=-0x1,this['_uiContainer']['x']=this['_battleField'][_0x5cc3d8(0x3ad)],this[_0x5cc3d8(0x6c5)]['scale']['x']=-0x1,this[_0x5cc3d8(0x6c5)]['x']=this['_battleField'][_0x5cc3d8(0x3ad)],this[_0x5cc3d8(0x37c)][_0x5cc3d8(0x30a)]['x']=-0x1,this['_damageContainer']['x']=this[_0x5cc3d8(0x8bb)]['x']+this[_0x5cc3d8(0x8bb)][_0x5cc3d8(0x3ad)];},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x21a)]=function(){const _0xa38d4c=_0x588453;Imported[_0xa38d4c(0xe0)]&&this[_0xa38d4c(0x5d5)]()&&this['repositionEnemiesByResolution']();const _0x438dfb=$gameTroop[_0xa38d4c(0x425)](),_0x378651=[];for(const _0x195c27 of _0x438dfb){_0x378651['push'](new Sprite_Enemy(_0x195c27));}_0x378651[_0xa38d4c(0x882)](this[_0xa38d4c(0x398)][_0xa38d4c(0x80e)](this));for(const _0x122492 of _0x378651){this[_0xa38d4c(0x663)][_0xa38d4c(0x348)](_0x122492);}this[_0xa38d4c(0x7d4)]=_0x378651;},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x576)]=function(){const _0x20e297=_0x588453;this[_0x20e297(0x7fd)]=[];for(let _0x5017da=0x0;_0x5017da<$gameParty[_0x20e297(0x69c)]();_0x5017da++){const _0x111318=$gameParty[_0x20e297(0x988)]()[_0x5017da],_0x2ddf50=new Sprite_Actor();_0x2ddf50[_0x20e297(0x6a1)](_0x111318),_0x2ddf50['setBattler'](_0x111318),_0x2ddf50['update'](),this[_0x20e297(0x7fd)][_0x20e297(0x2b9)](_0x2ddf50),this['_battlerContainer'][_0x20e297(0x348)](_0x2ddf50);}},Spriteset_Battle['prototype'][_0x588453(0x258)]=function(_0x24ddcc,_0x2b63a1,_0x5aba5d,_0x367ec5){const _0x293cef=_0x588453,_0x1bce42=this[_0x293cef(0x377)](_0x2b63a1),_0xaa9ed0=new(_0x1bce42?Sprite_AnimationMV:Sprite_Animation)(),_0x2d295d=this[_0x293cef(0x235)](_0x24ddcc);this[_0x293cef(0x56a)](_0x24ddcc[0x0])&&(_0x5aba5d=!_0x5aba5d),_0xaa9ed0['targetObjects']=_0x24ddcc,_0xaa9ed0[_0x293cef(0x68d)](_0x2d295d,_0x2b63a1,_0x5aba5d,_0x367ec5),this[_0x293cef(0x621)](_0xaa9ed0);},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x621)]=function(_0x292c80){const _0x418ddc=_0x588453;this[_0x418ddc(0x6d6)](_0x292c80)?(this['battleStatusWindowAnimationContainer']()[_0x418ddc(0x348)](_0x292c80),_0x292c80[_0x418ddc(0x99d)]=!![]):(this[_0x418ddc(0x6c5)]['addChild'](_0x292c80),Spriteset_Battle['ANTI_TINT_UI']&&(this['_animationContainer']['x']=this[_0x418ddc(0x46b)]['x'],this['_animationContainer']['y']=this[_0x418ddc(0x46b)]['y'])),this['_animationSprites'][_0x418ddc(0x2b9)](_0x292c80);},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x6d6)]=function(_0x27dc47){const _0x4eb712=_0x588453;if(!_0x27dc47)return![];if(!_0x27dc47['_animation'])return![];if(!_0x27dc47[_0x4eb712(0x17d)][0x0])return![];if(_0x27dc47[_0x4eb712(0x17d)][0x0]['isActor']&&!_0x27dc47['targetObjects'][0x0]['isActor']())return![];if($gameSystem[_0x4eb712(0x879)]())return![];if(!this[_0x4eb712(0x887)]())return![];if(_0x27dc47[_0x4eb712(0x671)]===Sprite_Animation){if(_0x27dc47[_0x4eb712(0x7db)][_0x4eb712(0x77b)]!==0x0)return![];}else{if(_0x27dc47[_0x4eb712(0x671)]===Sprite_AnimationMV){if(_0x27dc47['_animation'][_0x4eb712(0x282)]===0x3)return![];}}return!![];const _0x5d6cc3=Window_BattleStatus[_0x4eb712(0x755)][_0x4eb712(0x80f)]();return['xp',_0x4eb712(0x418)]['contains'](_0x5d6cc3);},Spriteset_Battle[_0x588453(0x755)]['battleStatusWindowAnimationContainer']=function(){const _0x5c38eb=_0x588453;if(!SceneManager[_0x5c38eb(0x39b)])return null;if(!SceneManager[_0x5c38eb(0x39b)][_0x5c38eb(0x8e5)])return null;if(!SceneManager['_scene'][_0x5c38eb(0x8e5)][_0x5c38eb(0x46b)])return null;return SceneManager['_scene'][_0x5c38eb(0x8e5)][_0x5c38eb(0x46b)];},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x203)]=function(_0x1659f4){const _0x52bcb1=_0x588453;this[_0x52bcb1(0x98b)](_0x1659f4);for(const _0x2b78a9 of _0x1659f4[_0x52bcb1(0x17d)]){_0x2b78a9[_0x52bcb1(0x2cf)]&&_0x2b78a9[_0x52bcb1(0x2cf)]();}_0x1659f4[_0x52bcb1(0x9b9)]();},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x98b)]=function(_0xaf9f9d){const _0x58786a=_0x588453;this[_0x58786a(0x6d6)](_0xaf9f9d)?this[_0x58786a(0x887)]()[_0x58786a(0x781)](_0xaf9f9d):this[_0x58786a(0x6c5)][_0x58786a(0x781)](_0xaf9f9d);this[_0x58786a(0x46b)][_0x58786a(0x781)](_0xaf9f9d),this['_animationContainer'][_0x58786a(0x781)](_0xaf9f9d),this[_0x58786a(0x14e)][_0x58786a(0xaee)](_0xaf9f9d);if(this[_0x58786a(0x3f0)])this['_fauxAnimationSprites'][_0x58786a(0xaee)](_0xaf9f9d);},VisuMZ[_0x588453(0x39a)][_0x588453(0x24b)]=Spriteset_Battle[_0x588453(0x755)]['updateActors'],Spriteset_Battle['prototype'][_0x588453(0x84f)]=function(){const _0x1ed247=_0x588453;VisuMZ[_0x1ed247(0x39a)]['Spriteset_Battle_updateActors'][_0x1ed247(0x90a)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x1cf)]=function(){const _0x41a723=_0x588453;this[_0x41a723(0x663)][_0x41a723(0x816)][_0x41a723(0x882)](this['compareBattlerSprites'][_0x41a723(0x80e)](this)),this['putActiveBattlerOnTop']();if(!this['_battlerContainer'])return;this[_0x41a723(0x663)][_0x41a723(0x8d6)]=this[_0x41a723(0xa23)]();},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x3c6)]=function(_0x170768,_0x4d85df){const _0x2c4428=_0x588453;if(VisuMZ[_0x2c4428(0x39a)]['Settings'][_0x2c4428(0x848)]['PrioritySortActors']){if(_0x170768[_0x2c4428(0xab2)]&&_0x4d85df[_0x2c4428(0xab2)]){if(_0x170768['_battler'][_0x2c4428(0xa52)]()&&_0x4d85df['_battler'][_0x2c4428(0x4ad)]())return 0x1;else{if(_0x4d85df[_0x2c4428(0xab2)][_0x2c4428(0xa52)]()&&_0x170768[_0x2c4428(0xab2)]['isEnemy']())return-0x1;}}}return _0x170768[_0x2c4428(0xaba)]!==_0x4d85df[_0x2c4428(0xaba)]?_0x170768[_0x2c4428(0xaba)]-_0x4d85df[_0x2c4428(0xaba)]:_0x4d85df[_0x2c4428(0x230)]-_0x170768[_0x2c4428(0x230)];},Spriteset_Battle['prototype'][_0x588453(0x490)]=function(){const _0x3435e3=_0x588453;if(!VisuMZ[_0x3435e3(0x39a)][_0x3435e3(0x90d)][_0x3435e3(0x848)][_0x3435e3(0x1d2)])return;const _0x2e7e07=BattleManager['_subject'];if(_0x2e7e07){if(_0x2e7e07[_0x3435e3(0xa52)]()&&!$gameSystem[_0x3435e3(0x879)]())return;if(_0x2e7e07===BattleManager[_0x3435e3(0x112)]())return;const _0x3a4758=_0x2e7e07[_0x3435e3(0xabe)]();if(_0x3a4758&&_0x2e7e07[_0x3435e3(0xa52)]())this['_battlerContainer'][_0x3435e3(0x348)](_0x3a4758);}},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x5ae)]=function(){const _0xf1807a=_0x588453;for(const _0x1d4400 of $gameParty[_0xf1807a(0x157)]()){if(!_0x1d4400)continue;if(!_0x1d4400[_0xf1807a(0xabe)]())continue;_0x1d4400[_0xf1807a(0xabe)]()[_0xf1807a(0x193)]=!![],_0x1d4400['battler']()['retreat']();}},Spriteset_Battle[_0x588453(0x755)]['createUIContainer']=function(){const _0x4154de=_0x588453;this[_0x4154de(0x9dd)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x4154de(0x348)](this[_0x4154de(0x9dd)]):this[_0x4154de(0x8bb)][_0x4154de(0x348)](this['_uiContainer']),SceneManager[_0x4154de(0x39b)]['_uiContainer']=this['_uiContainer'];},Spriteset_Battle[_0x588453(0x755)]['createEnemyNames']=function(){const _0x260d77=_0x588453;if(VisuMZ[_0x260d77(0x39a)][_0x260d77(0x90d)][_0x260d77(0x732)]['NameLegacy'])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x260d77(0x9f1)](this[_0x260d77(0x21b)]);for(const _0x3dae67 of this[_0x260d77(0x7d4)]){const _0x12010a=new Sprite_EnemyName();this['_enemyNameContainer'][_0x260d77(0x348)](_0x12010a),_0x12010a['linkSprite'](_0x3dae67);}},Spriteset_Battle['prototype'][_0x588453(0x7ce)]=function(){const _0x730d44=_0x588453;if(!this['_damageContainer'])return;if(!this[_0x730d44(0x9dd)])return;const _0x5c033f=Spriteset_Battle['ANTI_TINT_UI']?this[_0x730d44(0x37c)]['x']:0x0,_0x407c2e=Spriteset_Battle[_0x730d44(0x2b5)]?this[_0x730d44(0x37c)]['y']:0x0,_0x2b4d71=Imported[_0x730d44(0x372)]?this[_0x730d44(0x8bb)]['x']:0x0,_0x4495d0=Imported['VisuMZ_3_ActSeqCamera']?this[_0x730d44(0x8bb)]['y']:0x0;this[_0x730d44(0x9dd)]['x']=_0x5c033f+_0x2b4d71,this[_0x730d44(0x9dd)]['y']=_0x407c2e+_0x4495d0;},BattleManager[_0x588453(0x9f1)]=function(_0x8491f3){const _0x22d74f=_0x588453;if(!SceneManager[_0x22d74f(0x39b)][_0x22d74f(0x9dd)])return;SceneManager[_0x22d74f(0x39b)]['_uiContainer'][_0x22d74f(0x348)](_0x8491f3);},BattleManager[_0x588453(0x5bc)]=function(_0x3c3e2d){const _0x526bab=_0x588453;if(!SceneManager[_0x526bab(0x39b)]['_uiContainer'])return;SceneManager[_0x526bab(0x39b)][_0x526bab(0x9dd)][_0x526bab(0x781)](_0x3c3e2d);},Spriteset_Battle['prototype'][_0x588453(0xa23)]=function(){return 0xff;},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x98c)]=function(){return![];},Spriteset_Battle[_0x588453(0x755)]['isAnyoneFloating']=function(){const _0x54ba4c=_0x588453;return this[_0x54ba4c(0x242)]()[_0x54ba4c(0x534)](_0x566ea7=>_0x566ea7[_0x54ba4c(0x20f)]());},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x13e)]=function(){const _0x1c0716=_0x588453;return this[_0x1c0716(0x242)]()['some'](_0x25beee=>_0x25beee[_0x1c0716(0x6f7)]());},Spriteset_Battle[_0x588453(0x755)]['isAnyoneGrowing']=function(){const _0x3bb22f=_0x588453;return this[_0x3bb22f(0x242)]()['some'](_0x7715a7=>_0x7715a7[_0x3bb22f(0x2db)]());},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x43c)]=function(){const _0x3103e5=_0x588453;return this[_0x3103e5(0x242)]()['some'](_0x49f96e=>_0x49f96e[_0x3103e5(0x279)]());},Spriteset_Battle[_0x588453(0x755)]['isAnyoneSpinning']=function(){const _0x5eee09=_0x588453;return this[_0x5eee09(0x242)]()[_0x5eee09(0x534)](_0x5881d0=>_0x5881d0[_0x5eee09(0x762)]());},Spriteset_Battle[_0x588453(0x755)][_0x588453(0x3f8)]=function(){const _0xadf50e=_0x588453;return this[_0xadf50e(0x242)]()['some'](_0x155e11=>_0x155e11['isChangingOpacity']());},VisuMZ[_0x588453(0x39a)][_0x588453(0x4be)]=Window_ItemList['prototype']['maxCols'],Window_ItemList['prototype']['maxCols']=function(){const _0x4f6340=_0x588453;return SceneManager['isSceneBattle']()?SceneManager[_0x4f6340(0x39b)][_0x4f6340(0x80f)]()===_0x4f6340(0x469)?VisuMZ['BattleCore'][_0x4f6340(0x90d)][_0x4f6340(0xac6)]['SkillItemBorderCols']:VisuMZ[_0x4f6340(0x39a)][_0x4f6340(0x90d)][_0x4f6340(0xac6)][_0x4f6340(0xa8b)]:VisuMZ[_0x4f6340(0x39a)]['Window_ItemList_maxCols']['call'](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0x206)]=Window_SkillList['prototype']['maxCols'],Window_SkillList['prototype'][_0x588453(0x8e7)]=function(){const _0x337698=_0x588453;return SceneManager['isSceneBattle']()?SceneManager[_0x337698(0x39b)][_0x337698(0x80f)]()==='border'?VisuMZ[_0x337698(0x39a)][_0x337698(0x90d)]['BattleLayout'][_0x337698(0x6f6)]:VisuMZ[_0x337698(0x39a)][_0x337698(0x90d)][_0x337698(0xac6)][_0x337698(0xa8b)]:VisuMZ[_0x337698(0x39a)]['Window_SkillList_maxCols'][_0x337698(0x90a)](this);},VisuMZ['BattleCore']['Window_Options_addGeneralOptions']=Window_Options['prototype'][_0x588453(0x85c)],Window_Options['prototype']['addGeneralOptions']=function(){const _0x1d5da3=_0x588453;VisuMZ[_0x1d5da3(0x39a)]['Window_Options_addGeneralOptions']['call'](this),this[_0x1d5da3(0x363)](),this['addShowHpGaugeCommand']();},Window_Options[_0x588453(0x755)][_0x588453(0x363)]=function(){const _0x8eee60=_0x588453;VisuMZ[_0x8eee60(0x39a)][_0x8eee60(0x90d)][_0x8eee60(0x23c)]['AddOption']&&(this[_0x8eee60(0x6a8)](),this[_0x8eee60(0x646)]());},Window_Options[_0x588453(0x755)][_0x588453(0x93b)]=function(){const _0x2a17be=_0x588453;if(!VisuMZ[_0x2a17be(0x39a)][_0x2a17be(0x90d)]['HpGauge']['AddHpGaugeOption'])return;const _0xa19a8e=TextManager[_0x2a17be(0x8a2)],_0x1ddb74='visualHpGauge';this[_0x2a17be(0x9b4)](_0xa19a8e,_0x1ddb74);},Window_Options[_0x588453(0x755)][_0x588453(0x6a8)]=function(){const _0x4ac51b=_0x588453,_0x56341f=TextManager[_0x4ac51b(0x3f4)],_0x171ece=_0x4ac51b(0xab4);this[_0x4ac51b(0x9b4)](_0x56341f,_0x171ece);},Window_Options[_0x588453(0x755)][_0x588453(0x646)]=function(){const _0x3052f0=_0x588453,_0x985518=TextManager[_0x3052f0(0xa31)],_0xb8d48c=_0x3052f0(0x3dc);this['addCommand'](_0x985518,_0xb8d48c);},VisuMZ[_0x588453(0x39a)][_0x588453(0x2a6)]=Window_Options['prototype'][_0x588453(0x447)],Window_Options['prototype'][_0x588453(0x447)]=function(_0x33752e){const _0x156fac=_0x588453,_0x1fdd9e=this[_0x156fac(0x542)](_0x33752e);return _0x1fdd9e===_0x156fac(0x3dc)?this[_0x156fac(0x401)]():VisuMZ[_0x156fac(0x39a)][_0x156fac(0x2a6)][_0x156fac(0x90a)](this,_0x33752e);},Window_Options[_0x588453(0x755)][_0x588453(0x401)]=function(){const _0x3dc88e=_0x588453,_0x1a7073=VisuMZ['BattleCore'][_0x3dc88e(0x90d)][_0x3dc88e(0x23c)],_0x476001=this[_0x3dc88e(0x236)](_0x3dc88e(0x3dc));return _0x476001?_0x1a7073[_0x3dc88e(0x210)]:_0x1a7073[_0x3dc88e(0x528)];},Window_ShopStatus[_0x588453(0x755)][_0x588453(0x2c1)]=function(){const _0x2b78e7=_0x588453,_0x2b6f47=DataManager[_0x2b78e7(0xf8)](this[_0x2b78e7(0x51b)]),_0xd75386=VisuMZ[_0x2b78e7(0x8fb)][_0x2b6f47];if(!_0xd75386)return this[_0x2b78e7(0x962)]();const _0x47c089=_0x2b78e7(0x137)['format'](this['_item'][_0x2b78e7(0x4b5)]['type']),_0x37da39=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2b78e7(0x51b)][_0x2b78e7(0x4b5)][_0x2b78e7(0xa5f)]];return _0xd75386[_0x47c089][_0x2b78e7(0x4a9)](_0x37da39);},Window_ShopStatus[_0x588453(0x755)][_0x588453(0x1e8)]=function(){const _0x164624=_0x588453,_0x2aba47=DataManager[_0x164624(0xf8)](this['_item']),_0x4a6813=VisuMZ[_0x164624(0x8fb)][_0x2aba47];if(!_0x4a6813)return this[_0x164624(0x355)]();return _0x4a6813['DamageDisplay'][_0x164624(0x90a)](this);},VisuMZ[_0x588453(0x39a)][_0x588453(0xa04)]=Window_PartyCommand['prototype'][_0x588453(0x155)],Window_PartyCommand[_0x588453(0x755)][_0x588453(0x155)]=function(_0x368736){const _0x541f59=_0x588453;VisuMZ['BattleCore'][_0x541f59(0xa04)][_0x541f59(0x90a)](this,_0x368736),this[_0x541f59(0x57a)](_0x368736);},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x57a)]=function(_0x2f7cb1){const _0x4a0ff5=_0x588453,_0x55f543=new Rectangle(0x0,0x0,_0x2f7cb1[_0x4a0ff5(0x3ad)],_0x2f7cb1[_0x4a0ff5(0x4ba)]);this['_commandNameWindow']=new Window_Base(_0x55f543),this['_commandNameWindow'][_0x4a0ff5(0x8d6)]=0x0,this[_0x4a0ff5(0x348)](this['_commandNameWindow']),this[_0x4a0ff5(0x1f8)]();},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x769)]=function(){const _0x3513b9=_0x588453;Window_Command[_0x3513b9(0x755)][_0x3513b9(0x769)][_0x3513b9(0x90a)](this);if(this[_0x3513b9(0x435)])this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x588453(0x1f8)]=function(){const _0x3d63e4=_0x588453,_0x115143=this[_0x3d63e4(0x435)];_0x115143[_0x3d63e4(0xaf2)][_0x3d63e4(0x399)]();const _0x47d113=this['commandStyleCheck'](this[_0x3d63e4(0x48d)]());if(_0x47d113==='icon'&&this['maxItems']()>0x0){const _0x33cc00=this['itemLineRect'](this[_0x3d63e4(0x48d)]());let _0x2ed8fb=this[_0x3d63e4(0x820)](this[_0x3d63e4(0x48d)]());_0x2ed8fb=_0x2ed8fb['replace'](/\\I\[(\d+)\]/gi,''),_0x115143[_0x3d63e4(0x225)](),this[_0x3d63e4(0x4ae)](_0x2ed8fb,_0x33cc00),this[_0x3d63e4(0x478)](_0x2ed8fb,_0x33cc00),this[_0x3d63e4(0x7b9)](_0x2ed8fb,_0x33cc00);}},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x4ae)]=function(_0x5aeca2,_0x2229f8){},Window_PartyCommand[_0x588453(0x755)]['commandNameWindowDrawText']=function(_0x3b681e,_0x8f9ea9){const _0x274497=_0x588453,_0x32097a=this['_commandNameWindow'];_0x32097a[_0x274497(0x7ae)](_0x3b681e,0x0,_0x8f9ea9['y'],_0x32097a[_0x274497(0x486)],_0x274497(0x3bf));},Window_PartyCommand['prototype'][_0x588453(0x7b9)]=function(_0x1e9de6,_0x421ca3){const _0x4fa6cf=_0x588453,_0x2f9007=this[_0x4fa6cf(0x435)],_0x2450a4=$gameSystem['windowPadding'](),_0x3044d9=_0x421ca3['x']+Math[_0x4fa6cf(0x10a)](_0x421ca3[_0x4fa6cf(0x3ad)]/0x2)+_0x2450a4;_0x2f9007['x']=_0x2f9007[_0x4fa6cf(0x3ad)]/-0x2+_0x3044d9,_0x2f9007['y']=Math[_0x4fa6cf(0x10a)](_0x421ca3[_0x4fa6cf(0x4ba)]/0x2);},Window_PartyCommand[_0x588453(0x755)]['makeCommandList']=function(){const _0x4b2aba=_0x588453;this[_0x4b2aba(0x34f)](),this[_0x4b2aba(0x4b3)](),this[_0x4b2aba(0xace)](),this[_0x4b2aba(0x465)](),this['addEscapeCommand']();},Window_PartyCommand['prototype'][_0x588453(0x34f)]=function(){const _0x313158=_0x588453,_0x3ac088=this[_0x313158(0x842)](),_0x6d3a97=VisuMZ[_0x313158(0x39a)][_0x313158(0x90d)][_0x313158(0x6d4)][_0x313158(0x8bd)],_0x2e97c1=_0x3ac088===_0x313158(0x954)?TextManager[_0x313158(0x7f6)]:_0x313158(0x1ae)[_0x313158(0x4a9)](_0x6d3a97,TextManager[_0x313158(0x7f6)]),_0x3d1b64=this[_0x313158(0x49b)]();this[_0x313158(0x9b4)](_0x2e97c1,_0x313158(0x7f6),_0x3d1b64);},Window_PartyCommand[_0x588453(0x755)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x4b3)]=function(){const _0x284d19=_0x588453;if(!this['isAutoBattleCommandAdded']())return;const _0x3651cf=this['commandStyle'](),_0x3f6ac2=VisuMZ[_0x284d19(0x39a)][_0x284d19(0x90d)][_0x284d19(0x6d4)][_0x284d19(0x51c)],_0x26dd6f=_0x3651cf===_0x284d19(0x954)?TextManager['autoBattle']:_0x284d19(0x1ae)[_0x284d19(0x4a9)](_0x3f6ac2,TextManager[_0x284d19(0xab8)]),_0x5b8fa4=this[_0x284d19(0x5a5)]();this[_0x284d19(0x9b4)](_0x26dd6f,_0x284d19(0xab8),_0x5b8fa4);},Window_PartyCommand[_0x588453(0x755)]['isAutoBattleCommandAdded']=function(){const _0x374a8a=_0x588453;return VisuMZ[_0x374a8a(0x39a)][_0x374a8a(0x90d)][_0x374a8a(0x6d4)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x5a5)]=function(){return!![];},Window_PartyCommand['prototype'][_0x588453(0xace)]=function(){},Window_PartyCommand[_0x588453(0x755)]['addOptionsCommand']=function(){const _0x2dd056=_0x588453;if(!this['isOptionsCommandAdded']())return;const _0x3d3f20=this[_0x2dd056(0x842)](),_0x5e79ba=VisuMZ[_0x2dd056(0x39a)][_0x2dd056(0x90d)][_0x2dd056(0x6d4)][_0x2dd056(0x549)],_0x26f182=_0x3d3f20===_0x2dd056(0x954)?TextManager[_0x2dd056(0x16f)]:_0x2dd056(0x1ae)[_0x2dd056(0x4a9)](_0x5e79ba,TextManager[_0x2dd056(0x16f)]),_0x19666f=this[_0x2dd056(0x35d)]();this[_0x2dd056(0x9b4)](_0x26f182,'options',_0x19666f);},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x9ae)]=function(){const _0x6c5150=_0x588453;return VisuMZ[_0x6c5150(0x39a)]['Settings'][_0x6c5150(0x6d4)][_0x6c5150(0x2c9)];},Window_PartyCommand['prototype'][_0x588453(0x35d)]=function(){return!![];},Window_PartyCommand[_0x588453(0x755)]['addEscapeCommand']=function(){const _0x458e15=_0x588453,_0x202e68=this[_0x458e15(0x842)](),_0x32bcef=VisuMZ[_0x458e15(0x39a)][_0x458e15(0x90d)][_0x458e15(0x6d4)][_0x458e15(0x5f2)],_0x219b4d=_0x202e68==='text'?TextManager[_0x458e15(0x76d)]:_0x458e15(0x1ae)['format'](_0x32bcef,TextManager[_0x458e15(0x76d)]),_0x549bdc=this[_0x458e15(0x286)]();this[_0x458e15(0x9b4)](_0x219b4d,_0x458e15(0x76d),_0x549bdc);},Window_PartyCommand['prototype'][_0x588453(0x286)]=function(){const _0x23aa66=_0x588453;return BattleManager[_0x23aa66(0x4a3)]();},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x729)]=function(){const _0x16c0b7=_0x588453;return VisuMZ['BattleCore']['Settings'][_0x16c0b7(0x6d4)][_0x16c0b7(0x295)];},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x64f)]=function(_0x466a7c){const _0x4a1d76=_0x588453,_0x438fb2=this[_0x4a1d76(0xc6)](_0x466a7c);if(_0x438fb2===_0x4a1d76(0x83d))this[_0x4a1d76(0x11e)](_0x466a7c);else _0x438fb2===_0x4a1d76(0x990)?this[_0x4a1d76(0x7a4)](_0x466a7c):Window_Command[_0x4a1d76(0x755)]['drawItem'][_0x4a1d76(0x90a)](this,_0x466a7c);},Window_PartyCommand[_0x588453(0x755)]['commandStyle']=function(){const _0x43bcb7=_0x588453;return VisuMZ[_0x43bcb7(0x39a)]['Settings'][_0x43bcb7(0x6d4)][_0x43bcb7(0x7e0)];},Window_PartyCommand['prototype'][_0x588453(0xc6)]=function(_0x17d9b9){const _0xcc7583=_0x588453;if(_0x17d9b9<0x0)return'text';const _0x3ec633=this['commandStyle']();if(_0x3ec633!==_0xcc7583(0x464))return _0x3ec633;else{if(this['maxItems']()>0x0){const _0x305d83=this[_0xcc7583(0x820)](_0x17d9b9);if(_0x305d83[_0xcc7583(0x809)](/\\I\[(\d+)\]/i)){const _0x5068cb=this['itemLineRect'](_0x17d9b9),_0x400a7a=this[_0xcc7583(0x523)](_0x305d83)[_0xcc7583(0x3ad)];return _0x400a7a<=_0x5068cb['width']?_0xcc7583(0x83d):_0xcc7583(0x990);}}}return _0xcc7583(0x954);},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x11e)]=function(_0x48b4a4){const _0xa216e1=_0x588453,_0x312554=this[_0xa216e1(0x228)](_0x48b4a4),_0x27b8f5=this[_0xa216e1(0x820)](_0x48b4a4),_0x15b6ec=this[_0xa216e1(0x523)](_0x27b8f5)['width'];this[_0xa216e1(0x4ee)](this[_0xa216e1(0x1f1)](_0x48b4a4));const _0x49c626=this[_0xa216e1(0x729)]();if(_0x49c626===_0xa216e1(0x1d1))this[_0xa216e1(0x521)](_0x27b8f5,_0x312554['x']+_0x312554[_0xa216e1(0x3ad)]-_0x15b6ec,_0x312554['y'],_0x15b6ec);else{if(_0x49c626==='center'){const _0xc09161=_0x312554['x']+Math[_0xa216e1(0x10a)]((_0x312554['width']-_0x15b6ec)/0x2);this[_0xa216e1(0x521)](_0x27b8f5,_0xc09161,_0x312554['y'],_0x15b6ec);}else this[_0xa216e1(0x521)](_0x27b8f5,_0x312554['x'],_0x312554['y'],_0x15b6ec);}},Window_PartyCommand['prototype'][_0x588453(0x7a4)]=function(_0x23cdbd){const _0x4737ae=_0x588453;this['commandName'](_0x23cdbd)[_0x4737ae(0x809)](/\\I\[(\d+)\]/i);const _0x50673a=Number(RegExp['$1'])||0x0,_0x5a76ea=this[_0x4737ae(0x228)](_0x23cdbd),_0x12807b=_0x5a76ea['x']+Math[_0x4737ae(0x10a)]((_0x5a76ea[_0x4737ae(0x3ad)]-ImageManager[_0x4737ae(0x547)])/0x2),_0x1d5ea7=_0x5a76ea['y']+(_0x5a76ea[_0x4737ae(0x4ba)]-ImageManager[_0x4737ae(0x256)])/0x2;this['drawIcon'](_0x50673a,_0x12807b,_0x1d5ea7);},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x8e9)]=function(){},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x8a5)]=function(){const _0x34a167=_0x588453;Window_Command['prototype'][_0x34a167(0x8a5)][_0x34a167(0x90a)](this);const _0x106c09=this[_0x34a167(0x80f)]();_0x106c09===_0x34a167(0x469)&&this[_0x34a167(0x3c8)]();},Window_PartyCommand[_0x588453(0x755)][_0x588453(0x80f)]=function(){const _0x67ff3c=_0x588453;if(this[_0x67ff3c(0x8da)])return this['_battleLayoutStyle'];return this[_0x67ff3c(0x8da)]=SceneManager[_0x67ff3c(0x39b)][_0x67ff3c(0x80f)](),this['_battleLayoutStyle'];},Window_PartyCommand['prototype'][_0x588453(0x58c)]=function(){const _0x4f8e6d=_0x588453,_0xc6af13=VisuMZ['BattleCore'][_0x4f8e6d(0x90d)][_0x4f8e6d(0x6d4)],_0x2af5bf=this[_0x4f8e6d(0xac7)]();switch(_0x2af5bf){case _0x4f8e6d(0x7f6):this[_0x4f8e6d(0x2bf)]['setText'](_0xc6af13[_0x4f8e6d(0x416)]);break;case _0x4f8e6d(0xab8):this[_0x4f8e6d(0x2bf)][_0x4f8e6d(0x782)](_0xc6af13[_0x4f8e6d(0x8c7)]);break;case _0x4f8e6d(0x16f):this[_0x4f8e6d(0x2bf)]['setText'](_0xc6af13[_0x4f8e6d(0x479)]);break;case _0x4f8e6d(0x76d):this[_0x4f8e6d(0x2bf)][_0x4f8e6d(0x782)](_0xc6af13[_0x4f8e6d(0x20b)]);break;default:this[_0x4f8e6d(0x2bf)][_0x4f8e6d(0x782)]('');break;}},VisuMZ['BattleCore'][_0x588453(0x57e)]=Window_ActorCommand[_0x588453(0x755)][_0x588453(0x155)],Window_ActorCommand[_0x588453(0x755)][_0x588453(0x155)]=function(_0x1556e7){const _0x169b85=_0x588453;VisuMZ[_0x169b85(0x39a)][_0x169b85(0x57e)][_0x169b85(0x90a)](this,_0x1556e7),this['createCommandNameWindow'](_0x1556e7);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x57a)]=function(_0x1abd3c){const _0x49a3d2=_0x588453,_0x148d87=new Rectangle(0x0,0x0,_0x1abd3c[_0x49a3d2(0x3ad)],_0x1abd3c[_0x49a3d2(0x4ba)]);this['_commandNameWindow']=new Window_Base(_0x148d87),this[_0x49a3d2(0x435)]['opacity']=0x0,this['addChild'](this['_commandNameWindow']),this[_0x49a3d2(0x1f8)]();},Window_ActorCommand['prototype'][_0x588453(0x769)]=function(){const _0x26f00c=_0x588453;Window_Command[_0x26f00c(0x755)][_0x26f00c(0x769)][_0x26f00c(0x90a)](this);if(this[_0x26f00c(0x435)])this[_0x26f00c(0x1f8)]();},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x1f8)]=function(){const _0x5c40d4=_0x588453,_0x1d644c=this['_commandNameWindow'];_0x1d644c['contents'][_0x5c40d4(0x399)]();const _0x5adff4=this[_0x5c40d4(0xc6)](this[_0x5c40d4(0x48d)]());if(_0x5adff4===_0x5c40d4(0x990)&&this[_0x5c40d4(0x9be)]()>0x0){const _0x40a40c=this[_0x5c40d4(0x228)](this[_0x5c40d4(0x48d)]());let _0x231bef=this[_0x5c40d4(0x820)](this['index']());_0x231bef=_0x231bef['replace'](/\\I\[(\d+)\]/gi,''),_0x1d644c[_0x5c40d4(0x225)](),this['commandNameWindowDrawBackground'](_0x231bef,_0x40a40c),this[_0x5c40d4(0x478)](_0x231bef,_0x40a40c),this[_0x5c40d4(0x7b9)](_0x231bef,_0x40a40c);}},Window_ActorCommand['prototype'][_0x588453(0x4ae)]=function(_0x1b5577,_0x284797){},Window_ActorCommand['prototype'][_0x588453(0x478)]=function(_0x5db87d,_0x4a5186){const _0x24075b=_0x588453,_0x55bf95=this[_0x24075b(0x435)];_0x55bf95[_0x24075b(0x7ae)](_0x5db87d,0x0,_0x4a5186['y'],_0x55bf95[_0x24075b(0x486)],_0x24075b(0x3bf));},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x7b9)]=function(_0x1088ff,_0x5d877c){const _0x1680c7=_0x588453,_0x212274=this['_commandNameWindow'],_0x859ec5=$gameSystem[_0x1680c7(0x142)](),_0x531d4a=_0x5d877c['x']+Math['floor'](_0x5d877c['width']/0x2)+_0x859ec5;_0x212274['x']=_0x212274[_0x1680c7(0x3ad)]/-0x2+_0x531d4a,_0x212274['y']=Math[_0x1680c7(0x10a)](_0x5d877c[_0x1680c7(0x4ba)]/0x2);},Window_ActorCommand[_0x588453(0x755)]['makeCommandList']=function(){const _0x32af68=_0x588453;if(!this[_0x32af68(0x237)])return;const _0x2018ef=this[_0x32af68(0x237)][_0x32af68(0xa64)]();for(const _0x4d5bab of _0x2018ef){this[_0x32af68(0x591)](_0x4d5bab['toUpperCase']()[_0x32af68(0x4f2)]());}},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x591)]=function(_0x5af6a3){const _0x4312b7=_0x588453;_0x5af6a3===_0x4312b7(0x43e)&&this[_0x4312b7(0x648)]();[_0x4312b7(0xa87),_0x4312b7(0x843)][_0x4312b7(0x51e)](_0x5af6a3)&&this[_0x4312b7(0x5bf)]();_0x5af6a3===_0x4312b7(0x35f)&&this[_0x4312b7(0x67a)]();_0x5af6a3==='ITEM'&&this[_0x4312b7(0x4c9)]();_0x5af6a3===_0x4312b7(0xa7c)&&this[_0x4312b7(0x101)]();_0x5af6a3===_0x4312b7(0x541)&&this[_0x4312b7(0x4b3)]();if(_0x5af6a3[_0x4312b7(0x809)](/STYPE: (\d+)/i)){const _0x28a605=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x28a605);}else{if(_0x5af6a3['match'](/STYPE: (.*)/i)){const _0x37f7af=DataManager[_0x4312b7(0x8d5)](RegExp['$1']);this[_0x4312b7(0x51f)](_0x37f7af);}}_0x5af6a3==='ALL\x20SKILLS'&&this[_0x4312b7(0x1aa)]();if(_0x5af6a3[_0x4312b7(0x809)](/SKILL: (\d+)/i)){const _0x47a85b=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x47a85b]);}else{if(_0x5af6a3[_0x4312b7(0x809)](/SKILL: (.*)/i)){const _0x49f9fd=DataManager[_0x4312b7(0x335)](RegExp['$1']);this[_0x4312b7(0x460)]($dataSkills[_0x49f9fd]);}}_0x5af6a3===_0x4312b7(0x54c)&&Imported['VisuMZ_2_PartySystem']&&this['addPartyCommand'](),[_0x4312b7(0x8a9),_0x4312b7(0xa96)][_0x4312b7(0x51e)](_0x5af6a3)&&Imported[_0x4312b7(0x285)]&&this[_0x4312b7(0x5c8)](),_0x5af6a3==='WEAPON\x20SWAP'&&Imported[_0x4312b7(0x92e)]&&this[_0x4312b7(0x952)](!![]),_0x5af6a3===_0x4312b7(0x858)&&Imported[_0x4312b7(0x6e4)]&&this[_0x4312b7(0x502)]();},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x648)]=function(){const _0x2dd1f4=_0x588453,_0x4aac38=$dataSkills[this['_actor'][_0x2dd1f4(0x3e9)]()];if(!_0x4aac38)return;if(!this[_0x2dd1f4(0x5a4)](_0x4aac38))return;const _0x37bad6=this['commandStyle'](),_0x276cea=DataManager[_0x2dd1f4(0x7d5)](_0x4aac38),_0x31f6f0=DataManager[_0x2dd1f4(0x16c)](_0x4aac38),_0x43c6e0=_0x37bad6===_0x2dd1f4(0x954)?_0x276cea:_0x2dd1f4(0x1ae)[_0x2dd1f4(0x4a9)](_0x31f6f0,_0x276cea);this[_0x2dd1f4(0x9b4)](_0x43c6e0,_0x2dd1f4(0x246),this['_actor'][_0x2dd1f4(0x2f5)]());},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x67a)]=function(){const _0x32b15d=_0x588453,_0x3cd079=$dataSkills[this[_0x32b15d(0x237)][_0x32b15d(0x9a7)]()];if(!_0x3cd079)return;if(!this[_0x32b15d(0x5a4)](_0x3cd079))return;const _0x2934cd=this[_0x32b15d(0x842)](),_0x5d0a02=DataManager[_0x32b15d(0x7d5)](_0x3cd079),_0x3c75b2=DataManager[_0x32b15d(0x16c)](_0x3cd079),_0x2cc3b6=_0x2934cd==='text'?_0x5d0a02:'\x5cI[%1]%2'[_0x32b15d(0x4a9)](_0x3c75b2,_0x5d0a02);this[_0x32b15d(0x9b4)](_0x2cc3b6,_0x32b15d(0x5e8),this['_actor']['canGuard']());},Window_ActorCommand[_0x588453(0x755)]['addItemCommand']=function(){const _0x3040bd=_0x588453,_0x495e6e=this[_0x3040bd(0x842)](),_0x124482=VisuMZ[_0x3040bd(0x39a)][_0x3040bd(0x90d)][_0x3040bd(0xa97)]['CmdIconItem'],_0x3e8da8=_0x495e6e===_0x3040bd(0x954)?TextManager[_0x3040bd(0x343)]:'\x5cI[%1]%2'[_0x3040bd(0x4a9)](_0x124482,TextManager[_0x3040bd(0x343)]),_0x1caa84=this['isItemCommandEnabled']();this[_0x3040bd(0x9b4)](_0x3e8da8,'item',_0x1caa84);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x505)]=function(){const _0x5df516=_0x588453;return this['_actor']&&this[_0x5df516(0x237)]['canUseItemCommand']();},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x5bf)]=function(){const _0x17b9ff=_0x588453,_0x488e61=this['_actor'][_0x17b9ff(0xa43)]();for(const _0x124493 of _0x488e61){this[_0x17b9ff(0x51f)](_0x124493);}},Window_ActorCommand['prototype'][_0x588453(0x51f)]=function(_0x45b085){const _0x31affe=_0x588453;let _0x3b62dc=$dataSystem[_0x31affe(0xa43)][_0x45b085];if(!_0x3b62dc)return;let _0x5053df=_0x3b62dc;const _0x3f48ec=this[_0x31affe(0x842)]();if(_0x3f48ec===_0x31affe(0x954))_0x5053df=_0x5053df[_0x31affe(0x582)](/\x1I\[(\d+)\]/gi,''),_0x5053df=_0x5053df['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x3b62dc['match'](/\\I\[(\d+)\]/i)){const _0x1cab46=Imported[_0x31affe(0x384)]?VisuMZ[_0x31affe(0x7e4)][_0x31affe(0x90d)]['Skills']:VisuMZ[_0x31affe(0x39a)]['Settings']['ActorCmd'],_0x25850c=$dataSystem[_0x31affe(0x146)][_0x31affe(0x51e)](_0x45b085),_0x184b22=_0x25850c?_0x1cab46[_0x31affe(0x29e)]:_0x1cab46[_0x31affe(0x6eb)];_0x5053df=_0x31affe(0x1ae)[_0x31affe(0x4a9)](_0x184b22,_0x3b62dc);}}this[_0x31affe(0x9b4)](_0x5053df,'skill',!![],_0x45b085);},Window_ActorCommand['prototype'][_0x588453(0x1aa)]=function(){const _0x3f8f60=_0x588453,_0x5c1144=this[_0x3f8f60(0x237)][_0x3f8f60(0xa43)](),_0x136aec=this[_0x3f8f60(0x237)]['skills']();for(const _0x3e7db5 of _0x136aec){if(!_0x3e7db5)continue;if(Imported[_0x3f8f60(0x384)]){if(this[_0x3f8f60(0x875)](_0x3e7db5))continue;if(this[_0x3f8f60(0x18f)](_0x3e7db5))continue;}else{if(!_0x5c1144[_0x3f8f60(0x51e)](_0x3e7db5[_0x3f8f60(0x224)]))continue;}this[_0x3f8f60(0x460)](_0x3e7db5);}},Window_ActorCommand['prototype'][_0x588453(0x875)]=function(_0x397e2a){const _0x49fc93=_0x588453,_0x58379b=this[_0x49fc93(0x237)][_0x49fc93(0xa43)](),_0x30017d=_0x58379b[_0x49fc93(0x38d)](_0x39f29d=>DataManager[_0x49fc93(0x269)](_0x397e2a)[_0x49fc93(0x51e)](_0x39f29d));return _0x30017d[_0x49fc93(0x6e3)]<=0x0;},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x18f)]=function(_0x55283f){const _0x34813e=_0x588453;if(Imported[_0x34813e(0x384)]){if(VisuMZ[_0x34813e(0x7e4)][_0x34813e(0x4ec)]>=1.24){if(this[_0x34813e(0x237)]){if(!VisuMZ['SkillsStatesCore']['CheckVisibleBattleNotetags'](this['_actor'],_0x55283f))return!![];if(!VisuMZ['SkillsStatesCore'][_0x34813e(0x234)](this[_0x34813e(0x237)],_0x55283f))return!![];if(!VisuMZ[_0x34813e(0x7e4)][_0x34813e(0xac4)](this[_0x34813e(0x237)],_0x55283f))return!![];}}else{if(!Window_SkillList[_0x34813e(0x755)][_0x34813e(0x8e0)][_0x34813e(0x90a)](this,_0x55283f))return!![];if(!Window_SkillList[_0x34813e(0x755)][_0x34813e(0x243)][_0x34813e(0x90a)](this,_0x55283f))return!![];if(!Window_SkillList['prototype'][_0x34813e(0x317)][_0x34813e(0x90a)](this,_0x55283f))return!![];}}return![];},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x460)]=function(_0x510d3f){const _0x25f69c=_0x588453;if(!_0x510d3f)return;if(!this[_0x25f69c(0x5a4)](_0x510d3f))return;const _0x674db1=this[_0x25f69c(0x842)](),_0x443b25=DataManager[_0x25f69c(0x7d5)](_0x510d3f),_0x4f2b79=DataManager['battleCommandIcon'](_0x510d3f),_0x3eb907=_0x674db1==='text'?_0x443b25:_0x25f69c(0x1ae)[_0x25f69c(0x4a9)](_0x4f2b79,_0x443b25),_0x38cbe9=this['_actor'][_0x25f69c(0x933)](_0x510d3f);this['addCommand'](_0x3eb907,_0x25f69c(0x477),_0x38cbe9,_0x510d3f['id']);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x5a4)]=function(_0x8fc5cd){const _0xcd95e8=_0x588453,_0x258922=_0x8fc5cd[_0xcd95e8(0x97d)];if(_0x258922[_0xcd95e8(0x809)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0xcd95e8(0x237)][_0xcd95e8(0x92c)](_0x8fc5cd['id']))return![];}if(_0x258922['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0xcd95e8(0x237)][_0xcd95e8(0x1b0)](_0x8fc5cd['id']))return![];}const _0x5611e2=VisuMZ['BattleCore'][_0xcd95e8(0x4ff)](_0x8fc5cd,'CommandVisible');if(VisuMZ[_0xcd95e8(0x39a)]['JS'][_0x5611e2]){if(!VisuMZ[_0xcd95e8(0x39a)]['JS'][_0x5611e2][_0xcd95e8(0x90a)](this,this['_actor'],_0x8fc5cd))return![];}return VisuMZ[_0xcd95e8(0x39a)][_0xcd95e8(0x926)](_0x8fc5cd);},VisuMZ[_0x588453(0x39a)][_0x588453(0x926)]=function(_0x160ec1){const _0x10bf74=_0x588453,_0xdc429f=_0x160ec1['note'];if(_0xdc429f[_0x10bf74(0x809)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5d7b02=JSON[_0x10bf74(0x709)]('['+RegExp['$1'][_0x10bf74(0x809)](/\d+/g)+']');for(const _0x5543f1 of _0x5d7b02){if(!$gameSwitches[_0x10bf74(0xab9)](_0x5543f1))return![];}return!![];}if(_0xdc429f[_0x10bf74(0x809)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x8c286a=JSON[_0x10bf74(0x709)]('['+RegExp['$1'][_0x10bf74(0x809)](/\d+/g)+']');for(const _0x2b96a3 of _0x8c286a){if(!$gameSwitches['value'](_0x2b96a3))return![];}return!![];}if(_0xdc429f[_0x10bf74(0x809)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3122f3=JSON['parse']('['+RegExp['$1'][_0x10bf74(0x809)](/\d+/g)+']');for(const _0x4aa95b of _0x3122f3){if($gameSwitches[_0x10bf74(0xab9)](_0x4aa95b))return!![];}return![];}if(_0xdc429f[_0x10bf74(0x809)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x35a524=JSON[_0x10bf74(0x709)]('['+RegExp['$1'][_0x10bf74(0x809)](/\d+/g)+']');for(const _0x2e8167 of _0x35a524){if(!$gameSwitches[_0x10bf74(0xab9)](_0x2e8167))return!![];}return![];}if(_0xdc429f['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2f07d1=JSON[_0x10bf74(0x709)]('['+RegExp['$1'][_0x10bf74(0x809)](/\d+/g)+']');for(const _0x268077 of _0x2f07d1){if(!$gameSwitches[_0x10bf74(0xab9)](_0x268077))return!![];}return![];}if(_0xdc429f[_0x10bf74(0x809)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5f69be=JSON[_0x10bf74(0x709)]('['+RegExp['$1'][_0x10bf74(0x809)](/\d+/g)+']');for(const _0x4e79e8 of _0x5f69be){if($gameSwitches[_0x10bf74(0xab9)](_0x4e79e8))return![];}return!![];}return!![];},Window_ActorCommand[_0x588453(0x755)]['addEscapeCommand']=function(){const _0x2e94ce=_0x588453,_0x16f87c=this['commandStyle'](),_0x571c4b=VisuMZ[_0x2e94ce(0x39a)][_0x2e94ce(0x90d)][_0x2e94ce(0x6d4)]['CmdIconEscape'],_0x22366a=_0x16f87c==='text'?TextManager['escape']:'\x5cI[%1]%2'[_0x2e94ce(0x4a9)](_0x571c4b,TextManager[_0x2e94ce(0x76d)]),_0x98ff9c=this['isEscapeCommandEnabled']();this['addCommand'](_0x22366a,'escape',_0x98ff9c);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x286)]=function(){const _0x55437e=_0x588453;return BattleManager[_0x55437e(0x4a3)]();},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x4b3)]=function(){const _0x2af23b=_0x588453,_0x5d334b=this['commandStyle'](),_0x2fddb5=VisuMZ[_0x2af23b(0x39a)][_0x2af23b(0x90d)][_0x2af23b(0x6d4)][_0x2af23b(0x51c)],_0x7e1cd2=_0x5d334b===_0x2af23b(0x954)?TextManager['autoBattle']:'\x5cI[%1]%2'[_0x2af23b(0x4a9)](_0x2fddb5,TextManager['autoBattle']),_0x3a1e4c=this[_0x2af23b(0x5a5)]();this[_0x2af23b(0x9b4)](_0x7e1cd2,'autoBattle',_0x3a1e4c);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x5a5)]=function(){return!![];},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x729)]=function(){const _0x2b49f1=_0x588453;return VisuMZ[_0x2b49f1(0x39a)]['Settings'][_0x2b49f1(0xa97)][_0x2b49f1(0x295)];},Window_ActorCommand['prototype'][_0x588453(0x64f)]=function(_0x125aff){const _0x1a21b6=_0x588453,_0x11aec9=this[_0x1a21b6(0xc6)](_0x125aff);if(_0x11aec9===_0x1a21b6(0x83d))this[_0x1a21b6(0x11e)](_0x125aff);else _0x11aec9==='icon'?this['drawItemStyleIcon'](_0x125aff):Window_Command[_0x1a21b6(0x755)]['drawItem'][_0x1a21b6(0x90a)](this,_0x125aff);this[_0x1a21b6(0x180)](_0x125aff);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x842)]=function(){const _0x7d3d13=_0x588453;return VisuMZ[_0x7d3d13(0x39a)][_0x7d3d13(0x90d)][_0x7d3d13(0xa97)][_0x7d3d13(0x7e0)];},Window_ActorCommand[_0x588453(0x755)][_0x588453(0xc6)]=function(_0x1e9e66){const _0x54c350=_0x588453;if(_0x1e9e66<0x0)return'text';const _0x17eeb5=this[_0x54c350(0x842)]();if(_0x17eeb5!==_0x54c350(0x464))return _0x17eeb5;else{if(this['maxItems']()>0x0){const _0x14000c=this[_0x54c350(0x820)](_0x1e9e66);if(_0x14000c[_0x54c350(0x809)](/\\I\[(\d+)\]/i)){const _0x1b65b7=this[_0x54c350(0x228)](_0x1e9e66),_0x3203f7=this[_0x54c350(0x523)](_0x14000c)[_0x54c350(0x3ad)];return _0x3203f7<=_0x1b65b7[_0x54c350(0x3ad)]?_0x54c350(0x83d):_0x54c350(0x990);}}}return _0x54c350(0x954);},Window_ActorCommand[_0x588453(0x755)]['drawItemStyleIconText']=function(_0x276526){const _0x246426=_0x588453,_0x317d84=this[_0x246426(0x228)](_0x276526),_0x228d19=this[_0x246426(0x820)](_0x276526),_0x521078=this[_0x246426(0x523)](_0x228d19)[_0x246426(0x3ad)];this[_0x246426(0x4ee)](this[_0x246426(0x1f1)](_0x276526));const _0x7997fb=this[_0x246426(0x729)]();if(_0x7997fb===_0x246426(0x1d1))this[_0x246426(0x521)](_0x228d19,_0x317d84['x']+_0x317d84['width']-_0x521078,_0x317d84['y'],_0x521078);else{if(_0x7997fb===_0x246426(0x3bf)){const _0x1e14fd=_0x317d84['x']+Math[_0x246426(0x10a)]((_0x317d84['width']-_0x521078)/0x2);this[_0x246426(0x521)](_0x228d19,_0x1e14fd,_0x317d84['y'],_0x521078);}else this[_0x246426(0x521)](_0x228d19,_0x317d84['x'],_0x317d84['y'],_0x521078);}},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x7a4)]=function(_0x41e797){const _0x4ee85c=_0x588453;this['commandName'](_0x41e797)[_0x4ee85c(0x809)](/\\I\[(\d+)\]/i);const _0xa5328c=Number(RegExp['$1'])||0x0,_0x551498=this[_0x4ee85c(0x228)](_0x41e797),_0xd789f2=_0x551498['x']+Math['floor']((_0x551498['width']-ImageManager[_0x4ee85c(0x547)])/0x2),_0x2b97f4=_0x551498['y']+(_0x551498['height']-ImageManager[_0x4ee85c(0x256)])/0x2;this['drawIcon'](_0xa5328c,_0xd789f2,_0x2b97f4);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x180)]=function(_0x32f96c){const _0x36559a=_0x588453;if(!(VisuMZ[_0x36559a(0x39a)][_0x36559a(0x90d)][_0x36559a(0xa97)][_0x36559a(0xaad)]??!![]))return;const _0x12f585=this[_0x36559a(0x542)](_0x32f96c);if(!['attack','guard','singleSkill'][_0x36559a(0x51e)](_0x12f585))return;const _0x2a5676=this[_0x36559a(0x228)](_0x32f96c);let _0x2c7b99=null;if(_0x12f585===_0x36559a(0x246))_0x2c7b99=$dataSkills[this['_actor'][_0x36559a(0x3e9)]()];else _0x12f585===_0x36559a(0x5e8)?_0x2c7b99=$dataSkills[this[_0x36559a(0x237)][_0x36559a(0x9a7)]()]:_0x2c7b99=$dataSkills[this[_0x36559a(0x42c)][_0x32f96c]['ext']];this[_0x36559a(0x349)](this[_0x36559a(0x237)],_0x2c7b99,_0x2a5676['x'],_0x2a5676['y'],_0x2a5676[_0x36559a(0x3ad)]);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x349)]=function(_0x1e7cae,_0x178c55,_0x2f9ac3,_0x17e849,_0x55e8ad){const _0x309743=_0x588453;if(!_0x178c55)return;Imported[_0x309743(0x384)]?Window_Command[_0x309743(0x755)][_0x309743(0x349)][_0x309743(0x90a)](this,_0x1e7cae,_0x178c55,_0x2f9ac3,_0x17e849,_0x55e8ad):Window_SkillList[_0x309743(0x755)][_0x309743(0x349)][_0x309743(0x90a)](this,_0x178c55,_0x2f9ac3,_0x17e849,_0x55e8ad);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x8e9)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x1ab21b=_0x588453;Window_Command[_0x1ab21b(0x755)][_0x1ab21b(0x8a5)]['call'](this);const _0x3b3bbe=this[_0x1ab21b(0x80f)]();_0x3b3bbe===_0x1ab21b(0x469)&&this[_0x1ab21b(0x3c8)]();},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x80f)]=function(){const _0x3d9bcd=_0x588453;if(this['_battleLayoutStyle'])return this[_0x3d9bcd(0x8da)];return this[_0x3d9bcd(0x8da)]=SceneManager[_0x3d9bcd(0x39b)]['battleLayoutStyle'](),this[_0x3d9bcd(0x8da)];},VisuMZ[_0x588453(0x39a)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x588453(0x755)]['setup'],Window_ActorCommand[_0x588453(0x755)]['setup']=function(_0x321ea8){const _0x331cab=_0x588453,_0x55eff8=this['battleLayoutStyle']();if(_0x321ea8&&['xp','portrait'][_0x331cab(0x51e)](_0x55eff8))this[_0x331cab(0x14d)](_0x321ea8);else _0x321ea8&&[_0x331cab(0x469)]['includes'](_0x55eff8)&&(this['resizeWindowBorderStyle'](_0x321ea8),this['showHelpWindow']());VisuMZ[_0x331cab(0x39a)]['Window_ActorCommand_setup'][_0x331cab(0x90a)](this,_0x321ea8),_0x321ea8&&$gameTroop[_0x331cab(0x157)]()['length']>0x0&&_0x321ea8[_0x331cab(0xabe)]()&&_0x321ea8[_0x331cab(0xabe)]()['stepForward']();},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x14d)]=function(_0x3d6f02){const _0x420e06=_0x588453,_0x8d3f9e=VisuMZ['BattleCore']['Settings'][_0x420e06(0xac6)][_0x420e06(0x368)],_0x4323d9=Math[_0x420e06(0x422)](Graphics[_0x420e06(0x586)]/0x3),_0x429870=Math[_0x420e06(0x422)](Graphics[_0x420e06(0x586)]/$gameParty['battleMembers']()[_0x420e06(0x6e3)]),_0x51fdd0=Math[_0x420e06(0x85e)](Math[_0x420e06(0x31b)](_0x4323d9,_0x429870),_0x8d3f9e),_0x329290=this[_0x420e06(0xab1)](VisuMZ['BattleCore']['Settings'][_0x420e06(0xac6)][_0x420e06(0x3db)]),_0x15c9d8=Math['floor']((Graphics['boxWidth']-Graphics[_0x420e06(0x3ad)])/0x2),_0x54d86a=Graphics[_0x420e06(0x586)]-_0x15c9d8,_0x4c873c=(Math[_0x420e06(0x422)](_0x429870*_0x3d6f02['index']())+Math[_0x420e06(0x422)]((_0x429870-_0x51fdd0)/0x2))[_0x420e06(0x25e)](_0x15c9d8,_0x54d86a-_0x51fdd0),_0x1cf8fd=Math['round'](SceneManager[_0x420e06(0x39b)]['_statusWindow']['y']-_0x329290);this[_0x420e06(0x71c)](_0x4c873c,_0x1cf8fd,_0x51fdd0,_0x329290),this['createContents'](),this[_0x420e06(0x79e)](0x1);},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x5e1)]=function(_0x578842){const _0x4ef231=_0x588453,_0x3a25f0=SceneManager['_scene'][_0x4ef231(0x533)]();this[_0x4ef231(0x71c)](_0x3a25f0['x'],_0x3a25f0['y'],_0x3a25f0[_0x4ef231(0x3ad)],_0x3a25f0['height']),this['createContents'](),this[_0x4ef231(0x79e)](0x0);},Window_ActorCommand[_0x588453(0x755)]['refreshDimmerBitmap']=function(){const _0x1b7506=_0x588453;if(this['_dimmerSprite']){const _0x363e52=this[_0x1b7506(0x109)][_0x1b7506(0x590)],_0x2f749a=this[_0x1b7506(0x3ad)]-0x8,_0x37dbf0=this[_0x1b7506(0x4ba)],_0x249e58=this[_0x1b7506(0x631)],_0x4e98e0=ColorManager[_0x1b7506(0x599)](),_0x500de3=ColorManager['dimColor2']();this[_0x1b7506(0x109)]['x']=0x4,_0x363e52['resize'](_0x2f749a,_0x37dbf0),_0x363e52[_0x1b7506(0xa60)](0x0,0x0,_0x2f749a,_0x249e58,_0x500de3,_0x4e98e0,!![]),_0x363e52[_0x1b7506(0x927)](0x0,_0x249e58,_0x2f749a,_0x37dbf0-_0x249e58*0x2,_0x4e98e0),_0x363e52[_0x1b7506(0xa60)](0x0,_0x37dbf0-_0x249e58,_0x2f749a,_0x249e58,_0x4e98e0,_0x500de3,!![]),this[_0x1b7506(0x109)]['setFrame'](0x0,0x0,_0x2f749a,_0x37dbf0);}},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x58c)]=function(){const _0x5a0dac=_0x588453;if(!this[_0x5a0dac(0x237)])return;const _0x5782f9=VisuMZ[_0x5a0dac(0x39a)][_0x5a0dac(0x90d)][_0x5a0dac(0xa97)],_0x8a6599=this[_0x5a0dac(0xac7)]();switch(_0x8a6599){case'attack':this['setHelpWindowItem']($dataSkills[this[_0x5a0dac(0x237)][_0x5a0dac(0x3e9)]()]);break;case _0x5a0dac(0x5e8):this[_0x5a0dac(0x339)]($dataSkills[this['_actor'][_0x5a0dac(0x9a7)]()]);break;case'skill':const _0x258925=_0x5782f9['HelpSkillType'],_0x402dc9=_0x258925[_0x5a0dac(0x4a9)]($dataSystem[_0x5a0dac(0xa43)][this[_0x5a0dac(0x4d7)]()]);this[_0x5a0dac(0x2bf)][_0x5a0dac(0x782)](_0x402dc9);break;case _0x5a0dac(0x477):this[_0x5a0dac(0x339)]($dataSkills[this[_0x5a0dac(0x4d7)]()]);break;case _0x5a0dac(0x343):this[_0x5a0dac(0x2bf)][_0x5a0dac(0x782)](_0x5782f9['HelpItem']);break;case _0x5a0dac(0x76d):this[_0x5a0dac(0x2bf)][_0x5a0dac(0x782)](_0x5782f9[_0x5a0dac(0x20b)]);break;case _0x5a0dac(0xab8):this['_helpWindow'][_0x5a0dac(0x782)](_0x5782f9[_0x5a0dac(0x8c7)]);break;default:this['_helpWindow'][_0x5a0dac(0x782)]('');break;}},Window_ActorCommand[_0x588453(0x755)][_0x588453(0x5cb)]=function(){const _0x4b418d=_0x588453;this[_0x4b418d(0x546)](0x0);if(this[_0x4b418d(0x237)]&&ConfigManager['commandRemember']){const _0x5b865c=this[_0x4b418d(0x237)]['lastCommandSymbol']();this[_0x4b418d(0xdd)](_0x5b865c);if(_0x5b865c==='skill'){const _0x4251ad=this['_actor'][_0x4b418d(0x108)]();if(_0x4251ad){const _0x57dd6d=this[_0x4b418d(0x9c1)](_0x4b418d(0x33f),_0x4251ad[_0x4b418d(0x224)]);this[_0x4b418d(0xed)](_0x57dd6d||0x0);}}else{if(_0x5b865c==='singleSkill'){const _0x33c7f8=this[_0x4b418d(0x237)][_0x4b418d(0x108)]();if(_0x33c7f8){const _0x11312e=this['findSymbolExt']('singleSkill',_0x33c7f8['id']);this['select'](_0x11312e||0x0);}}}}},Window_ActorCommand['prototype'][_0x588453(0x9c1)]=function(_0x2541e1,_0x476ab2){const _0x4f7849=_0x588453;return this[_0x4f7849(0x42c)][_0x4f7849(0x2d4)](_0x446077=>_0x446077[_0x4f7849(0x9ac)]===_0x2541e1&&_0x446077[_0x4f7849(0x713)]===_0x476ab2);},VisuMZ[_0x588453(0x39a)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x588453(0x755)][_0x588453(0x155)],Window_BattleStatus['prototype']['initialize']=function(_0x68e2e3){const _0x48f6a0=_0x588453;VisuMZ['BattleCore'][_0x48f6a0(0x2dd)][_0x48f6a0(0x90a)](this,_0x68e2e3),this[_0x48f6a0(0x63a)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x80f)]=function(){const _0x4ecc18=_0x588453;if(this[_0x4ecc18(0x8da)])return this[_0x4ecc18(0x8da)];return this[_0x4ecc18(0x8da)]=SceneManager[_0x4ecc18(0x39b)][_0x4ecc18(0x80f)](),this[_0x4ecc18(0x8da)];},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x63a)]=function(){const _0x584d0a=_0x588453;this[_0x584d0a(0x5d0)]=this['isFrameVisible']();const _0x4017cf=VisuMZ['BattleCore']['Settings'][_0x584d0a(0xac6)];_0x4017cf[_0x584d0a(0x9e1)]&&(this[_0x584d0a(0x8d6)]=0x0);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x9bf)]=function(){const _0x3cbe08=_0x588453,_0x2eb179=VisuMZ[_0x3cbe08(0x39a)]['Settings'][_0x3cbe08(0xac6)];if(_0x2eb179[_0x3cbe08(0x6d0)])return!![];const _0x5dff39=this['battleLayoutStyle']();switch(_0x5dff39){case'list':case _0x3cbe08(0x469):return!![];break;case _0x3cbe08(0x880):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x588453(0x755)]['extraHeight']=function(){const _0x54db54=_0x588453;return this[_0x54db54(0x9bf)]()?0x0:0xa;},Window_BattleStatus[_0x588453(0x755)]['maxCols']=function(){const _0x1ff1b7=_0x588453,_0x31ca29=this[_0x1ff1b7(0x80f)]();switch(_0x31ca29){case _0x1ff1b7(0x70f):return 0x1;break;case'xp':case _0x1ff1b7(0x418):return $gameParty[_0x1ff1b7(0x988)]()[_0x1ff1b7(0x6e3)];break;case'default':default:return $gameParty[_0x1ff1b7(0x69c)]();break;}},Window_BattleStatus[_0x588453(0x755)][_0x588453(0xa24)]=function(){const _0x4b1980=_0x588453,_0x5d07a3=this[_0x4b1980(0x80f)]();switch(_0x5d07a3){case'list':return Window_StatusBase[_0x4b1980(0x755)][_0x4b1980(0xa24)][_0x4b1980(0x90a)](this);break;case _0x4b1980(0x880):case'xp':case _0x4b1980(0x418):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x588453(0x755)][_0x588453(0xa53)]=function(){const _0xf09c88=_0x588453,_0x308c48=this[_0xf09c88(0x80f)]();switch(_0x308c48){case'list':return Window_StatusBase[_0xf09c88(0x755)][_0xf09c88(0xa53)]['call'](this);break;case _0xf09c88(0x880):case'xp':case _0xf09c88(0x418):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x588453(0x86e)]=function(){const _0x4eaadd=_0x588453;this[_0x4eaadd(0x9bf)]()?Window_StatusBase[_0x4eaadd(0x755)][_0x4eaadd(0x86e)]['call'](this):this[_0x4eaadd(0x631)]=0x8;},Window_BattleStatus[_0x588453(0x755)]['loadWindowskin']=function(){const _0x291f24=_0x588453,_0x34e94d=VisuMZ[_0x291f24(0x39a)][_0x291f24(0x90d)][_0x291f24(0xac6)];_0x34e94d[_0x291f24(0x6d0)]?this[_0x291f24(0x81e)]=ImageManager['loadSystem'](_0x34e94d['StatusWindowSkinFilename']):Window_StatusBase['prototype'][_0x291f24(0x3be)][_0x291f24(0x90a)](this);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x888)]=function(_0xbe3484){const _0x191a8b=_0x588453,_0x1137b0=VisuMZ[_0x191a8b(0x39a)][_0x191a8b(0x90d)]['BattleLayout'];if(_0x1137b0['StatusWindowSelectableBackHide'])return;Window_StatusBase['prototype'][_0x191a8b(0x888)][_0x191a8b(0x90a)](this,_0xbe3484);},Window_BattleStatus['prototype'][_0x588453(0x33d)]=function(){const _0x3780df=_0x588453;this[_0x3780df(0x4ab)]=!![];},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x665)]=function(){const _0x1825ed=_0x588453;Window_StatusBase['prototype'][_0x1825ed(0x665)][_0x1825ed(0x90a)](this),this[_0x1825ed(0xa0c)](),this[_0x1825ed(0x3e6)]();if(this[_0x1825ed(0x80f)]()===_0x1825ed(0x469))this['updateBorderStyle']();},Window_BattleStatus[_0x588453(0x755)]['updateRefresh']=function(){const _0x3f1417=_0x588453;if($gameTemp[_0x3f1417(0x961)]())this['preparePartyRefresh'](),this[_0x3f1417(0x4ab)]=![],$gameTemp['clearBattleRefreshRequest']();else this[_0x3f1417(0x4ab)]&&(this[_0x3f1417(0x4ab)]=![],this[_0x3f1417(0x54e)](),this[_0x3f1417(0x18d)]());},Window_BattleStatus[_0x588453(0x755)]['show']=function(){const _0x57ce4f=_0x588453;Window_StatusBase['prototype'][_0x57ce4f(0x8d0)][_0x57ce4f(0x90a)](this);if(!$gameSystem[_0x57ce4f(0x879)]())this[_0x57ce4f(0x54e)]();},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x8e9)]=function(){const _0x281c53=_0x588453;if(this[_0x281c53(0x671)]===Window_BattleStatus)return;Window_StatusBase[_0x281c53(0x755)]['hide'][_0x281c53(0x90a)](this);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x449)]=function(_0x4a8fea){const _0x5b2d51=_0x588453,_0x1feafa=this[_0x5b2d51(0x80f)]();switch(_0x1feafa){case'xp':case _0x5b2d51(0x418):break;case _0x5b2d51(0x880):case _0x5b2d51(0x70f):case _0x5b2d51(0x469):default:return Window_StatusBase[_0x5b2d51(0x755)][_0x5b2d51(0x449)]['call'](this,_0x4a8fea);break;}},VisuMZ[_0x588453(0x39a)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x588453(0x755)]['drawItemImage'],Window_BattleStatus[_0x588453(0x755)][_0x588453(0x455)]=function(_0x1c08e6){const _0x3ca883=_0x588453,_0x23a96b=this['battleLayoutStyle']();switch(_0x23a96b){case'list':this[_0x3ca883(0x9a2)](_0x1c08e6);break;case'xp':this['drawItemImageXPStyle'](_0x1c08e6);break;case'portrait':this['drawItemImagePortraitStyle'](_0x1c08e6);break;case _0x3ca883(0x880):case _0x3ca883(0x469):default:VisuMZ[_0x3ca883(0x39a)][_0x3ca883(0x31a)][_0x3ca883(0x90a)](this,_0x1c08e6);break;}},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x296)]=function(_0x55667d){const _0x3a72b9=_0x588453,_0x126aa6=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x3a72b9(0x3cd)](_0x55667d);switch(_0x126aa6){case _0x3a72b9(0x70f):this['drawItemStatusListStyle'](_0x55667d);break;case'xp':case _0x3a72b9(0x418):case _0x3a72b9(0x880):case'border':default:this[_0x3a72b9(0x845)](_0x55667d);break;}},Window_BattleStatus['prototype'][_0x588453(0xaeb)]=function(){const _0x312272=_0x588453,_0x3cb617=this[_0x312272(0x80f)]();if(['xp'][_0x312272(0x51e)](_0x3cb617)&&!$gameSystem['isSideView']()){this[_0x312272(0xa16)](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype'][_0x312272(0xaeb)][_0x312272(0x90a)](this);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x3cd)]=function(_0x561d41){const _0x50e534=_0x588453,_0x22bc66=this[_0x50e534(0x112)](_0x561d41)[_0x50e534(0xabe)]();if(!_0x22bc66)return;const _0xc18b25=this['battleLayoutStyle'](),_0x2fc6ae=this[_0x50e534(0x651)](_0x561d41);let _0x4da013=Math[_0x50e534(0x422)](_0x2fc6ae['x']+_0x2fc6ae['width']/0x2)+this[_0x50e534(0x631)];['list'][_0x50e534(0x51e)](_0xc18b25)&&(_0x4da013=_0x2fc6ae[_0x50e534(0x3ad)]/$gameParty['battleMembers']()['length'],_0x4da013*=_0x561d41,_0x4da013+=_0x2fc6ae[_0x50e534(0x3ad)]/$gameParty[_0x50e534(0x988)]()[_0x50e534(0x6e3)]/0x2);let _0xd3c766=Math[_0x50e534(0x422)](this[_0x50e534(0x4d3)](_0x561d41,_0x22bc66,_0x2fc6ae));_0x22bc66[_0x50e534(0x559)](_0x4da013,_0xd3c766),this[_0x50e534(0x57d)](_0x22bc66,0x1),_0x22bc66[_0x50e534(0x8d0)](),this[_0x50e534(0x389)](),this[_0x50e534(0x18d)]();},Window_BattleStatus['prototype'][_0x588453(0x4d3)]=function(_0x253702,_0x570d34,_0x5cccbb){const _0x3eaba4=_0x588453,_0x1a9ccd=VisuMZ[_0x3eaba4(0x39a)][_0x3eaba4(0x90d)][_0x3eaba4(0xac6)],_0x5f2003=this['battleLayoutStyle']();if(_0x5f2003==='xp'){const _0x2c302e=_0x1a9ccd['XPSpriteYLocation'];switch(_0x2c302e[_0x3eaba4(0x939)]()[_0x3eaba4(0x4f2)]()){case _0x3eaba4(0x119):return _0x5cccbb['height']-_0x570d34[_0x3eaba4(0x6f9)][_0x3eaba4(0x4ba)]/0x4;break;case _0x3eaba4(0x3bf):const _0x27b0ee=_0x1a9ccd[_0x3eaba4(0x1e1)];return(_0x5cccbb[_0x3eaba4(0x4ba)]+(_0x570d34[_0x3eaba4(0x4ba)]||_0x27b0ee))/0x2;break;case _0x3eaba4(0xd8):return 0x0;case _0x3eaba4(0x4cf):default:return this[_0x3eaba4(0x1ff)](_0x5cccbb);break;}}else{if(_0x5f2003===_0x3eaba4(0x418)){}}return _0x570d34['height'];},Sprite_Name['prototype'][_0x588453(0x67b)]=function(){return 0x24;},Sprite_Name['prototype'][_0x588453(0xdf)]=function(){const _0x1043b3=_0x588453,_0x970017=this[_0x1043b3(0x4cf)](),_0x5b0244=this['bitmapWidth'](),_0x4b3406=this['bitmapHeight']();this[_0x1043b3(0x249)](),this['bitmap'][_0x1043b3(0x399)](),this[_0x1043b3(0x590)][_0x1043b3(0x3df)](_0x970017,0x4,0x0,_0x5b0244,_0x4b3406,_0x1043b3(0x175));},Bitmap['prototype'][_0x588453(0x3df)]=function(_0x42fbf6,_0x4d5b87,_0xf7b634,_0x4d65b5,_0x4a4d93,_0x3039c2){const _0x231a11=_0x588453;TextManager[_0x231a11(0x9c0)]&&(_0x42fbf6=TextManager['parseLocalizedText'](_0x42fbf6));const _0x34eb0b=this[_0x231a11(0x337)],_0x5db003=_0x34eb0b[_0x231a11(0x1e3)];_0x4d65b5=_0x4d65b5||0xffffffff;let _0x40938b=_0x4d5b87,_0x5dd82a=Math[_0x231a11(0x422)](_0xf7b634+0x18/0x2+this['fontSize']*0.35);_0x3039c2===_0x231a11(0x3bf)&&(_0x40938b+=_0x4d65b5/0x2),_0x3039c2==='right'&&(_0x40938b+=_0x4d65b5),_0x34eb0b[_0x231a11(0x6af)](),_0x34eb0b[_0x231a11(0xab7)]=this[_0x231a11(0x5e4)](),_0x34eb0b[_0x231a11(0x161)]=_0x3039c2,_0x34eb0b[_0x231a11(0xaf7)]=_0x231a11(0x613),_0x34eb0b[_0x231a11(0x1e3)]=0x1,this[_0x231a11(0x526)](_0x42fbf6,_0x40938b,_0x5dd82a,_0x4d65b5),_0x34eb0b[_0x231a11(0x1e3)]=_0x5db003,this[_0x231a11(0x17e)](_0x42fbf6,_0x40938b,_0x5dd82a,_0x4d65b5),_0x34eb0b[_0x231a11(0xaca)](),this['_baseTexture'][_0x231a11(0x665)]();},Window_BattleStatus[_0x588453(0x755)]['nameY']=function(_0x59ef5c){const _0x5d865b=_0x588453;return this[_0x5d865b(0x6ef)](_0x59ef5c)-this['gaugeLineHeight']();},Window_BattleStatus[_0x588453(0x755)]['drawItemImageListStyle']=function(_0x5862b5){const _0x582dff=_0x588453;if(!VisuMZ[_0x582dff(0x39a)][_0x582dff(0x90d)][_0x582dff(0xac6)][_0x582dff(0x85d)])return;const _0x1e91e8=this[_0x582dff(0x112)](_0x5862b5),_0x2ca15e=this[_0x582dff(0x651)](_0x5862b5);_0x2ca15e['width']=ImageManager[_0x582dff(0x192)],_0x2ca15e[_0x582dff(0x4ba)]-=0x2,this[_0x582dff(0x9e9)](_0x1e91e8,_0x2ca15e['x']+0x1,_0x2ca15e['y']+0x1,_0x2ca15e[_0x582dff(0x3ad)],_0x2ca15e[_0x582dff(0x4ba)]);},Window_BattleStatus[_0x588453(0x755)]['drawItemStatusListStyle']=function(_0x73278b){const _0x67a4c0=_0x588453,_0xb47e00=VisuMZ[_0x67a4c0(0x39a)][_0x67a4c0(0x90d)]['BattleLayout'],_0x62546b=$dataSystem[_0x67a4c0(0x3a4)]?0x4:0x3,_0x43c3d1=_0x62546b*0x80+(_0x62546b-0x1)*0x8+0x4,_0x2d7141=this['actor'](_0x73278b),_0xf4f247=this[_0x67a4c0(0x651)](_0x73278b);let _0x51ae3d=_0xf4f247['x']+this[_0x67a4c0(0x631)];_0xb47e00[_0x67a4c0(0x85d)]?_0x51ae3d=_0xf4f247['x']+ImageManager[_0x67a4c0(0x192)]+0x8:_0x51ae3d+=ImageManager[_0x67a4c0(0x547)];const _0x298d1f=Math[_0x67a4c0(0x422)](Math[_0x67a4c0(0x31b)](_0xf4f247['x']+_0xf4f247['width']-_0x43c3d1,_0x51ae3d)),_0x367547=Math[_0x67a4c0(0x422)](_0xf4f247['y']+(_0xf4f247[_0x67a4c0(0x4ba)]-Sprite_Name['prototype']['bitmapHeight']())/0x2),_0x42a91e=Math[_0x67a4c0(0x422)](_0x298d1f-ImageManager['iconWidth']/0x2-0x4),_0xf3729d=Math[_0x67a4c0(0x422)](_0xf4f247['y']+(_0xf4f247[_0x67a4c0(0x4ba)]-ImageManager[_0x67a4c0(0x256)])/0x2+ImageManager[_0x67a4c0(0x256)]/0x2);let _0x354760=_0x298d1f+0x88;const _0x5d61cc=_0x367547;this[_0x67a4c0(0x54b)](_0x2d7141,_0x298d1f-0x4+(_0xb47e00['TpbGaugeOffsetX']||0x0),_0x367547+(_0xb47e00[_0x67a4c0(0x254)]||0x0)),this[_0x67a4c0(0x191)](_0x2d7141,_0x298d1f+(_0xb47e00[_0x67a4c0(0x55e)]||0x0),_0x367547+(_0xb47e00['NameOffsetY']||0x0)),this[_0x67a4c0(0x9c5)](_0x2d7141,_0x42a91e+(_0xb47e00[_0x67a4c0(0x554)]||0x0),_0xf3729d+(_0xb47e00[_0x67a4c0(0x702)]||0x0)),this[_0x67a4c0(0x606)](_0x2d7141,'hp',_0x354760+0x88*0x0+(_0xb47e00[_0x67a4c0(0x760)]||0x0),_0x5d61cc+(_0xb47e00[_0x67a4c0(0x8ee)]||0x0)),this[_0x67a4c0(0x606)](_0x2d7141,'mp',_0x354760+0x88*0x1+(_0xb47e00[_0x67a4c0(0x362)]||0x0),_0x5d61cc+(_0xb47e00[_0x67a4c0(0x1a9)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x67a4c0(0x606)](_0x2d7141,'tp',_0x354760+0x88*0x2+(_0xb47e00[_0x67a4c0(0x8cd)]||0x0),_0x5d61cc+(_0xb47e00[_0x67a4c0(0x74d)]||0x0));},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x71e)]=function(_0x271a08){const _0x1d21e4=_0x588453;if(!$gameSystem[_0x1d21e4(0x879)]())return;VisuMZ[_0x1d21e4(0x39a)][_0x1d21e4(0x31a)]['call'](this,_0x271a08);},Window_BattleStatus['prototype'][_0x588453(0x845)]=function(_0x4ffa39){const _0x56bdaf=_0x588453,_0xb7c371=VisuMZ[_0x56bdaf(0x39a)][_0x56bdaf(0x90d)][_0x56bdaf(0xac6)],_0x48f0ec=this[_0x56bdaf(0x112)](_0x4ffa39),_0x3cc060=this[_0x56bdaf(0x651)](_0x4ffa39),_0x30d1d3=Math[_0x56bdaf(0x422)](_0x3cc060['x']+(_0x3cc060[_0x56bdaf(0x3ad)]-0x80)/0x2),_0xcadb7d=this[_0x56bdaf(0x1ff)](_0x3cc060);let _0x57dff0=_0x30d1d3-ImageManager[_0x56bdaf(0x547)]/0x2-0x4,_0x5ab28a=_0xcadb7d+ImageManager[_0x56bdaf(0x256)]/0x2;_0x57dff0-ImageManager[_0x56bdaf(0x547)]/0x2<_0x3cc060['x']&&(_0x57dff0=_0x30d1d3+ImageManager[_0x56bdaf(0x547)]/0x2-0x4,_0x5ab28a=_0xcadb7d-ImageManager[_0x56bdaf(0x256)]/0x2);const _0x3c640c=_0x30d1d3,_0x4af5dd=this[_0x56bdaf(0x6ef)](_0x3cc060);this['placeTimeGauge'](_0x48f0ec,_0x30d1d3+(_0xb7c371['TpbGaugeOffsetX']||0x0),_0xcadb7d+(_0xb7c371['TpbGaugeOffsetY']||0x0)),this[_0x56bdaf(0x191)](_0x48f0ec,_0x30d1d3+(_0xb7c371['NameOffsetX']||0x0),_0xcadb7d+(_0xb7c371[_0x56bdaf(0xa79)]||0x0)),this[_0x56bdaf(0x9c5)](_0x48f0ec,_0x57dff0+(_0xb7c371['StateIconOffsetX']||0x0),_0x5ab28a+(_0xb7c371['StateIconOffsetY']||0x0)),this[_0x56bdaf(0x606)](_0x48f0ec,'hp',_0x3c640c+(_0xb7c371[_0x56bdaf(0x760)]||0x0),_0x4af5dd+(_0xb7c371['HpGaugeOffsetY']||0x0)),this[_0x56bdaf(0x606)](_0x48f0ec,'mp',_0x3c640c+(_0xb7c371[_0x56bdaf(0x362)]||0x0),_0x4af5dd+this[_0x56bdaf(0xa8e)]()+(_0xb7c371[_0x56bdaf(0x1a9)]||0x0)),$dataSystem['optDisplayTp']&&this['placeGauge'](_0x48f0ec,'tp',_0x3c640c+(_0xb7c371[_0x56bdaf(0x8cd)]||0x0),_0x4af5dd+this[_0x56bdaf(0xa8e)]()*0x2+(_0xb7c371[_0x56bdaf(0x74d)]||0x0));},Window_BattleStatus[_0x588453(0x755)]['showPortraits']=function(_0x2c2f89){const _0x5dd8df=_0x588453;if(!VisuMZ[_0x5dd8df(0x39a)][_0x5dd8df(0x90d)][_0x5dd8df(0xac6)][_0x5dd8df(0x1ee)])return![];if(_0x2c2f89[_0x5dd8df(0xe1)]())return!![];return Imported[_0x5dd8df(0x45e)]&&_0x2c2f89[_0x5dd8df(0x128)]();},Game_Actor[_0x588453(0x755)][_0x588453(0x5f0)]=function(){const _0x5e22c7=_0x588453;if(this['actor']()[_0x5e22c7(0x97d)][_0x5e22c7(0x809)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x5e22c7(0x112)]()[_0x5e22c7(0x97d)][_0x5e22c7(0x809)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x588453(0x755)][_0x588453(0x7f3)]=function(){const _0x2db122=_0x588453;if(this[_0x2db122(0x112)]()['note'][_0x2db122(0x809)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x2db122(0x97d)][_0x2db122(0x809)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x588453(0x755)]['drawItemImagePortraitStyle']=function(_0x1af567){const _0x952bc1=_0x588453,_0x4ed1a4=this[_0x952bc1(0x112)](_0x1af567);if(this[_0x952bc1(0x58e)](_0x4ed1a4)){const _0x477ea9='actor%1-portrait'[_0x952bc1(0x4a9)](_0x4ed1a4[_0x952bc1(0x3b3)]()),_0xc1e040=this[_0x952bc1(0x56f)](_0x477ea9,Sprite),_0x52f36d=_0x4ed1a4[_0x952bc1(0x131)]();_0x52f36d!==''?_0xc1e040['bitmap']=ImageManager['loadPicture'](_0x52f36d):_0xc1e040[_0x952bc1(0x590)]=ImageManager[_0x952bc1(0x6aa)];const _0x40ed79=this[_0x952bc1(0x651)](_0x1af567);_0xc1e040[_0x952bc1(0x4db)]['x']=0.5,_0xc1e040['anchor']['y']=0x1;let _0x25ec94=Math[_0x952bc1(0x422)](_0x40ed79['x']+_0x40ed79[_0x952bc1(0x3ad)]/0x2)+this[_0x952bc1(0x631)];_0x25ec94+=_0x4ed1a4['getBattlePortraitOffsetX']();let _0x4a19e7=Math[_0x952bc1(0x422)](this['height']);_0x4a19e7+=_0x4ed1a4[_0x952bc1(0x7f3)](),_0xc1e040[_0x952bc1(0x71c)](_0x25ec94,_0x4a19e7);const _0x35144c=VisuMZ[_0x952bc1(0x39a)][_0x952bc1(0x90d)]['BattleLayout'][_0x952bc1(0x854)];_0xc1e040[_0x952bc1(0x30a)]['x']=_0x35144c,_0xc1e040['scale']['y']=_0x35144c,_0xc1e040[_0x952bc1(0x8d0)]();}else{const _0x29ae70=this[_0x952bc1(0x5d8)](_0x1af567);this[_0x952bc1(0x9e9)](_0x4ed1a4,_0x29ae70['x'],_0x29ae70['y'],_0x29ae70[_0x952bc1(0x3ad)],_0x29ae70['height']);}},Window_BattleStatus['prototype']['createInnerPortrait']=function(_0x182704,_0x513124){const _0x20559a=_0x588453,_0x148864=this['_additionalSprites'];if(_0x148864[_0x182704])return _0x148864[_0x182704];else{const _0x18c8d7=new _0x513124();return _0x148864[_0x182704]=_0x18c8d7,this[_0x20559a(0x618)](_0x18c8d7),this[_0x20559a(0x618)](this[_0x20559a(0x28e)]),_0x18c8d7;}},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x2aa)]=function(){const _0x557e36=_0x588453;this['_createCursorArea'](),this[_0x557e36(0x652)](),Window_StatusBase[_0x557e36(0x755)][_0x557e36(0x2aa)][_0x557e36(0x90a)](this),this[_0x557e36(0x31e)]();},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x31c)]=function(){const _0x187668=_0x588453;this['_cursorArea']=new Sprite(),this['_cursorArea'][_0x187668(0x222)]=[new PIXI[(_0x187668(0x222))]['AlphaFilter']()],this[_0x187668(0x28e)][_0x187668(0x806)]=new Rectangle(),this[_0x187668(0x28e)][_0x187668(0x71c)](this['_padding'],this['_padding']),this[_0x187668(0x348)](this[_0x187668(0x28e)]);},Window_BattleStatus['prototype']['_createEffectsContainer']=function(){const _0x2d264d=_0x588453;this[_0x2d264d(0x46b)]=new Sprite(),this[_0x2d264d(0x348)](this[_0x2d264d(0x46b)]);},Window_BattleStatus[_0x588453(0x755)]['updateEffectsContainer']=function(){const _0x307869=_0x588453;this[_0x307869(0x46b)]&&this[_0x307869(0x348)](this['_effectsContainer']);},Window_BattleStatus[_0x588453(0x755)]['_createDamageContainer']=function(){const _0x599114=_0x588453;this['_damageContainer']=new Sprite(),this[_0x599114(0x348)](this['_damageContainer']);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x82e)]=function(){const _0x5edfbb=_0x588453;this[_0x5edfbb(0x3da)]=new Sprite();for(let _0x4c1183=0x0;_0x4c1183<0x9;_0x4c1183++){this['_cursorSprite']['addChild'](new Sprite());}this[_0x5edfbb(0x28e)]['addChild'](this[_0x5edfbb(0x3da)]);},Window_BattleStatus[_0x588453(0x755)]['_updateClientArea']=function(){const _0x1cbea5=_0x588453;Window_StatusBase[_0x1cbea5(0x755)][_0x1cbea5(0x978)]['call'](this),this[_0x1cbea5(0x145)]();},Window_BattleStatus['prototype']['_updateCursorArea']=function(){const _0x529110=_0x588453,_0x3543c9=this[_0x529110(0x136)];this[_0x529110(0x28e)]['move'](_0x3543c9,_0x3543c9),this[_0x529110(0x28e)]['x']=_0x3543c9-this['origin']['x'],this['_cursorArea']['y']=_0x3543c9-this[_0x529110(0x6fe)]['y'],this[_0x529110(0x486)]>0x0&&this[_0x529110(0x84c)]>0x0?this[_0x529110(0x28e)][_0x529110(0x536)]=this[_0x529110(0xa70)]():this['_cursorArea'][_0x529110(0x536)]=![];},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x39d)]=function(){const _0x214f02=_0x588453;Window_StatusBase['prototype'][_0x214f02(0x39d)]['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x4c6)]=function(){const _0x3e508a=_0x588453,_0x20eadf=this[_0x3e508a(0x28e)]['worldTransform'][_0x3e508a(0xaa8)](new Point(0x0,0x0)),_0x3af467=this[_0x3e508a(0x28e)][_0x3e508a(0x806)];_0x3af467['x']=_0x20eadf['x']+this[_0x3e508a(0x6fe)]['x'],_0x3af467['y']=_0x20eadf['y']+this['origin']['y'],_0x3af467[_0x3e508a(0x3ad)]=this[_0x3e508a(0x486)],_0x3af467['height']=this[_0x3e508a(0x84c)];},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x2cc)]=function(_0x63eab3){const _0x2330b5=_0x588453;if(this['battleLayoutStyle']()!=='portrait')return;this['drawItemImagePortraitStyle'](_0x63eab3[_0x2330b5(0x48d)]());},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x413)]=function(_0x244299,_0x40a553){const _0x1029c3=_0x588453;if(!this[_0x1029c3(0x37c)])return;if(!_0x244299)return;if(!_0x40a553)return;const _0x2c61cd=this['itemRect'](_0x40a553[_0x1029c3(0x48d)]());_0x2c61cd['x']+=_0x2c61cd['width']/0x2+this[_0x1029c3(0x631)],_0x244299['x']=_0x2c61cd['x'],_0x244299['y']=_0x2c61cd['y'],this[_0x1029c3(0x37c)][_0x1029c3(0x348)](_0x244299);},Window_BattleStatus['prototype'][_0x588453(0x3a2)]=function(_0x438e80){const _0x3feaf6=_0x588453;if(!this[_0x3feaf6(0x37c)])return;if(!_0x438e80)return;this[_0x3feaf6(0x37c)][_0x3feaf6(0x781)](_0x438e80);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x619)]=function(){const _0x1964f1=_0x588453;if(!this[_0x1964f1(0x24c)]())return;if(!this['_borderPortraitSprite'])this[_0x1964f1(0x4f4)]();this[_0x1964f1(0x830)](),this[_0x1964f1(0x3a5)]();},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x24c)]=function(){const _0x3c6031=_0x588453;if(this[_0x3c6031(0x671)]!==Window_BattleStatus)return![];if(!SceneManager[_0x3c6031(0x8b8)]())return![];return VisuMZ[_0x3c6031(0x39a)][_0x3c6031(0x90d)][_0x3c6031(0xac6)][_0x3c6031(0x612)];},Window_BattleStatus[_0x588453(0x755)]['createBorderStylePortraitSprite']=function(){const _0x5efb20=_0x588453;this['_borderPortraitSprite']=new Sprite();const _0x21d135=SceneManager[_0x5efb20(0x39b)],_0x13f4e=_0x21d135[_0x5efb20(0x816)][_0x5efb20(0x512)](_0x21d135[_0x5efb20(0x49e)]);_0x21d135[_0x5efb20(0x57d)](this[_0x5efb20(0x23d)],_0x13f4e),this[_0x5efb20(0x23d)][_0x5efb20(0x4db)]['x']=0.5,this[_0x5efb20(0x23d)][_0x5efb20(0x4db)]['y']=0x1;const _0x597c0e=VisuMZ[_0x5efb20(0x39a)][_0x5efb20(0x90d)][_0x5efb20(0xac6)][_0x5efb20(0x740)];this[_0x5efb20(0x23d)][_0x5efb20(0x30a)]['x']=_0x597c0e,this[_0x5efb20(0x23d)][_0x5efb20(0x30a)]['y']=_0x597c0e,this[_0x5efb20(0x23d)]['y']=this['y']+this[_0x5efb20(0x4ba)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x588453(0x755)][_0x588453(0xa4a)]=function(){const _0x2d3ca5=_0x588453;return BattleManager[_0x2d3ca5(0x2df)]();},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x830)]=function(){const _0x200fdd=_0x588453;this[_0x200fdd(0x23d)]['visible']=this['isBorderPortraitSpriteVisible']();const _0xd30ec5=BattleManager[_0x200fdd(0x112)](),_0x447e37=_0xd30ec5?_0xd30ec5['getBattlePortraitFilename']()||'':'';if(_0xd30ec5===this['_borderPortraitSprite']['actor']&&_0x447e37===this[_0x200fdd(0x23d)]['lastFilename'])return;this[_0x200fdd(0x23d)]['actor']=_0xd30ec5||this[_0x200fdd(0x23d)][_0x200fdd(0x112)],this[_0x200fdd(0x23d)]['lastFilename']=_0x447e37;if(!_0xd30ec5)return;else{if(_0x447e37===''){this['_borderPortraitSprite'][_0x200fdd(0x590)]=ImageManager[_0x200fdd(0x6aa)],this[_0x200fdd(0x23d)][_0x200fdd(0x4e6)]='';return;}else{const _0x482e0c=ImageManager[_0x200fdd(0x52b)](_0x447e37);this['_borderPortraitSprite']['opacity']=0x0,_0x482e0c[_0x200fdd(0x454)](this[_0x200fdd(0x6ad)]['bind'](this,_0x482e0c));}}},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x6ad)]=function(_0x26b30a){const _0x302ed8=_0x588453;this[_0x302ed8(0x6d9)]=0x14,this[_0x302ed8(0x23d)]['bitmap']=_0x26b30a;SceneManager[_0x302ed8(0x39b)][_0x302ed8(0x936)]()?(this[_0x302ed8(0x23d)]['x']=0x0,this[_0x302ed8(0x165)]=Math['ceil'](_0x26b30a[_0x302ed8(0x3ad)]/0x2)):(this[_0x302ed8(0x23d)]['x']=this[_0x302ed8(0x3ad)],this[_0x302ed8(0x165)]=this[_0x302ed8(0x3ad)]*0x3/0x4);this[_0x302ed8(0x23d)][_0x302ed8(0x8d6)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x302ed8(0x4ba)];const _0x37fbcc=BattleManager[_0x302ed8(0x112)]();_0x37fbcc&&(this[_0x302ed8(0x165)]+=_0x37fbcc['getBattlePortraitOffsetX'](),this[_0x302ed8(0x23d)]['y']+=_0x37fbcc['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x588453(0x755)]['updateBorderSprite']=function(){const _0x2aa4c9=_0x588453;if(this[_0x2aa4c9(0x6d9)]>0x0){const _0x46a36e=this[_0x2aa4c9(0x6d9)],_0x29fbc8=this['_borderPortraitSprite'];_0x29fbc8['x']=(_0x29fbc8['x']*(_0x46a36e-0x1)+this['_borderPortraitTargetX'])/_0x46a36e,_0x29fbc8[_0x2aa4c9(0x8d6)]=(_0x29fbc8['opacity']*(_0x46a36e-0x1)+0xff)/_0x46a36e,this['_borderPortraitDuration']--;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x416f3f=_0x588453;return;this['_effectsContainer']&&(this['_effectsContainer']['x']=this['x'],this[_0x416f3f(0x46b)]['y']=this['y']),this[_0x416f3f(0x37c)]&&(this[_0x416f3f(0x37c)]['x']=this['x'],this[_0x416f3f(0x37c)]['y']=this['y']);},Window_BattleStatus[_0x588453(0x755)][_0x588453(0x6ed)]=function(){const _0x33df69=_0x588453,_0x4edc0b=VisuMZ['BattleCore'][_0x33df69(0x90d)][_0x33df69(0xac6)];if(_0x4edc0b['StatusWindowAttachmentBack']){const _0x29267d=new Sprite();_0x29267d[_0x33df69(0x590)]=ImageManager['loadSystem'](_0x4edc0b[_0x33df69(0x287)]),_0x29267d['x']=_0x4edc0b[_0x33df69(0x757)]||0x0,_0x29267d['y']=_0x4edc0b[_0x33df69(0x229)]||0x0,this[_0x33df69(0x618)](_0x29267d),this[_0x33df69(0x698)]=_0x29267d;}if(_0x4edc0b[_0x33df69(0x734)]){const _0xa6d7c5=new Sprite();_0xa6d7c5[_0x33df69(0x590)]=ImageManager[_0x33df69(0x90e)](_0x4edc0b['StatusWindowAttachmentFront']),_0xa6d7c5['x']=_0x4edc0b['StatusWindowAttachmentFrontOffsetX']||0x0,_0xa6d7c5['y']=_0x4edc0b[_0x33df69(0x489)]||0x0,this[_0x33df69(0x348)](_0xa6d7c5),this[_0x33df69(0x22c)]=_0xa6d7c5;}},Window_BattleStatus['prototype']['updateAttachmentSprites']=function(){const _0x3721c0=_0x588453;this[_0x3721c0(0x22c)]&&this['addChild'](this['_frontAttachmentSprite']),this['_backAttachmentSprite']&&this[_0x3721c0(0x618)](this[_0x3721c0(0x698)]);},Window_BattleActor[_0x588453(0x755)][_0x588453(0x393)]=function(){return this['isActionSelectionValid']();},Window_BattleActor[_0x588453(0x755)]['isActionSelectionValid']=function(){const _0x1969f5=_0x588453,_0x1287f=BattleManager[_0x1969f5(0x5c7)]();if(!_0x1287f)return!![];if(!_0x1287f['item']())return!![];const _0x1de95c=this[_0x1969f5(0x112)](this[_0x1969f5(0x48d)]()),_0x544692=_0x1287f['item']()['note'];if(_0x1287f[_0x1969f5(0x216)]()){if(_0x1de95c===BattleManager[_0x1969f5(0x112)]())return![];}if(_0x1287f['isForDeadFriend']()){if(!_0x1de95c[_0x1969f5(0x8c6)]())return![];}if(_0x1287f['isForAliveFriend']()){if(!_0x1de95c[_0x1969f5(0x610)]())return![];}return!![];},Window_BattleActor[_0x588453(0x755)][_0x588453(0x74b)]=function(_0x31351e){const _0xa93327=_0x588453;this[_0xa93327(0x802)]=_0x31351e;},VisuMZ[_0x588453(0x39a)][_0x588453(0x1bc)]=Window_BattleActor[_0x588453(0x755)][_0x588453(0x37b)],Window_BattleActor[_0x588453(0x755)][_0x588453(0x37b)]=function(){const _0x35fac4=_0x588453;Window_BattleStatus[_0x35fac4(0x755)][_0x35fac4(0x37b)]['call'](this),this[_0x35fac4(0x802)]?this[_0x35fac4(0x8ad)]():VisuMZ[_0x35fac4(0x39a)][_0x35fac4(0x1bc)]['call'](this);},Window_BattleActor[_0x588453(0x755)]['processEnemyModeTouchBattleCore']=function(){const _0x5126de=_0x588453,_0x12317b=SceneManager['_scene'][_0x5126de(0x62e)];if(!_0x12317b)return;this[_0x5126de(0x79f)]=![];const _0x18166f=this['hitIndex']();if(_0x18166f>=0x0){this['select'](_0x18166f);if(TouchInput['isClicked']()){const _0x53589c=$gameParty[_0x5126de(0x425)]()[_0x18166f],_0x4edd7f=_0x12317b[_0x5126de(0xaab)]['indexOf'](_0x53589c);_0x4edd7f>=0x0&&(_0x12317b['select'](_0x4edd7f),_0x12317b[_0x5126de(0x194)]());}}},Window_BattleActor[_0x588453(0x755)][_0x588453(0x4b6)]=function(){const _0x36af55=_0x588453;this['_enemyWindowMode']&&(this[_0x36af55(0x77e)]++,this[_0x36af55(0x3ef)]=!![]);const _0x1bf90c=Window_BattleStatus[_0x36af55(0x755)]['_makeCursorAlpha'][_0x36af55(0x90a)](this);return this[_0x36af55(0x802)]&&(this[_0x36af55(0x3ef)]=![]),_0x1bf90c;},VisuMZ[_0x588453(0x39a)][_0x588453(0x670)]=Window_BattleActor[_0x588453(0x755)][_0x588453(0x8d0)],Window_BattleActor[_0x588453(0x755)]['show']=function(){const _0x4afc06=_0x588453;VisuMZ[_0x4afc06(0x39a)][_0x4afc06(0x670)][_0x4afc06(0x90a)](this);const _0x795431=BattleManager['inputtingAction']();if(_0x795431){const _0x331ff8=$gameParty[_0x4afc06(0x157)]();_0x795431[_0x4afc06(0x784)]()&&_0x331ff8['length']>0x1&&this[_0x4afc06(0xac9)](_0x4afc06(0x66d),this[_0x4afc06(0x6c6)][_0x4afc06(0x80e)](this));}},VisuMZ[_0x588453(0x39a)]['Window_BattleActor_hide']=Window_BattleActor[_0x588453(0x755)][_0x588453(0x8e9)],Window_BattleActor[_0x588453(0x755)][_0x588453(0x8e9)]=function(){const _0x17b01e=_0x588453;VisuMZ[_0x17b01e(0x39a)]['Window_BattleActor_hide'][_0x17b01e(0x90a)](this),delete this[_0x17b01e(0x983)][_0x17b01e(0x719)],delete this[_0x17b01e(0x983)][_0x17b01e(0x66d)];},Window_BattleActor[_0x588453(0x755)][_0x588453(0x6c6)]=function(){const _0x1fc498=_0x588453,_0x1d2d99=BattleManager[_0x1fc498(0x5c7)]();if(_0x1d2d99)_0x1d2d99[_0x1fc498(0x106)](_0x1fc498(0x6ae));this[_0x1fc498(0x194)]();},VisuMZ['BattleCore'][_0x588453(0x86c)]=Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x155)],Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x155)]=function(_0x4be23f){const _0x38534b=_0x588453;this[_0x38534b(0x630)]=null,VisuMZ[_0x38534b(0x39a)][_0x38534b(0x86c)][_0x38534b(0x90a)](this,_0x4be23f);if(Imported['VisuMZ_2_AggroControlSystem']){if(VisuMZ['AggroControlSystem'][_0x38534b(0x4ec)]<1.12){let _0x47dcd3='';_0x47dcd3+=_0x38534b(0xae7),_0x47dcd3+=_0x38534b(0xf5),_0x47dcd3+=_0x38534b(0x812),alert(_0x47dcd3),SceneManager['exit']();}}},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x8e7)]=function(){const _0x20ed36=_0x588453;return this[_0x20ed36(0x9be)]();},VisuMZ[_0x588453(0x39a)]['Window_BattleEnemy_show']=Window_BattleEnemy['prototype'][_0x588453(0x8d0)],Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x8d0)]=function(){const _0x48dc4f=_0x588453;VisuMZ['BattleCore'][_0x48dc4f(0x8d9)][_0x48dc4f(0x90a)](this),this['y']=Graphics[_0x48dc4f(0x4ba)]*0xa,this[_0x48dc4f(0x2ba)]()&&this[_0x48dc4f(0x3b6)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x744)]=Window_BattleEnemy[_0x588453(0x755)]['hide'],Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x8e9)]=function(){const _0x184b80=_0x588453;VisuMZ['BattleCore'][_0x184b80(0x744)][_0x184b80(0x90a)](this),$gameParty[_0x184b80(0xed)](null),delete this[_0x184b80(0x983)]['pageup'],delete this['_handlers']['pagedown'];},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x77d)]=function(){const _0x46b1f3=_0x588453;let _0x198754=$gameTroop[_0x46b1f3(0x157)]();const _0x152e38=BattleManager[_0x46b1f3(0x5c7)]();if(_0x152e38){_0x152e38[_0x46b1f3(0x784)]()&&_0x198754[_0x46b1f3(0x6e3)]>0x1&&this[_0x46b1f3(0xac9)](_0x46b1f3(0x719),this[_0x46b1f3(0x9d0)][_0x46b1f3(0x80e)](this));if(_0x152e38[_0x46b1f3(0x111)]()){const _0x98133a=$gameParty['aliveMembers']();_0x198754=_0x198754[_0x46b1f3(0x6e2)](_0x98133a),_0x152e38[_0x46b1f3(0x784)]()&&_0x98133a[_0x46b1f3(0x6e3)]>0x1&&this[_0x46b1f3(0xac9)]('pagedown',this[_0x46b1f3(0x6c6)][_0x46b1f3(0x80e)](this));}}return _0x198754;},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x54e)]=function(){const _0x448680=_0x588453;this['_enemies']=this[_0x448680(0x77d)](),this[_0x448680(0x4d9)](),Window_Selectable[_0x448680(0x755)][_0x448680(0x54e)][_0x448680(0x90a)](this);},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x4d9)]=function(){const _0x4dbfa6=_0x588453;this[_0x4dbfa6(0xaab)][_0x4dbfa6(0x882)]((_0x1eb41d,_0x32de14)=>{const _0x1a416c=_0x4dbfa6;if(_0x1eb41d['isActor']()!==_0x32de14['isActor']()){if(_0x1eb41d[_0x1a416c(0x4ad)]())return-0x1;if(_0x32de14[_0x1a416c(0x4ad)]())return 0x1;}if(_0x1eb41d[_0x1a416c(0xa52)]()&&_0x32de14[_0x1a416c(0xa52)]())return _0x1eb41d[_0x1a416c(0x48d)]()-_0x32de14[_0x1a416c(0x48d)]();return _0x1eb41d[_0x1a416c(0xabe)]()[_0x1a416c(0x494)]===_0x32de14[_0x1a416c(0xabe)]()[_0x1a416c(0x494)]?_0x1eb41d[_0x1a416c(0xabe)]()[_0x1a416c(0xaba)]-_0x32de14['battler']()[_0x1a416c(0xaba)]:_0x1eb41d[_0x1a416c(0xabe)]()[_0x1a416c(0x494)]-_0x32de14[_0x1a416c(0xabe)]()[_0x1a416c(0x494)];}),SceneManager[_0x4dbfa6(0x9b6)]()&&this[_0x4dbfa6(0xaab)][_0x4dbfa6(0xfa)]();},Window_BattleEnemy['prototype'][_0x588453(0x8ca)]=function(){const _0x671c10=_0x588453,_0x1f7541=VisuMZ['BattleCore'][_0x671c10(0x90d)][_0x671c10(0x732)];_0x1f7541['LastSelected']?this[_0x671c10(0x2e3)]():this[_0x671c10(0x63f)]();},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x2e3)]=function(){const _0x1f3dac=_0x588453,_0x414ece=BattleManager[_0x1f3dac(0x5c7)]();if(_0x414ece&&_0x414ece['isForAnyone']()){if(_0x414ece[_0x1f3dac(0x3c0)]()){if(this['_lastActor']&&this[_0x1f3dac(0xaab)]['includes'](this['_lastActor'])){const _0x47ba75=this[_0x1f3dac(0xaab)][_0x1f3dac(0x512)](this['_lastActor']);return this['forceSelect'](_0x47ba75);}else return this[_0x1f3dac(0x63f)]();}}if(this[_0x1f3dac(0x630)]&&this[_0x1f3dac(0xaab)]['includes'](this[_0x1f3dac(0x630)])){const _0x609d89=this[_0x1f3dac(0xaab)][_0x1f3dac(0x512)](this[_0x1f3dac(0x630)]);this[_0x1f3dac(0x546)](_0x609d89);}else this[_0x1f3dac(0x63f)]();},Window_BattleEnemy['prototype'][_0x588453(0x63f)]=function(){const _0x325c0f=_0x588453,_0x17c175=BattleManager[_0x325c0f(0x5c7)]();if(_0x17c175&&_0x17c175[_0x325c0f(0x111)]()){const _0x8d179f=$gameParty[_0x325c0f(0x157)]()[0x0];let _0x50ac75=this[_0x325c0f(0xaab)][_0x325c0f(0x512)](_0x8d179f);const _0x3b3425=_0x17c175[_0x325c0f(0x343)]()[_0x325c0f(0xae3)];if(_0x3b3425[_0x325c0f(0x809)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x50ac75);return;}else{if(_0x3b3425[_0x325c0f(0x809)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x325c0f(0x546)](_0x50ac75-0x1);return;}}}const _0x4d40be=VisuMZ[_0x325c0f(0x39a)][_0x325c0f(0x90d)][_0x325c0f(0x732)];let _0x3730e6=![];$gameSystem[_0x325c0f(0x879)]()?_0x3730e6=_0x4d40be['SideviewSelect']:_0x3730e6=_0x4d40be[_0x325c0f(0x1fb)],this[_0x325c0f(0x546)](_0x3730e6?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x588453(0x755)]['callOkHandler']=function(){const _0x5b1f18=_0x588453;Window_Selectable['prototype'][_0x5b1f18(0x4c1)][_0x5b1f18(0x90a)](this);if(!this[_0x5b1f18(0xf1)]())return;if(this['enemy']()[_0x5b1f18(0x4ad)]())this[_0x5b1f18(0x630)]=this[_0x5b1f18(0xf1)]();if(this[_0x5b1f18(0xf1)]()[_0x5b1f18(0xa52)]())this[_0x5b1f18(0x3de)]=this['enemy']();},Window_BattleEnemy[_0x588453(0x755)]['select']=function(_0x381b9b){const _0x336430=_0x588453;Window_Selectable[_0x336430(0x755)][_0x336430(0xed)][_0x336430(0x90a)](this,_0x381b9b),$gameTroop[_0x336430(0xed)](this['enemy']()),$gameParty[_0x336430(0xed)](this[_0x336430(0xf1)]());if(!this[_0x336430(0xf1)]())return;if(this[_0x336430(0x2ba)]()){const _0x49fadf=SceneManager['_scene'][_0x336430(0xa99)];this[_0x336430(0xf1)]()['isActor']()?_0x49fadf[_0x336430(0xed)](this[_0x336430(0xf1)]()['index']()):_0x49fadf['deselect']();}},Window_BattleEnemy['prototype'][_0x588453(0x2ba)]=function(){const _0x4838a2=_0x588453;if(!this[_0x4838a2(0x536)])return![];if($gameSystem[_0x4838a2(0x879)]())return![];const _0x1c2a33=SceneManager[_0x4838a2(0x39b)][_0x4838a2(0x80f)](),_0xeef241=[_0x4838a2(0x880),_0x4838a2(0x70f),'xp',_0x4838a2(0x418),_0x4838a2(0x469)];return _0xeef241['includes'](_0x1c2a33);},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x3b6)]=function(){const _0x255dcc=_0x588453,_0x272826=SceneManager[_0x255dcc(0x39b)]['_actorWindow'];_0x272826[_0x255dcc(0x8d0)](),_0x272826[_0x255dcc(0x74b)](!![]),_0x272826[_0x255dcc(0x54e)](),_0x272826[_0x255dcc(0x40b)]();const _0x5a5dbf=SceneManager[_0x255dcc(0x39b)][_0x255dcc(0x80f)](),_0xdd5454=['xp',_0x255dcc(0x418),_0x255dcc(0x469)];if(_0xdd5454[_0x255dcc(0x51e)](_0x5a5dbf)){const _0x55495e=SceneManager[_0x255dcc(0x39b)]['_statusWindow'];_0x55495e['scale']['y']=0x0;}},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x86b)]=function(){const _0x15b95c=_0x588453,_0x3c2943=SceneManager['_scene'][_0x15b95c(0xa99)];_0x3c2943[_0x15b95c(0x8e9)](),_0x3c2943['setEnemyWindowMode'](![]),_0x3c2943[_0x15b95c(0x40b)]();const _0x5135ea=SceneManager[_0x15b95c(0x39b)]['_statusWindow'];_0x5135ea['scale']['y']=0x1;},Window_BattleEnemy[_0x588453(0x755)]['selectAllEnemies']=function(){const _0x3e70da=_0x588453,_0x178f4d=BattleManager[_0x3e70da(0x5c7)]();if(_0x178f4d)_0x178f4d[_0x3e70da(0x106)](_0x3e70da(0x726));this[_0x3e70da(0x194)]();},Window_BattleEnemy[_0x588453(0x755)][_0x588453(0x6c6)]=function(){const _0x4026de=_0x588453,_0x7e4000=BattleManager[_0x4026de(0x5c7)]();if(_0x7e4000)_0x7e4000[_0x4026de(0x106)](_0x4026de(0x6ae));this['processOk']();},Window_BattleEnemy['prototype']['isCurrentItemEnabled']=function(){const _0xbb3f5b=_0x588453;return this[_0xbb3f5b(0x749)]();},Window_BattleEnemy['prototype']['isActionSelectionValid']=function(){const _0x4ed92c=_0x588453,_0x48773b=BattleManager['inputtingAction']();if(!_0x48773b)return!![];if(!_0x48773b[_0x4ed92c(0x343)]())return!![];const _0x217d43=this[_0x4ed92c(0xf1)](),_0x46578f=_0x48773b['item']()[_0x4ed92c(0x97d)];if(_0x48773b[_0x4ed92c(0x216)]()){if(_0x217d43===BattleManager['actor']())return![];}return!![];},Window_BattleItem[_0x588453(0x755)][_0x588453(0x51e)]=function(_0x107ef5){const _0x4e9236=_0x588453;if(!_0x107ef5)return![];return _0x107ef5[_0x4e9236(0xf6)]===0x0||_0x107ef5[_0x4e9236(0xf6)]===0x1;};function Window_AutoBattleCancel(){const _0x5d9cca=_0x588453;this[_0x5d9cca(0x155)](...arguments);}Window_AutoBattleCancel[_0x588453(0x755)]=Object['create'](Window_Base[_0x588453(0x755)]),Window_AutoBattleCancel['prototype'][_0x588453(0x671)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x588453(0x155)]=function(_0x548a40){const _0x353b4a=_0x588453;Window_Base[_0x353b4a(0x755)][_0x353b4a(0x155)][_0x353b4a(0x90a)](this,_0x548a40),this['setBackgroundType'](this[_0x353b4a(0x685)]()),this[_0x353b4a(0x54e)]();},Window_AutoBattleCancel[_0x588453(0x755)][_0x588453(0x685)]=function(){const _0x5462a8=_0x588453;return VisuMZ[_0x5462a8(0x39a)][_0x5462a8(0x90d)]['AutoBattle'][_0x5462a8(0xade)];},Window_AutoBattleCancel[_0x588453(0x755)]['refresh']=function(){const _0x23ff20=_0x588453;this[_0x23ff20(0xaf2)][_0x23ff20(0x399)]();const _0x37f9cf=VisuMZ[_0x23ff20(0x39a)]['Settings'][_0x23ff20(0x23c)]['AutoBattleMsg'],_0x18ed9d=_0x37f9cf[_0x23ff20(0x4a9)](this[_0x23ff20(0xadd)](),this[_0x23ff20(0x1f6)]()),_0x2e50b5=this['textSizeEx'](_0x18ed9d)[_0x23ff20(0x3ad)],_0x30ab3d=Math['floor']((this['innerWidth']-_0x2e50b5)/0x2);this[_0x23ff20(0x521)](_0x18ed9d,_0x30ab3d,0x0,_0x2e50b5);},Window_AutoBattleCancel[_0x588453(0x755)][_0x588453(0xadd)]=function(){const _0x2bb49c=_0x588453;return Imported[_0x2bb49c(0xe0)]?TextManager['getInputButtonString']('ok'):VisuMZ[_0x2bb49c(0x39a)]['Settings'][_0x2bb49c(0x23c)][_0x2bb49c(0x996)];},Window_AutoBattleCancel['prototype'][_0x588453(0x1f6)]=function(){const _0xed3516=_0x588453;return Imported[_0xed3516(0xe0)]?TextManager['getInputButtonString'](_0xed3516(0x382)):VisuMZ[_0xed3516(0x39a)][_0xed3516(0x90d)][_0xed3516(0x23c)][_0xed3516(0x1b3)];},Window_AutoBattleCancel[_0x588453(0x755)]['update']=function(){const _0x55a536=_0x588453;Window_Base[_0x55a536(0x755)][_0x55a536(0x665)][_0x55a536(0x90a)](this),this[_0x55a536(0x917)](),this[_0x55a536(0x647)]();},Window_AutoBattleCancel['prototype'][_0x588453(0x917)]=function(){const _0x53bf98=_0x588453;this[_0x53bf98(0x536)]=BattleManager[_0x53bf98(0xd3)];},Window_AutoBattleCancel['prototype']['updateCancel']=function(){const _0x514a72=_0x588453;if(!BattleManager[_0x514a72(0xd3)])return;(Input['isTriggered']('ok')||Input[_0x514a72(0x8d8)](_0x514a72(0x382))||TouchInput[_0x514a72(0x64c)]()||TouchInput[_0x514a72(0x248)]())&&(SoundManager[_0x514a72(0x835)](),BattleManager['_autoBattle']=![],Input[_0x514a72(0x399)](),TouchInput[_0x514a72(0x399)]());};function Window_EnemyName(){const _0x142f7d=_0x588453;this[_0x142f7d(0x155)](...arguments);}Window_EnemyName[_0x588453(0x755)]=Object[_0x588453(0xa42)](Window_StatusBase[_0x588453(0x755)]),Window_EnemyName[_0x588453(0x755)][_0x588453(0x671)]=Window_EnemyName,Window_EnemyName['prototype'][_0x588453(0x155)]=function(_0x4a0e48){const _0x555c4d=_0x588453;this['_enemyID']=_0x4a0e48,this['_text']='';const _0x183db7=new Rectangle(0x0,0x0,Graphics[_0x555c4d(0x586)],this['lineHeight']()*0x4);Window_StatusBase['prototype']['initialize'][_0x555c4d(0x90a)](this,_0x183db7),this[_0x555c4d(0x79e)](0x2),this[_0x555c4d(0xacc)]=0x0;},Window_EnemyName[_0x588453(0x755)][_0x588453(0x86e)]=function(){const _0x17fb36=_0x588453;this[_0x17fb36(0x631)]=0x0;},Window_EnemyName[_0x588453(0x755)]['enemy']=function(){const _0x4bd793=_0x588453;return $gameTroop[_0x4bd793(0x425)]()[this[_0x4bd793(0x794)]];},Window_EnemyName[_0x588453(0x755)][_0x588453(0x665)]=function(){const _0x317490=_0x588453;Window_StatusBase[_0x317490(0x755)][_0x317490(0x665)][_0x317490(0x90a)](this),this[_0x317490(0xf1)]()&&this[_0x317490(0xf1)]()[_0x317490(0x4cf)]()!==this[_0x317490(0x963)]&&(this[_0x317490(0x963)]=this[_0x317490(0xf1)]()[_0x317490(0x4cf)](),this['refresh']()),this[_0x317490(0x890)](),this[_0x317490(0xa81)]();},Window_EnemyName[_0x588453(0x755)][_0x588453(0x890)]=function(){const _0x798888=_0x588453;if(!this[_0x798888(0xf1)]()){if(this[_0x798888(0xacc)]>0x0)this[_0x798888(0xacc)]-=0x10;}else{if(this[_0x798888(0xf1)]()[_0x798888(0x8c6)]()){if(this[_0x798888(0xacc)]>0x0)this[_0x798888(0xacc)]-=0x10;}else{if(SceneManager[_0x798888(0x39b)][_0x798888(0x62e)]&&SceneManager[_0x798888(0x39b)][_0x798888(0x62e)][_0x798888(0x3ef)]&&SceneManager['_scene']['_enemyWindow']['_enemies'][_0x798888(0x51e)](this[_0x798888(0xf1)]())){if(this['contentsOpacity']<0xff)this[_0x798888(0xacc)]+=0x10;}else this[_0x798888(0xacc)]>0x0&&(this[_0x798888(0xacc)]-=0x10);}}},Window_EnemyName['prototype'][_0x588453(0xa81)]=function(){const _0x5d2204=_0x588453;if(!this[_0x5d2204(0xf1)]())return;SceneManager[_0x5d2204(0x9b6)]()?this['x']=Graphics[_0x5d2204(0x586)]-this[_0x5d2204(0xf1)]()['battler']()[_0x5d2204(0x494)]:this['x']=this[_0x5d2204(0xf1)]()[_0x5d2204(0xabe)]()['_baseX'];this['x']-=Math[_0x5d2204(0x422)](this[_0x5d2204(0x3ad)]/0x2),this['y']=this[_0x5d2204(0xf1)]()[_0x5d2204(0xabe)]()[_0x5d2204(0xaba)]-Math[_0x5d2204(0x422)](this[_0x5d2204(0xaa9)]()*1.5);const _0x56bfc2=VisuMZ[_0x5d2204(0x39a)][_0x5d2204(0x90d)]['Enemy'];this['x']+=_0x56bfc2[_0x5d2204(0x55e)]||0x0,this['y']+=_0x56bfc2[_0x5d2204(0xa79)]||0x0;},Window_EnemyName[_0x588453(0x755)][_0x588453(0x225)]=function(){const _0x5b140d=_0x588453;Window_Base[_0x5b140d(0x755)]['resetFontSettings']['call'](this),this[_0x5b140d(0xaf2)][_0x5b140d(0x919)]=VisuMZ[_0x5b140d(0x39a)]['Settings']['Enemy'][_0x5b140d(0x2c4)];},Window_EnemyName[_0x588453(0x755)][_0x588453(0x54e)]=function(){const _0x2b6d50=_0x588453;Window_StatusBase['prototype'][_0x2b6d50(0x54e)][_0x2b6d50(0x90a)](this),this['contents']['clear']();if(!this['enemy']())return;this[_0x2b6d50(0x45d)]();},Window_EnemyName[_0x588453(0x755)][_0x588453(0x45d)]=function(){const _0x4d32cd=_0x588453;this[_0x4d32cd(0x963)]=this[_0x4d32cd(0xf1)]()[_0x4d32cd(0x4cf)]();const _0x2c1b71=this[_0x4d32cd(0x523)](this[_0x4d32cd(0x963)])[_0x4d32cd(0x3ad)],_0x1f3509=Math[_0x4d32cd(0x422)]((this[_0x4d32cd(0x486)]-_0x2c1b71)/0x2);this[_0x4d32cd(0x521)](this[_0x4d32cd(0x963)],_0x1f3509,0x0,_0x2c1b71+0x8);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x493)]=function(){const _0x10b640=_0x588453;return VisuMZ[_0x10b640(0x39a)][_0x10b640(0x90d)]['BattleLog'][_0x10b640(0x78a)];},Window_BattleLog['prototype'][_0x588453(0x73b)]=function(){const _0x347c64=_0x588453;return VisuMZ['BattleCore']['Settings'][_0x347c64(0x6d3)][_0x347c64(0x767)];},Window_BattleLog[_0x588453(0x755)][_0x588453(0x894)]=function(){const _0x4f5efc=_0x588453;return VisuMZ[_0x4f5efc(0x39a)]['Settings'][_0x4f5efc(0x6d3)][_0x4f5efc(0x259)];},Window_BattleLog[_0x588453(0x755)][_0x588453(0x21e)]=function(){return![];},Window_BattleLog[_0x588453(0x755)][_0x588453(0xa45)]=function(_0x27f5f7,_0x27ee9c){const _0x4d5f55=_0x588453;this[_0x4d5f55(0x4e1)]('actionSplicePoint'),BattleManager[_0x4d5f55(0x912)](_0x27f5f7,_0x27ee9c),this['callNextMethod']();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x89d)]=function(_0x349403,_0x48b277,_0x4feb52){const _0xd895bd=_0x588453;this[_0xd895bd(0x4e1)](_0xd895bd(0x22e)),BattleManager[_0xd895bd(0xa6a)](_0x349403,_0x48b277,_0x4feb52),this[_0xd895bd(0x378)]();},Window_BattleLog['prototype'][_0x588453(0x22e)]=function(){const _0x217401=_0x588453;this[_0x217401(0x378)]();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x2b9)]=function(_0x289144){const _0x1fdfaa=_0x588453,_0x20c78f=Array['prototype'][_0x1fdfaa(0x19b)]['call'](arguments,0x1),_0x2591d5={'name':_0x289144,'params':_0x20c78f},_0x1e358e=this[_0x1fdfaa(0xe5)][_0x1fdfaa(0x89e)](_0x261509=>_0x261509[_0x1fdfaa(0x4cf)])[_0x1fdfaa(0x512)](_0x1fdfaa(0x22e));_0x1e358e>=0x0?this[_0x1fdfaa(0xe5)][_0x1fdfaa(0xa71)](_0x1e358e,0x0,_0x2591d5):this[_0x1fdfaa(0xe5)]['push'](_0x2591d5);},Window_BattleLog['prototype'][_0x588453(0x4e1)]=function(_0x5c9596){const _0x5ae9e6=_0x588453,_0x30c442=Array['prototype'][_0x5ae9e6(0x19b)][_0x5ae9e6(0x90a)](arguments,0x1);this['_methods'][_0x5ae9e6(0x4e1)]({'name':_0x5c9596,'params':_0x30c442});},Window_BattleLog['prototype'][_0x588453(0x579)]=function(){const _0x85e7b7=_0x588453;if(!$gameTemp[_0x85e7b7(0x972)]())return;console[_0x85e7b7(0x6bf)](this['_methods'][_0x85e7b7(0x89e)](_0x3289eb=>_0x3289eb[_0x85e7b7(0x4cf)])[_0x85e7b7(0x516)]('\x0a'));},VisuMZ[_0x588453(0x39a)][_0x588453(0x840)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x54e)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x54e)]=function(){const _0x49a1e1=_0x588453;this[_0x49a1e1(0x4ab)]=!![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x987)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x665)],Window_BattleLog[_0x588453(0x755)]['update']=function(){const _0x481331=_0x588453;VisuMZ[_0x481331(0x39a)]['Window_BattleLog_update']['call'](this);if(this[_0x481331(0x4ab)])this[_0x481331(0x517)]();},Window_BattleLog[_0x588453(0x755)]['processRefresh']=function(){const _0x64d9b9=_0x588453;this['_requestRefresh']=![],VisuMZ['BattleCore'][_0x64d9b9(0x840)][_0x64d9b9(0x90a)](this);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x20e)]=function(_0x3a9eec){const _0x502928=_0x588453;let _0x3589ff=VisuMZ[_0x502928(0x39a)][_0x502928(0x90d)][_0x502928(0x6d3)][_0x502928(0x715)][_0x502928(0x939)]()[_0x502928(0x4f2)](),_0x1391bf=this[_0x502928(0x66c)][_0x3a9eec];if(_0x1391bf['match'](/<LEFT>/i))_0x3589ff=_0x502928(0x175);else{if(_0x1391bf[_0x502928(0x809)](/<CENTER>/i))_0x3589ff='center';else _0x1391bf['match'](/<RIGHT>/i)&&(_0x3589ff='right');}_0x1391bf=_0x1391bf[_0x502928(0x582)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1391bf=_0x1391bf[_0x502928(0x582)](/\\I\[0\]/gi,'');const _0x49ce97=this[_0x502928(0x33e)](_0x3a9eec);this[_0x502928(0xaf2)][_0x502928(0xa57)](_0x49ce97['x'],_0x49ce97['y'],_0x49ce97[_0x502928(0x3ad)],_0x49ce97[_0x502928(0x4ba)]);const _0x591a25=this[_0x502928(0x523)](_0x1391bf)[_0x502928(0x3ad)];let _0x19930f=_0x49ce97['x'];if(_0x3589ff==='center')_0x19930f+=(_0x49ce97[_0x502928(0x3ad)]-_0x591a25)/0x2;else _0x3589ff===_0x502928(0x1d1)&&(_0x19930f+=_0x49ce97[_0x502928(0x3ad)]-_0x591a25);this['drawTextEx'](_0x1391bf,_0x19930f,_0x49ce97['y'],_0x591a25+0x8);},Window_BattleLog['prototype'][_0x588453(0x433)]=function(_0x1d486a){const _0x564ee2=_0x588453;this[_0x564ee2(0x66c)]['push'](_0x1d486a),this[_0x564ee2(0x54e)](),this[_0x564ee2(0x378)]();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x5ee)]=function(){const _0x483130=_0x588453;let _0x25a3fd=![];switch(this[_0x483130(0x25c)]){case'effect':_0x25a3fd=this[_0x483130(0x9cf)][_0x483130(0x36a)]();break;case'movement':_0x25a3fd=this[_0x483130(0x9cf)][_0x483130(0x682)]();break;case _0x483130(0x8aa):_0x25a3fd=this[_0x483130(0x9cf)]['isAnimationPlaying']();break;case _0x483130(0x889):_0x25a3fd=this[_0x483130(0x9cf)][_0x483130(0x173)]();break;case _0x483130(0x60c):_0x25a3fd=this[_0x483130(0x9cf)]['isAnyoneJumping']();break;case _0x483130(0x8d6):_0x25a3fd=this[_0x483130(0x9cf)][_0x483130(0x3f8)]();break;}return!_0x25a3fd&&(this['_waitMode']=''),_0x25a3fd;},Window_BattleLog[_0x588453(0x755)]['waitForAnimation']=function(){const _0x453bdb=_0x588453;this['setWaitMode'](_0x453bdb(0x8aa));},Window_BattleLog[_0x588453(0x755)][_0x588453(0x68a)]=function(){const _0x14829f=_0x588453;this[_0x14829f(0xa68)](_0x14829f(0x889));},Window_BattleLog[_0x588453(0x755)]['waitForJump']=function(){const _0x169ed8=_0x588453;this[_0x169ed8(0xa68)](_0x169ed8(0x60c));},Window_BattleLog[_0x588453(0x755)][_0x588453(0x67e)]=function(){this['setWaitMode']('opacity');},Window_BattleLog[_0x588453(0x755)][_0x588453(0xaaa)]=function(){const _0x399281=_0x588453,_0x41de8e=VisuMZ[_0x399281(0x39a)][_0x399281(0x90d)]['BattleLog'];if(!_0x41de8e[_0x399281(0x208)])return;this[_0x399281(0x2b9)](_0x399281(0x433),_0x41de8e['StartTurnMsg'][_0x399281(0x4a9)]($gameTroop[_0x399281(0x24a)]())),this[_0x399281(0x2b9)]('waitCount',_0x41de8e[_0x399281(0x2c7)]),this[_0x399281(0x2b9)](_0x399281(0x399));},Window_BattleLog[_0x588453(0x755)][_0x588453(0x89a)]=function(_0x53bf01,_0x3b88a2,_0x450e54){const _0x5f20b9=_0x588453;this[_0x5f20b9(0x445)](_0x3b88a2)?BattleManager['prepareCustomActionSequence']():this[_0x5f20b9(0x212)](_0x53bf01,_0x3b88a2,_0x450e54);},Window_BattleLog['prototype'][_0x588453(0x445)]=function(_0xe09f11){const _0x347457=_0x588453;if(!SceneManager[_0x347457(0x8b8)]())return![];if(!_0xe09f11)return![];if(!_0xe09f11[_0x347457(0x343)]())return![];if(_0xe09f11['item']()[_0x347457(0x97d)][_0x347457(0x809)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x347457(0x75d)](_0xe09f11[_0x347457(0x343)]()))return!![];return![];},Window_BattleLog[_0x588453(0x755)][_0x588453(0x212)]=function(_0x26b13d,_0x41d95b,_0x382407){const _0x2ef092=_0x588453;this[_0x2ef092(0x5c5)](_0x26b13d,_0x41d95b,_0x382407),this['createEffectActionSet'](_0x26b13d,_0x41d95b,_0x382407),this[_0x2ef092(0x995)](_0x26b13d,_0x41d95b,_0x382407);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x87b)]=function(_0x2c2e2a,_0x348697){const _0x2eec2e=_0x588453,_0x37f3f1=VisuMZ['BattleCore'][_0x2eec2e(0x90d)][_0x2eec2e(0x6d3)];_0x37f3f1['ActionCenteredName']&&this[_0x2eec2e(0x2b9)](_0x2eec2e(0x433),'<CENTER>%1'[_0x2eec2e(0x4a9)](DataManager[_0x2eec2e(0x92a)](_0x348697)));if(DataManager[_0x2eec2e(0x8c8)](_0x348697)){if(_0x37f3f1[_0x2eec2e(0x59f)])this[_0x2eec2e(0x6e6)](_0x348697[_0x2eec2e(0x332)],_0x2c2e2a,_0x348697);if(_0x37f3f1[_0x2eec2e(0x340)])this[_0x2eec2e(0x6e6)](_0x348697['message2'],_0x2c2e2a,_0x348697);}else{if(_0x37f3f1[_0x2eec2e(0xac1)])this['displayItemMessage'](TextManager['useItem'],_0x2c2e2a,_0x348697);}},Window_BattleLog['prototype'][_0x588453(0x5c5)]=function(_0x31c4bb,_0xe4fd11,_0x5a99f7){const _0x5a122b=_0x588453,_0x4b0146=_0xe4fd11[_0x5a122b(0x343)]();this[_0x5a122b(0x87b)](_0x31c4bb,_0x4b0146),this[_0x5a122b(0x2b9)]('applyImmortal',_0x31c4bb,_0x5a99f7,!![]),this[_0x5a122b(0x2b9)](_0x5a122b(0x5ec),_0x31c4bb,_0xe4fd11),this[_0x5a122b(0x2b9)](_0x5a122b(0x3bb)),this['push'](_0x5a122b(0x4fd),_0x31c4bb,_0xe4fd11),this[_0x5a122b(0x2b9)](_0x5a122b(0x283));},Window_BattleLog[_0x588453(0x755)][_0x588453(0x941)]=function(_0x5e0c35,_0x338da6,_0x2a4688){const _0x4b05f4=_0x588453;if(this[_0x4b05f4(0x202)](_0x338da6))this[_0x4b05f4(0x463)](_0x5e0c35,_0x338da6,_0x2a4688);else{if(this[_0x4b05f4(0x431)](_0x338da6))this['autoMeleeMultiTargetActionSet'](_0x5e0c35,_0x338da6,_0x2a4688);else _0x338da6[_0x4b05f4(0x9e8)]()?this[_0x4b05f4(0x692)](_0x5e0c35,_0x338da6,_0x2a4688):this['wholeActionSet'](_0x5e0c35,_0x338da6,_0x2a4688);}},Window_BattleLog[_0x588453(0x755)][_0x588453(0x2f7)]=function(_0xb423a4,_0x3e0407,_0x491b6e,_0x38afc3){const _0x5e4d45=_0x588453;if(_0x3e0407){const _0x351e37=_0xb423a4['battler']();this['push'](_0x5e4d45(0x15f),[_0xb423a4],_0x491b6e,_0x38afc3),this[_0x5e4d45(0x2b9)](_0x5e4d45(0x4d4),_0xb423a4,_0x351e37[_0x5e4d45(0x482)],_0x351e37[_0x5e4d45(0x628)],_0x38afc3,![],_0x5e4d45(0x7f1)),this[_0x5e4d45(0x2b9)]('requestMotion',[_0xb423a4],_0x5e4d45(0x74c)),this[_0x5e4d45(0x2b9)](_0x5e4d45(0x3bb)),this['push'](_0x5e4d45(0x573),[_0xb423a4],_0x5e4d45(0x91c));}},Window_BattleLog[_0x588453(0x755)][_0x588453(0x202)]=function(_0x7bc1e7){const _0x17f6d2=_0x588453;if(!_0x7bc1e7[_0x17f6d2(0x7c2)]())return![];if(!_0x7bc1e7[_0x17f6d2(0x6bb)]())return![];if(!_0x7bc1e7['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x17f6d2(0x90d)]['ActionSequence']['AutoMeleeSolo'];},Window_BattleLog['prototype']['autoMeleeSingleTargetActionSet']=function(_0x260a20,_0x5e38aa,_0x5500b0){const _0x27805e=_0x588453,_0x36d4cc=_0x260a20[_0x27805e(0xaed)]()[_0x27805e(0xa5f)]<0x2,_0x263589=0x14,_0x3daa67=0x30;let _0x451660=!![];_0x5500b0[_0x27805e(0x6e3)]>0x0&&_0x260a20[_0x27805e(0xa52)]()===_0x5500b0[0x0][_0x27805e(0xa52)]()&&(_0x451660=![]);_0x36d4cc&&_0x451660&&(this[_0x27805e(0x2b9)](_0x27805e(0x15f),[_0x260a20],_0x3daa67,_0x263589),this[_0x27805e(0x2b9)](_0x27805e(0x117),_0x260a20,_0x5500b0,'front\x20base',_0x263589,!![],_0x27805e(0x7f1),!![]),this[_0x27805e(0x2b9)](_0x27805e(0x573),[_0x260a20],'walk'),this[_0x27805e(0x2b9)]('waitForMovement'));let _0x51c897=_0x5e38aa['isAttack']()?this['getDualWieldTimes'](_0x260a20):0x1;for(let _0x5c8847=0x0;_0x5c8847<_0x51c897;_0x5c8847++){_0x5e38aa[_0x27805e(0xa82)]()&&_0x260a20['isActor']()&&this['push'](_0x27805e(0x124),_0x260a20,_0x5c8847),_0x5e38aa['item']()[_0x27805e(0x700)]<0x0?this[_0x27805e(0x692)](_0x260a20,_0x5e38aa,_0x5500b0):this[_0x27805e(0x8df)](_0x260a20,_0x5e38aa,_0x5500b0);}_0x5e38aa['isAttack']()&&_0x260a20[_0x27805e(0xa52)]()&&this[_0x27805e(0x2b9)](_0x27805e(0x896),_0x260a20),this['push'](_0x27805e(0xe6),_0x260a20,_0x5500b0,![]),this[_0x27805e(0x2f7)](_0x260a20,_0x36d4cc,_0x3daa67,_0x263589);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x431)]=function(_0x46e355){const _0x45974c=_0x588453;if(!_0x46e355['isPhysical']())return![];if(!_0x46e355[_0x45974c(0xa76)]())return![];if(!_0x46e355[_0x45974c(0x92f)]())return![];return VisuMZ[_0x45974c(0x39a)][_0x45974c(0x90d)][_0x45974c(0x608)][_0x45974c(0x7d2)];},Window_BattleLog[_0x588453(0x755)][_0x588453(0x310)]=function(_0x580fb8,_0x19846f,_0x59e506){const _0x213079=_0x588453,_0x4b18a8=_0x580fb8[_0x213079(0xaed)]()[_0x213079(0xa5f)]<0x2,_0x315cf6=0x14,_0x21b376=0x30;if(_0x4b18a8){this['push']('performJump',[_0x580fb8],_0x21b376,_0x315cf6);const _0x53ed8e=_0x59e506[_0x213079(0x6e3)]>0x1?_0x213079(0x624):_0x213079(0x116);this[_0x213079(0x2b9)](_0x213079(0x117),_0x580fb8,_0x59e506,_0x53ed8e,_0x315cf6,!![],_0x213079(0x7f1),!![]),this[_0x213079(0x2b9)]('requestMotion',[_0x580fb8],_0x213079(0x91c)),this[_0x213079(0x2b9)](_0x213079(0x3bb));}let _0x154696=_0x19846f[_0x213079(0xa82)]()?this['getDualWieldTimes'](_0x580fb8):0x1;for(let _0x752f8=0x0;_0x752f8<_0x154696;_0x752f8++){_0x19846f[_0x213079(0xa82)]()&&_0x580fb8[_0x213079(0xa52)]()&&this[_0x213079(0x2b9)]('setActiveWeaponSet',_0x580fb8,_0x752f8),this[_0x213079(0x8df)](_0x580fb8,_0x19846f,_0x59e506);}_0x19846f[_0x213079(0xa82)]()&&_0x580fb8['isActor']()&&this[_0x213079(0x2b9)](_0x213079(0x896),_0x580fb8),this['push'](_0x213079(0xe6),_0x580fb8,_0x59e506,![]),this[_0x213079(0x2f7)](_0x580fb8,_0x4b18a8,_0x21b376,_0x315cf6);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x692)]=function(_0x1b55dd,_0x289051,_0x581149){const _0x209a9c=_0x588453,_0x5a1683=_0x289051[_0x209a9c(0x343)]();for(const _0x1812ed of _0x581149){if(!_0x1812ed)continue;this[_0x209a9c(0x2b9)](_0x209a9c(0xa33),_0x1b55dd,_0x289051),this[_0x209a9c(0x2b9)](_0x209a9c(0x661),Sprite_Battler[_0x209a9c(0xa72)]),this[_0x209a9c(0x2b9)](_0x209a9c(0x6c8),_0x1b55dd,[_0x1812ed],_0x5a1683[_0x209a9c(0x700)]),this[_0x209a9c(0x2b9)](_0x209a9c(0x661),0x18),this[_0x209a9c(0x2b9)](_0x209a9c(0xa45),_0x1b55dd,_0x1812ed);}},Window_BattleLog[_0x588453(0x755)]['wholeActionSet']=function(_0x1caae7,_0x21e878,_0x5ddfcc){const _0x3dabed=_0x588453,_0x540766=_0x21e878[_0x3dabed(0x343)]();let _0x29e653=_0x21e878[_0x3dabed(0xa82)]()?0x1+_0x1caae7[_0x3dabed(0x5a1)]():0x1;while(_0x29e653--){this['push'](_0x3dabed(0xa33),_0x1caae7,_0x21e878),this[_0x3dabed(0x2b9)](_0x3dabed(0x661),Sprite_Battler[_0x3dabed(0xa72)]),this[_0x3dabed(0x2b9)](_0x3dabed(0x6c8),_0x1caae7,_0x5ddfcc[_0x3dabed(0xa55)](),_0x540766[_0x3dabed(0x700)]),this[_0x3dabed(0x2b9)](_0x3dabed(0x283));}for(const _0x5c4cd4 of _0x5ddfcc){if(!_0x5c4cd4)continue;this[_0x3dabed(0x2b9)](_0x3dabed(0xa45),_0x1caae7,_0x5c4cd4);}},Window_BattleLog[_0x588453(0x755)][_0x588453(0x995)]=function(_0x5f3c13,_0x49d454,_0x180970){const _0x5ae9f5=_0x588453,_0x379714=_0x49d454['item']();this[_0x5ae9f5(0x2b9)](_0x5ae9f5(0xe6),_0x5f3c13,_0x180970,![]),this[_0x5ae9f5(0x2b9)](_0x5ae9f5(0x8e2)),this['push'](_0x5ae9f5(0x4cc)),this[_0x5ae9f5(0x2b9)](_0x5ae9f5(0x399)),this[_0x5ae9f5(0x2b9)](_0x5ae9f5(0x5c3),_0x5f3c13),this[_0x5ae9f5(0x2b9)]('waitForMovement');},Window_BattleLog[_0x588453(0x755)][_0x588453(0x54d)]=function(_0x264775){},VisuMZ[_0x588453(0x39a)][_0x588453(0x838)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x907)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x907)]=function(_0x5759f1){const _0x5293ea=_0x588453;if(!VisuMZ[_0x5293ea(0x39a)]['Settings'][_0x5293ea(0x6d3)][_0x5293ea(0x52c)])return;VisuMZ[_0x5293ea(0x39a)][_0x5293ea(0x838)][_0x5293ea(0x90a)](this,_0x5759f1);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x411)]=function(_0x3f447e){const _0x14b142=_0x588453;this['push'](_0x14b142(0x8b0),_0x3f447e);VisuMZ[_0x14b142(0x39a)][_0x14b142(0x90d)][_0x14b142(0x608)][_0x14b142(0x83e)]&&this[_0x14b142(0x2b9)]('showAnimation',_0x3f447e,[BattleManager[_0x14b142(0x5a9)]],-0x1);if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x14b142(0x712)])return;this['push'](_0x14b142(0x433),TextManager[_0x14b142(0x227)]['format'](_0x3f447e[_0x14b142(0x4cf)]()));},Window_BattleLog[_0x588453(0x755)][_0x588453(0x4f3)]=function(_0x1c6746){const _0xafeed=_0x588453;this['push']('performReflection',_0x1c6746);if(!VisuMZ['BattleCore'][_0xafeed(0x90d)][_0xafeed(0x6d3)][_0xafeed(0x23e)])return;this[_0xafeed(0x2b9)](_0xafeed(0x433),TextManager[_0xafeed(0x66b)][_0xafeed(0x4a9)](_0x1c6746[_0xafeed(0x4cf)]()));},Window_BattleLog[_0x588453(0x755)][_0x588453(0x3a0)]=function(_0x27ab47,_0x4172d2){const _0x3952fd=_0x588453;if(VisuMZ[_0x3952fd(0x39a)][_0x3952fd(0x90d)][_0x3952fd(0x608)][_0x3952fd(0x9ca)]){const _0x514c1a=_0x4172d2['item']();this[_0x3952fd(0x2b9)](_0x3952fd(0x6c8),_0x27ab47,[_0x27ab47],_0x514c1a[_0x3952fd(0x700)]);}},Window_BattleLog[_0x588453(0x755)][_0x588453(0x510)]=function(_0x4be8e2,_0x39f6f1){const _0x44de13=_0x588453;this['push'](_0x44de13(0x691),_0x4be8e2,_0x39f6f1);if(!VisuMZ[_0x44de13(0x39a)][_0x44de13(0x90d)][_0x44de13(0x6d3)]['ShowSubstitute'])return;const _0x14ca10=_0x4be8e2[_0x44de13(0x4cf)](),_0x71a1d=TextManager[_0x44de13(0x916)][_0x44de13(0x4a9)](_0x14ca10,_0x39f6f1[_0x44de13(0x4cf)]());this[_0x44de13(0x2b9)](_0x44de13(0x433),_0x71a1d);},VisuMZ['BattleCore']['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x588453(0x755)][_0x588453(0x16d)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x16d)]=function(_0x3c93d4,_0x2c9ab4){const _0x5426b1=_0x588453;VisuMZ[_0x5426b1(0x39a)][_0x5426b1(0x776)][_0x5426b1(0x90a)](this,_0x3c93d4,_0x2c9ab4);},VisuMZ[_0x588453(0x39a)][_0x588453(0x443)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x7c3)],Window_BattleLog['prototype']['displayFailure']=function(_0x2c59fa){const _0x398460=_0x588453;if(!VisuMZ[_0x398460(0x39a)][_0x398460(0x90d)][_0x398460(0x6d3)][_0x398460(0x1f0)])return;VisuMZ[_0x398460(0x39a)][_0x398460(0x443)][_0x398460(0x90a)](this,_0x2c59fa);},VisuMZ[_0x588453(0x39a)][_0x588453(0x832)]=Window_BattleLog['prototype']['displayCritical'],Window_BattleLog[_0x588453(0x755)]['displayCritical']=function(_0x472e49){const _0x127ea9=_0x588453;if(!VisuMZ['BattleCore'][_0x127ea9(0x90d)]['BattleLog']['ShowCritical'])return;VisuMZ[_0x127ea9(0x39a)]['Window_BattleLog_displayCritical'][_0x127ea9(0x90a)](this,_0x472e49);},VisuMZ['BattleCore'][_0x588453(0x7f4)]=Window_BattleLog[_0x588453(0x755)]['displayMiss'],Window_BattleLog[_0x588453(0x755)][_0x588453(0x76c)]=function(_0x46d7f6){const _0x25ed0f=_0x588453;!VisuMZ[_0x25ed0f(0x39a)][_0x25ed0f(0x90d)][_0x25ed0f(0x6d3)][_0x25ed0f(0x56e)]?this['push'](_0x25ed0f(0x6f4),_0x46d7f6):VisuMZ[_0x25ed0f(0x39a)][_0x25ed0f(0x7f4)]['call'](this,_0x46d7f6);},VisuMZ[_0x588453(0x39a)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x588453(0x755)]['displayEvasion'],Window_BattleLog['prototype'][_0x588453(0xa1d)]=function(_0x5882bd){const _0x80132f=_0x588453;!VisuMZ[_0x80132f(0x39a)][_0x80132f(0x90d)][_0x80132f(0x6d3)]['ShowMissEvasion']?_0x5882bd['result']()[_0x80132f(0x78c)]?this[_0x80132f(0x2b9)]('performEvasion',_0x5882bd):this['push'](_0x80132f(0x971),_0x5882bd):VisuMZ[_0x80132f(0x39a)][_0x80132f(0x4a5)][_0x80132f(0x90a)](this,_0x5882bd);},Window_BattleLog[_0x588453(0x755)][_0x588453(0x7d7)]=function(_0x41ffdc){const _0x38a331=_0x588453;_0x41ffdc[_0x38a331(0x56d)]()[_0x38a331(0x6b0)]&&(_0x41ffdc['_lastHpDamage']=0x0,_0x41ffdc[_0x38a331(0x56d)]()['hpDamage']>0x0&&!_0x41ffdc[_0x38a331(0x56d)]()['drain']&&(_0x41ffdc[_0x38a331(0x351)]=_0x41ffdc['result']()[_0x38a331(0x7de)],this[_0x38a331(0x2b9)](_0x38a331(0x496),_0x41ffdc)),_0x41ffdc[_0x38a331(0x56d)]()[_0x38a331(0x7de)]<0x0&&this[_0x38a331(0x2b9)]('performRecovery',_0x41ffdc),VisuMZ['BattleCore'][_0x38a331(0x90d)]['BattleLog']['ShowHpDmg']&&this['push'](_0x38a331(0x433),this['makeHpDamageText'](_0x41ffdc)));},VisuMZ[_0x588453(0x39a)][_0x588453(0x643)]=Window_BattleLog['prototype']['displayMpDamage'],Window_BattleLog[_0x588453(0x755)][_0x588453(0x41c)]=function(_0x55f128){const _0x1190a1=_0x588453;if(!VisuMZ[_0x1190a1(0x39a)][_0x1190a1(0x90d)][_0x1190a1(0x6d3)][_0x1190a1(0x580)])return;VisuMZ[_0x1190a1(0x39a)][_0x1190a1(0x643)][_0x1190a1(0x90a)](this,_0x55f128);},VisuMZ[_0x588453(0x39a)][_0x588453(0x6f0)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x4d6)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x4d6)]=function(_0x2d56ce){const _0x4ad9b6=_0x588453;if(!VisuMZ[_0x4ad9b6(0x39a)][_0x4ad9b6(0x90d)]['BattleLog'][_0x4ad9b6(0xabf)])return;VisuMZ[_0x4ad9b6(0x39a)][_0x4ad9b6(0x6f0)][_0x4ad9b6(0x90a)](this,_0x2d56ce);},Window_BattleLog[_0x588453(0x755)]['displayAffectedStatus']=function(_0x31c0c1){const _0x34070a=_0x588453;_0x31c0c1['result']()[_0x34070a(0x986)]()&&(this[_0x34070a(0x2b9)](_0x34070a(0x102)),this[_0x34070a(0x752)](_0x31c0c1),this[_0x34070a(0xa2f)](_0x31c0c1),this['push'](_0x34070a(0x8e2)));},Window_BattleLog['prototype'][_0x588453(0xab5)]=function(_0xff7343){const _0x47cfcd=_0x588453,_0x1ae29a=_0xff7343['result'](),_0x45fcb0=_0x1ae29a[_0x47cfcd(0x786)]();for(const _0x1d5db2 of _0x45fcb0){const _0x1aa07e=_0xff7343[_0x47cfcd(0xa52)]()?_0x1d5db2[_0x47cfcd(0x332)]:_0x1d5db2[_0x47cfcd(0x1a5)];_0x1aa07e&&VisuMZ[_0x47cfcd(0x39a)][_0x47cfcd(0x90d)][_0x47cfcd(0x6d3)][_0x47cfcd(0x38c)]&&(this[_0x47cfcd(0x2b9)](_0x47cfcd(0x9bb)),this[_0x47cfcd(0x2b9)]('popBaseLine'),this[_0x47cfcd(0x2b9)](_0x47cfcd(0x102)),this[_0x47cfcd(0x2b9)](_0x47cfcd(0x433),_0x1aa07e[_0x47cfcd(0x4a9)](_0xff7343[_0x47cfcd(0x4cf)]())),this['push'](_0x47cfcd(0x539))),_0x1d5db2['id']===_0xff7343['deathStateId']()&&this[_0x47cfcd(0x2b9)](_0x47cfcd(0x195),_0xff7343);}},Window_BattleLog[_0x588453(0x755)]['fnordAddedStates']=function(){},Window_BattleLog[_0x588453(0x755)][_0x588453(0xda)]=function(_0x55aa3b){const _0x15f352=_0x588453;if(!VisuMZ[_0x15f352(0x39a)][_0x15f352(0x90d)][_0x15f352(0x6d3)][_0x15f352(0x910)])return;const _0x4b2382=_0x55aa3b['result'](),_0x3ae37d=_0x4b2382[_0x15f352(0x3f5)]();for(const _0xf18f26 of _0x3ae37d){_0xf18f26[_0x15f352(0x8b1)]&&(this[_0x15f352(0x2b9)](_0x15f352(0x162)),this['push'](_0x15f352(0x70b)),this[_0x15f352(0x2b9)](_0x15f352(0x102)),this[_0x15f352(0x2b9)]('addText',_0xf18f26['message4']['format'](_0x55aa3b[_0x15f352(0x4cf)]())),this[_0x15f352(0x2b9)](_0x15f352(0x539)));}},Window_BattleLog[_0x588453(0x755)][_0x588453(0x162)]=function(){},Window_BattleLog[_0x588453(0x755)][_0x588453(0xa2f)]=function(_0x48d771){const _0x1b669f=_0x588453,_0x13e0ac=VisuMZ[_0x1b669f(0x39a)][_0x1b669f(0x90d)][_0x1b669f(0x6d3)],_0xdc8f24=_0x48d771[_0x1b669f(0x56d)]();if(_0x13e0ac[_0x1b669f(0x5df)])this['displayBuffs'](_0x48d771,_0xdc8f24['addedBuffs'],TextManager[_0x1b669f(0xa0d)]);if(_0x13e0ac['ShowAddedDebuff'])this['displayBuffs'](_0x48d771,_0xdc8f24[_0x1b669f(0x385)],TextManager[_0x1b669f(0x42f)]);if(_0x13e0ac[_0x1b669f(0xa38)])this[_0x1b669f(0x1bd)](_0x48d771,_0xdc8f24[_0x1b669f(0x334)],TextManager[_0x1b669f(0x107)]);},Window_BattleLog['prototype'][_0x588453(0x1bd)]=function(_0x29f2e2,_0x21f4e6,_0x54793c){const _0x1cff21=_0x588453;for(const _0x4fa73b of _0x21f4e6){const _0x38dbf4=_0x54793c[_0x1cff21(0x4a9)](_0x29f2e2[_0x1cff21(0x4cf)](),TextManager['param'](_0x4fa73b));this[_0x1cff21(0x2b9)](_0x1cff21(0x70b)),this[_0x1cff21(0x2b9)](_0x1cff21(0x102)),this[_0x1cff21(0x2b9)]('addText',_0x38dbf4),this[_0x1cff21(0x2b9)]('wait');}},VisuMZ['BattleCore'][_0x588453(0x861)]=Window_BattleLog['prototype']['clear'],Window_BattleLog[_0x588453(0x755)]['clear']=function(){const _0x336d22=_0x588453;VisuMZ['BattleCore'][_0x336d22(0x861)]['call'](this),this[_0x336d22(0x378)]();},VisuMZ['BattleCore'][_0x588453(0x804)]=Window_BattleLog['prototype'][_0x588453(0x102)],Window_BattleLog[_0x588453(0x755)]['pushBaseLine']=function(){const _0x83feb3=_0x588453;VisuMZ[_0x83feb3(0x39a)][_0x83feb3(0x804)][_0x83feb3(0x90a)](this),this[_0x83feb3(0x378)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x38f)]=Window_BattleLog[_0x588453(0x755)]['popBaseLine'],Window_BattleLog[_0x588453(0x755)][_0x588453(0x70b)]=function(){const _0x1a174a=_0x588453;VisuMZ[_0x1a174a(0x39a)][_0x1a174a(0x38f)][_0x1a174a(0x90a)](this),this[_0x1a174a(0x517)](),this[_0x1a174a(0x378)]();},VisuMZ['BattleCore']['Window_BattleLog_popupDamage']=Window_BattleLog[_0x588453(0x755)][_0x588453(0xa3b)],Window_BattleLog[_0x588453(0x755)][_0x588453(0xa3b)]=function(_0x482da8){const _0x306876=_0x588453;VisuMZ['BattleCore']['Window_BattleLog_popupDamage'][_0x306876(0x90a)](this,_0x482da8),this['callNextMethod']();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x8e2)]=function(){const _0x39b821=_0x588453;let _0x139bc8=0x0;this['_baseLineStack']['length']>0x0&&(_0x139bc8=this[_0x39b821(0x2f9)][this['_baseLineStack'][_0x39b821(0x6e3)]-0x1]),this[_0x39b821(0x66c)][_0x39b821(0x6e3)]>_0x139bc8?this[_0x39b821(0x539)]():this[_0x39b821(0x378)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x506)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x5ec)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x5ec)]=function(_0x4224cf,_0x462376){const _0x1feab1=_0x588453;VisuMZ['BattleCore']['Window_BattleLog_performActionStart'][_0x1feab1(0x90a)](this,_0x4224cf,_0x462376),this['callNextMethod']();},VisuMZ['BattleCore'][_0x588453(0x513)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0xa33)],Window_BattleLog[_0x588453(0x755)][_0x588453(0xa33)]=function(_0x24ecd5,_0x235ad9){const _0x3a029=_0x588453;VisuMZ[_0x3a029(0x39a)][_0x3a029(0x513)][_0x3a029(0x90a)](this,_0x24ecd5,_0x235ad9),this[_0x3a029(0x378)]();},VisuMZ[_0x588453(0x39a)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x588453(0x755)][_0x588453(0x5c3)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x5c3)]=function(_0x321b75){const _0x1b5687=_0x588453;VisuMZ[_0x1b5687(0x39a)][_0x1b5687(0x34d)][_0x1b5687(0x90a)](this,_0x321b75);for(const _0x3b36f8 of BattleManager[_0x1b5687(0x872)]()){if(!_0x3b36f8)continue;if(_0x3b36f8[_0x1b5687(0x8c6)]())continue;_0x3b36f8[_0x1b5687(0x8b3)]();}this[_0x1b5687(0x378)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x6e9)]=Window_BattleLog['prototype']['performDamage'],Window_BattleLog[_0x588453(0x755)][_0x588453(0x496)]=function(_0x1dfffa){const _0x4baeb7=_0x588453;VisuMZ[_0x4baeb7(0x39a)][_0x4baeb7(0x6e9)][_0x4baeb7(0x90a)](this,_0x1dfffa),this[_0x4baeb7(0x378)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x9f0)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x6f4)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x6f4)]=function(_0x4483d9){const _0x1cbf4a=_0x588453;VisuMZ[_0x1cbf4a(0x39a)][_0x1cbf4a(0x9f0)]['call'](this,_0x4483d9),this['callNextMethod']();},VisuMZ[_0x588453(0x39a)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x588453(0x755)][_0x588453(0x261)],Window_BattleLog[_0x588453(0x755)]['performRecovery']=function(_0x4a271f){const _0x564a0a=_0x588453;VisuMZ[_0x564a0a(0x39a)][_0x564a0a(0x8c1)][_0x564a0a(0x90a)](this,_0x4a271f),this['callNextMethod']();},VisuMZ[_0x588453(0x39a)]['Window_BattleLog_performEvasion']=Window_BattleLog['prototype']['performEvasion'],Window_BattleLog[_0x588453(0x755)]['performEvasion']=function(_0x419910){const _0x23949a=_0x588453;VisuMZ[_0x23949a(0x39a)][_0x23949a(0x6dc)][_0x23949a(0x90a)](this,_0x419910),this[_0x23949a(0x378)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x448)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x971)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x971)]=function(_0x1ceedb){const _0x5ab6ec=_0x588453;VisuMZ[_0x5ab6ec(0x39a)][_0x5ab6ec(0x448)][_0x5ab6ec(0x90a)](this,_0x1ceedb),this[_0x5ab6ec(0x378)]();},VisuMZ['BattleCore'][_0x588453(0x7b0)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x8b0)],Window_BattleLog[_0x588453(0x755)]['performCounter']=function(_0x4a7a74){const _0x293af0=_0x588453;VisuMZ[_0x293af0(0x39a)][_0x293af0(0x7b0)][_0x293af0(0x90a)](this,_0x4a7a74),this[_0x293af0(0x378)]();},VisuMZ[_0x588453(0x39a)][_0x588453(0x7b1)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0xa7e)],Window_BattleLog[_0x588453(0x755)][_0x588453(0xa7e)]=function(_0x568473){const _0x19eafa=_0x588453;VisuMZ[_0x19eafa(0x39a)][_0x19eafa(0x7b1)][_0x19eafa(0x90a)](this,_0x568473),this[_0x19eafa(0x378)]();},VisuMZ[_0x588453(0x39a)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x588453(0x755)][_0x588453(0x691)],Window_BattleLog[_0x588453(0x755)][_0x588453(0x691)]=function(_0x1ebd28,_0x55d165){const _0x301b5b=_0x588453;VisuMZ['BattleCore']['Window_BattleLog_performSubstitute'][_0x301b5b(0x90a)](this,_0x1ebd28,_0x55d165),this['callNextMethod']();},VisuMZ['BattleCore'][_0x588453(0x7f0)]=Window_BattleLog[_0x588453(0x755)][_0x588453(0x195)],Window_BattleLog['prototype']['performCollapse']=function(_0x2f6c9e){const _0x28f40b=_0x588453;VisuMZ[_0x28f40b(0x39a)][_0x28f40b(0x7f0)][_0x28f40b(0x90a)](this,_0x2f6c9e),this['callNextMethod']();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x4fd)]=function(_0x4e8e9a,_0x5a89f2){const _0x443269=_0x588453;_0x4e8e9a[_0x443269(0x4fd)](_0x5a89f2),this[_0x443269(0x378)]();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x70d)]=function(_0x4ee31,_0x1c829d){const _0x20757d=_0x588453,_0x532542=_0x4ee31['attackAnimationId1']();_0x532542<=0x0?SoundManager[_0x20757d(0xac5)]():this[_0x20757d(0x4f6)](_0x1c829d,_0x532542);},Window_BattleLog[_0x588453(0x755)]['applyImmortal']=function(_0x231f6b,_0x4ee921,_0x409f03){const _0x14ac34=_0x588453,_0x245420=[_0x231f6b][_0x14ac34(0x6e2)](_0x4ee921);for(const _0x2630ad of _0x245420){if(!_0x2630ad)continue;_0x2630ad['setImmortal'](_0x409f03);}this[_0x14ac34(0x378)]();},Window_BattleLog['prototype']['waitCount']=function(_0x442d9a){this['_waitCount']=_0x442d9a;},Window_BattleLog[_0x588453(0x755)][_0x588453(0x573)]=function(_0x2e594a,_0x1d47b2){const _0x37314b=_0x588453;for(const _0x35a4f4 of _0x2e594a){if(!_0x35a4f4)continue;_0x35a4f4[_0x37314b(0x573)](_0x1d47b2);}this[_0x37314b(0x378)]();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x4d4)]=function(_0x4b1dc6,_0x9b3c48,_0x295389,_0x235ba8,_0x48c9c1,_0x16dea0){const _0x5b2870=_0x588453;_0x4b1dc6['moveBattlerToPoint'](_0x9b3c48,_0x295389,_0x235ba8,_0x48c9c1,_0x16dea0,-0x1),this[_0x5b2870(0x378)]();},Window_BattleLog[_0x588453(0x755)][_0x588453(0x117)]=function(_0xd94de2,_0x32a066,_0x40f951,_0x4592bf,_0x5ccbfa,_0x45c6ef,_0x4f5356){const _0x420126=_0x588453,_0x315fda=Math[_0x420126(0x31b)](..._0x32a066[_0x420126(0x89e)](_0x46cedd=>_0x46cedd[_0x420126(0xabe)]()[_0x420126(0x494)]-_0x46cedd[_0x420126(0xabe)]()['mainSpriteWidth']()/0x2)),_0xf53c91=Math[_0x420126(0x85e)](..._0x32a066['map'](_0x43ee73=>_0x43ee73[_0x420126(0xabe)]()[_0x420126(0x494)]+_0x43ee73[_0x420126(0xabe)]()['mainSpriteWidth']()/0x2)),_0x27982b=Math[_0x420126(0x31b)](..._0x32a066[_0x420126(0x89e)](_0x38adae=>_0x38adae[_0x420126(0xabe)]()['_baseY']-_0x38adae[_0x420126(0xabe)]()['mainSpriteHeight']())),_0x2c9a87=Math[_0x420126(0x85e)](..._0x32a066[_0x420126(0x89e)](_0xf2e798=>_0xf2e798[_0x420126(0xabe)]()[_0x420126(0xaba)])),_0x46cc7e=_0x32a066[_0x420126(0x38d)](_0xd2ccc9=>_0xd2ccc9[_0x420126(0xa52)]())[_0x420126(0x6e3)],_0x3af972=_0x32a066[_0x420126(0x38d)](_0x43c5d5=>_0x43c5d5[_0x420126(0x4ad)]())[_0x420126(0x6e3)];let _0x437e78=0x0,_0x8ed529=0x0;if(_0x40f951['match'](/front/i))_0x437e78=_0x46cc7e>=_0x3af972?_0x315fda:_0xf53c91;else{if(_0x40f951[_0x420126(0x809)](/middle/i))_0x437e78=(_0x315fda+_0xf53c91)/0x2,_0x4f5356=-0x1;else _0x40f951[_0x420126(0x809)](/back/i)&&(_0x437e78=_0x46cc7e>=_0x3af972?_0xf53c91:_0x315fda);}if(_0x40f951['match'](/head/i))_0x8ed529=_0x27982b;else{if(_0x40f951['match'](/center/i)){_0x8ed529=(_0x27982b+_0x2c9a87)/0x2;if(_0xd94de2[_0x420126(0xabe)]())_0x8ed529+=_0xd94de2[_0x420126(0xabe)]()[_0x420126(0x4ba)]/0x2;}else _0x40f951[_0x420126(0x809)](/base/i)&&(_0x8ed529=_0x2c9a87);}_0xd94de2[_0x420126(0x2dc)](_0x437e78,_0x8ed529,_0x4592bf,_0x5ccbfa,_0x45c6ef,_0x4f5356),this[_0x420126(0x378)]();},Window_BattleLog['prototype'][_0x588453(0x15f)]=function(_0x19d949,_0x21bfe6,_0x27d579){const _0x3f02e6=_0x588453;for(const _0x4b711c of _0x19d949){if(!_0x4b711c)continue;_0x4b711c[_0x3f02e6(0x6e8)](_0x21bfe6,_0x27d579);}this[_0x3f02e6(0x378)]();};function Window_BattleMultiTarget(){const _0x5e78ef=_0x588453;this[_0x5e78ef(0x155)](...arguments);}Window_BattleMultiTarget[_0x588453(0x755)]=Object[_0x588453(0xa42)](Window_Command[_0x588453(0x755)]),Window_BattleMultiTarget[_0x588453(0x755)][_0x588453(0x671)]=Window_BattleMultiTarget,VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x4d8)]=VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x4d8)]||{},Window_BattleMultiTarget[_0x588453(0x281)]=VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x4d8)][_0x588453(0x531)]??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x4d8)][_0x588453(0x15c)]??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ['BattleCore'][_0x588453(0x90d)]['MultiTarget'][_0x588453(0x656)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x588453(0x39a)]['Settings'][_0x588453(0x4d8)][_0x588453(0x376)]??_0x588453(0x6ab),Window_BattleMultiTarget[_0x588453(0x570)]=VisuMZ[_0x588453(0x39a)]['Settings'][_0x588453(0x4d8)]['AllEnemiesText']??_0x588453(0x3e8),Window_BattleMultiTarget[_0x588453(0x8dd)]=VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x4d8)][_0x588453(0x17b)]??0x0,Window_BattleMultiTarget[_0x588453(0x68c)]=VisuMZ[_0x588453(0x39a)]['Settings'][_0x588453(0x4d8)][_0x588453(0x49d)]??0x0,Window_BattleMultiTarget[_0x588453(0xa56)]=VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x4d8)][_0x588453(0x80a)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_Y']=VisuMZ[_0x588453(0x39a)]['Settings']['MultiTarget'][_0x588453(0x65a)]??0x0,Window_BattleMultiTarget[_0x588453(0x755)][_0x588453(0x155)]=function(_0x242f4c,_0xd92f4e){const _0x295f3e=_0x588453;this[_0x295f3e(0x50f)]=_0xd92f4e,Window_Command[_0x295f3e(0x755)][_0x295f3e(0x155)][_0x295f3e(0x90a)](this,_0x242f4c),this[_0x295f3e(0x79e)](Window_BattleMultiTarget[_0x295f3e(0x689)]),this[_0x295f3e(0x65f)](),this[_0x295f3e(0x8e9)](),this[_0x295f3e(0x40b)]();},Window_BattleMultiTarget['prototype'][_0x588453(0x27d)]=function(){const _0x35c6ef=_0x588453;return this[_0x35c6ef(0x50f)];},Window_BattleMultiTarget['prototype'][_0x588453(0x95f)]=function(){const _0x4ae9f1=_0x588453;let _0x43cd02=this[_0x4ae9f1(0x27d)]()?Window_BattleMultiTarget[_0x4ae9f1(0x5eb)]:Window_BattleMultiTarget[_0x4ae9f1(0x570)];if(Imported[_0x4ae9f1(0xe0)]&&Window_BattleMultiTarget[_0x4ae9f1(0x8fd)]){this[_0x4ae9f1(0x1ac)]=this[_0x4ae9f1(0x27d)]()?_0x4ae9f1(0x66d):_0x4ae9f1(0x719),this[_0x4ae9f1(0xf9)]=TextManager[_0x4ae9f1(0x645)](this[_0x4ae9f1(0x1ac)]);const _0x4ce926=VisuMZ['CoreEngine'][_0x4ae9f1(0x90d)]['ButtonAssist']['TextFmt'];_0x43cd02=_0x4ce926[_0x4ae9f1(0x4a9)](this[_0x4ae9f1(0xf9)],_0x43cd02);}this['addCommand'](_0x43cd02,_0x4ae9f1(0x9ee));},Window_BattleMultiTarget['prototype'][_0x588453(0x64f)]=function(_0x134708){const _0x368f03=_0x588453,_0x3f0bfc=this[_0x368f03(0x228)](_0x134708);this[_0x368f03(0x928)](),this['changePaintOpacity'](this[_0x368f03(0x1f1)](_0x134708));const _0x117894=this[_0x368f03(0x820)](_0x134708),_0xc1a738=this['textSizeEx'](_0x117894)[_0x368f03(0x3ad)],_0x36449d=_0x3f0bfc['x']+Math['floor']((_0x3f0bfc[_0x368f03(0x3ad)]-_0xc1a738)/0x2);this[_0x368f03(0x521)](_0x117894,_0x36449d,_0x3f0bfc['y'],_0x3f0bfc[_0x368f03(0x3ad)]);},Window_BattleMultiTarget[_0x588453(0x755)][_0x588453(0x665)]=function(){const _0x48a62c=_0x588453;Window_Command[_0x48a62c(0x755)][_0x48a62c(0x665)][_0x48a62c(0x90a)](this),this[_0x48a62c(0x917)](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x588453(0x755)][_0x588453(0x917)]=function(){const _0x5710cb=_0x588453;this[_0x5710cb(0x536)]=this[_0x5710cb(0xa40)]();},Window_BattleMultiTarget[_0x588453(0x755)][_0x588453(0xa40)]=function(){const _0x317ed2=_0x588453,_0x497c85=BattleManager[_0x317ed2(0x5c7)](),_0x406e62=_0x497c85&&_0x497c85[_0x317ed2(0x784)]();if(!_0x406e62)return![];const _0x201431=SceneManager[_0x317ed2(0x39b)];if(this[_0x317ed2(0x27d)]()){if(_0x201431[_0x317ed2(0xa99)][_0x317ed2(0x3ef)]&&_0x201431[_0x317ed2(0xa99)][_0x317ed2(0x983)]['pagedown'])return!![];if(_0x201431[_0x317ed2(0x62e)][_0x317ed2(0x3ef)]&&_0x201431['_enemyWindow']['_handlers'][_0x317ed2(0x66d)])return!![];}else{if(_0x201431[_0x317ed2(0x62e)][_0x317ed2(0x3ef)]&&_0x201431['_enemyWindow'][_0x317ed2(0x983)][_0x317ed2(0x719)])return!![];}return![];},Window_BattleMultiTarget['prototype'][_0x588453(0x1f3)]=function(){const _0x2932e2=_0x588453;if(!Imported['VisuMZ_0_CoreEngine'])return;this['_buttonText']!==TextManager[_0x2932e2(0x645)](this[_0x2932e2(0x1ac)])&&this['refresh']();},Window_BattleMultiTarget[_0x588453(0x755)][_0x588453(0x37b)]=function(){const _0x5d8a61=_0x588453;if(this[_0x5d8a61(0x536)]&&TouchInput[_0x5d8a61(0x64c)]()){const _0x163d05=this['hitIndex']();if(_0x163d05>=0x0){const _0x22526b=this[_0x5d8a61(0x27d)]()?_0x5d8a61(0x66d):_0x5d8a61(0x719);Input[_0x5d8a61(0x394)](_0x22526b);}}};function Window_DamageCounter(){const _0x4e7322=_0x588453;this[_0x4e7322(0x155)](...arguments);}Window_DamageCounter[_0x588453(0x755)]=Object[_0x588453(0xa42)](Window_Base['prototype']),Window_DamageCounter[_0x588453(0x755)][_0x588453(0x671)]=Window_DamageCounter,Window_DamageCounter[_0x588453(0x441)]={'enabled':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0x1cb)]??!![],'customFontFace':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0xa2d)]??'','textAlign':VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x563)]['TextAlign']??_0x588453(0x175),'hitsDmgFmt':VisuMZ[_0x588453(0x39a)]['Settings'][_0x588453(0x563)][_0x588453(0x748)]??'\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','hitsHealFmt':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0x735)]??_0x588453(0x91a),'totalDmgFmt':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)]['ComboWindow'][_0x588453(0x1b2)]??_0x588453(0x3ae),'totalHealFmt':VisuMZ[_0x588453(0x39a)]['Settings'][_0x588453(0x563)]['totalHealFmt']??_0x588453(0x94d),'fadeShiftX':VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0xa49)]??-0x2,'fadeShiftY':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0x707)]??0x0,'positionOffsetX':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0x115)]??0x0,'positionOffsetY':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)]['ComboWindow'][_0x588453(0xa9e)]??0x0,'updateDuration':VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0x2e2)]??0x14,'minimumStayDuration':VisuMZ[_0x588453(0x39a)]['Settings'][_0x588453(0x563)][_0x588453(0x7b7)]??0x28,'minimumHits':VisuMZ['BattleCore'][_0x588453(0x90d)][_0x588453(0x563)]['minimumHits']??0x1,'opacitySpeed':VisuMZ[_0x588453(0x39a)][_0x588453(0x90d)][_0x588453(0x563)][_0x588453(0x688)]??0x10},Window_DamageCounter[_0x588453(0x755)]['initialize']=function(_0x2a8ebf){const _0x3bcac8=_0x588453;this[_0x3bcac8(0x52f)]=0x0,Window_Base[_0x3bcac8(0x755)][_0x3bcac8(0x155)][_0x3bcac8(0x90a)](this,_0x2a8ebf),this['_targetX']=_0x2a8ebf['x'],this[_0x3bcac8(0xaf5)]=_0x2a8ebf['y'],this['resetCounter'](),this[_0x3bcac8(0x79e)](0x2);},Window_DamageCounter[_0x588453(0x755)]['resetCounter']=function(){const _0x3f9b78=_0x588453;this[_0x3f9b78(0x58d)]=0x0,this[_0x3f9b78(0xaae)]=0x0,this['_totalDamage']=0x0,this[_0x3f9b78(0x69d)]=0x0,this['_targetDamage']=0x0;},Window_DamageCounter['prototype'][_0x588453(0x225)]=function(){const _0x101efa=_0x588453;Window_Base[_0x101efa(0x755)]['resetFontSettings'][_0x101efa(0x90a)](this);const _0x5b9dc4=Window_DamageCounter[_0x101efa(0x441)];_0x5b9dc4[_0x101efa(0x568)]?this[_0x101efa(0xaf2)][_0x101efa(0x471)]=_0x5b9dc4[_0x101efa(0x568)]:this[_0x101efa(0xaf2)]['fontFace']=$gameSystem[_0x101efa(0x37e)]();};var $comboWindowReset=function(){const _0x3cbe6a=_0x588453;if(!SceneManager['isSceneBattle']())return;const _0x278308=SceneManager[_0x3cbe6a(0x39b)]['_damageCounterWindow'];if(_0x278308)_0x278308[_0x3cbe6a(0x62b)]();};Window_DamageCounter[_0x588453(0x755)][_0x588453(0x2de)]=function(_0x5cc5d0){const _0x56fc0e=_0x588453;this['_targetHits']+=Math[_0x56fc0e(0x422)](_0x5cc5d0);const _0x471d54=Window_DamageCounter[_0x56fc0e(0x441)];this[_0x56fc0e(0x58d)]=_0x471d54[_0x56fc0e(0x2e2)],this[_0x56fc0e(0x69d)]>=_0x471d54[_0x56fc0e(0x7a1)]&&(this[_0x56fc0e(0x52f)]=_0x471d54[_0x56fc0e(0x7b7)]);};var $comboWindowIncreaseHits=function(_0x5cea5a){const _0x13edf8=_0x588453;if(!SceneManager[_0x13edf8(0x8b8)]())return;const _0xbd989a=SceneManager[_0x13edf8(0x39b)][_0x13edf8(0x2d5)];if(_0xbd989a)_0xbd989a[_0x13edf8(0x2de)](_0x5cea5a);};Window_DamageCounter[_0x588453(0x755)][_0x588453(0x68e)]=function(_0x3d3442){const _0x29de61=_0x588453;this['_targetDamage']+=Math[_0x29de61(0x422)](_0x3d3442);const _0x6948a3=Window_DamageCounter[_0x29de61(0x441)];this[_0x29de61(0x58d)]=_0x6948a3[_0x29de61(0x2e2)],this['_targetHits']>=_0x6948a3[_0x29de61(0x7a1)]&&(this[_0x29de61(0x52f)]=_0x6948a3[_0x29de61(0x7b7)]);};var $comboWindowIncreaseDamage=function(_0x4f12e6){const _0x48dcd7=_0x588453;if(!SceneManager[_0x48dcd7(0x8b8)]())return;const _0x1d97fc=SceneManager[_0x48dcd7(0x39b)][_0x48dcd7(0x2d5)];if(_0x1d97fc)_0x1d97fc[_0x48dcd7(0x68e)](_0x4f12e6);},$comboWindowIncreaseHealing=function(_0x18cd8d){const _0x1c2220=_0x588453;if(!SceneManager['isSceneBattle']())return;const _0x5a1085=SceneManager['_scene']['_damageCounterWindow'];if(_0x5a1085)_0x5a1085[_0x1c2220(0x68e)](-_0x18cd8d);};function _0x4cda(){const _0x3d5c6d=['svAnchorY','ActSeq_Movement_HomeMoveToPoint','ParseEnemyNotetags','setupIconTextPopup','Game_Action_executeHpDamage','isActing','Game_Interpreter_command283','needsSelectionBattleCore','transform','skew','setStateTurns','performMagicEvasion','isPlaytest','isAnimationPlaying','refreshMotion','battleInjectAni','BattleManager_checkBattleEnd','%1StartActionJS','_updateClientArea','GuardFormulaJS','_skewY','loadEnemy','dead\x20actors','note','Game_Action_updateLastTarget','ActSeq_Target_CurrentIndex','battleSkew','USER-DEFINED\x205','updateWeather','_handlers','timeScale','ActSeq_Grid_AnimationTypeAtNode','isStatusAffected','Window_BattleLog_update','battleMembers','Game_Battler_performActionStart','DamageFlat','removeAnimationFromContainer','isBusy','DefaultSoftCap','_index','Scene_Map_initialize','icon','FRUSTRATION','LUK','Debuffs','prepareCustomActionSequence','finishActionSet','AutoBattleOK','AutoNotetag','State-%1-%2','sortDamageSprites','_allTargets','Game_Action_setSubject','ActSeq_Impact_TimeScale','battleStatusSprite','ActSeq_Mechanics_FtbAction','addDebuff','isBreakStunned','VisuMZ_4_IconBalloons','drawItemImageListStyle','dead\x20friends','BindCommonEventKeysForObj','applyGlobalCommonEventNotetags','_createColorFilter','guardSkillId','extraPositionY','Scene_Battle_startEnemySelection','BattleGridSystem','GetActionSequenceSpecialTarget','symbol','battleOpacity','isOptionsCommandAdded','VisuMZ_2_HorrorEffects','PrioritySortActors','ActSeq_Animation_ShowAnimation','Game_Action_isForOpponent','endVisualCutin','addCommand','ComboWindow_RectJS','isBattleFlipped','ActSeq_Target_NextTarget','measureTextWidth','destroy','AsUser','fnordAddedStates','Sprite_Damage_createChildSprite','Game_Action_executeHpDamage_ComboWindow','maxItems','isFrameVisible','parseLocalizedText','findSymbolExt','repeatTargets','StateID','clearTargetBattlerKey','placeStateIcon','getHalfActionsPTB','RegExp','damageContainer','addExtendedTroopMembers','ReflectPlayback','gainHp','isBattleTest','VisuMZ_2_BattleSystemFTB','MANUAL','_spriteset','selectAllEnemies','helpAreaBottom','ActSeq_Camera_WaitForCamera','updateEventMain','JumpToLabel','Shadow','isActiveTpbReady','ActSeq_BattleVoice_PlaySpecialLine','Scene_Options_maxCommands','randomTargets','ActSeq_Horror_NoiseCreate','changeTurnOrderByCTB','processActorCommandCancelTPB','_uiContainer','SvBattlerMass-%1-%2','_forcedHomeX','Scene_Battle_itemWindowRect','StatusWindowSkinHide','pop','SILENCE','ShakeFlinch','pointX','Scene_Battle_initialize','clearHorrorEffects','isForRandom','drawActorFace','isImmortal','ActSeq_Projectile_Animation','Targets2','%1RegenerateJS','selectAll','ActSeq_Movement_MoveToPoint','Window_BattleLog_performMiss','addChildToUiContainer','_skewDuration','isFlipped','createRateJS','Game_Battler_clearDamagePopup','frameDelay','MeleeDistance','clearResult','_skewEasing','visualCutinPortraitHue','CriticalDmgRate','processBattleBalloonRequests','CastCertain','STB','Game_Action_executeMpDamage','BattleSystemCTB','ActSeq_Impact_ShockwavePoint','isTpb','_floatHeight','Window_PartyCommand_initialize','terminate','SkewX','glitch','createEnemyNameContainer','createActorCommandWindow','ActSeq_Mechanics_EmulateSkillCost','Balloon','updateRefresh','buffAdd','playOnceParallelInterpreter','_wtypeIDs','canAttackBattleCore','CreateActionSequenceTargets','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','setSTBExploited','isSpriteVisible','_cancelButton','setCursorRect','jsAccuracyAsTarget','targetObject','command301','EscapeFail','isNextSceneBattleTransitionable','checkCacheKey','displayEvasion','_actorCommandWindow','Interrupt','VisuMZ_2_BattleSystemATB','startOpacity','removeBuff','targetBattlerContainerOpacity','itemHeight','spinBattler','_floatEasing','PopupShiftX','alive\x20battlers','_tempEquipCheck','balloonId','applyBattleCoreCriticalHitRateJS','regenerateAll','CustomFontFace','changeInputWindow','displayChangedBuffs','ActSeq_Movement_BattleStep','autoBattleStyle','Sprite_Battler_setHome','performAction','isDying','startShakeFlinch','createBattleUIOffsetX','ChantStyle','ShowRemovedBuff','EnableSoftCap','_tempActor','popupDamage','Game_BattlerBase_canAttack','_back1Sprite','isPTB','cutinExit','visibilityState','battleProjectiles','create','skillTypes','forceMotion','actionEffect','updateCustomActionSequence','checkTpbInputClose','user','fadeShiftX','isBorderPortraitSpriteVisible','toString','applyHardDamageCap','_effectType','iterateBattler','forceWeaponAnimation','UNTITLED','actorCommandCancelTPB','isActor','rowSpacing','cutinEnter','clone','ENEMY_OFFSET_X','clearRect','disperseDamage','onActorCancel','_character','process_VisuMZ_BattleCore_PreBattleCommonEvent','BindCommonEventKeysForGroup','isBattleSys','Angle','type','gradientFillRect','EVAL','setupTextPopup','FlinchDistanceX','battleCommands','updateLink','_skillWindow','Game_Battler_makeSpeed','setWaitMode','_growY','emulateAction','performEvasion','ActSeq_Set_TargetActionSet','isArray','ActSeq_Animation_BalloonIcon','svShadow','isOpen','splice','_motionSpeed','skewDuration','svBattlerAnchorY','setActorHome','isForAll','isBattlerGrounded','command357','NameOffsetY','clearActiveWeaponSlot','MotionType','ESCAPE','onRegeneratePlayStateAnimation','performReflection','hitText','TP_Flat','updatePosition','isAttack','pha','pauseInjectAnimation','ActSeq_Camera_Reset','ARRAYSTR','STYPES','isSkipPartyCommandWindow','ActSeq_Mechanics_BreakShieldReset','chant','SkillItemStandardCols','arPenFlat','Sprite_Enemy_updateCollapse','gaugeLineHeight','HP_Flat','hardDamageCap','portraitIndex','WaitCount','Elements','adjustPosition','JS\x20BATTLE\x20DEFEAT','COMBAT\x20LOG','ActorCmd','onTurnEnd','_actorWindow','casting','ActSeq_Movement_WaitForSpin','Override','BattleManager_onEncounter','PosOffsetY','forceAction','swing','updateShadowPosition','randomInt','WaitForProjectile','thrust','DefaultDamageStyle','_selectionEffectCount','lifeStealRate','apply','lineHeight','startTurn','_enemies','enemyNames','ShowCosts','_totalHits','_damages','retreat','fittingHeight','_battler','Game_Temp_requestAnimation','autoBattleAtStart','displayAddedStates','_regionBattleback2','font','autoBattle','value','_baseY','Game_Action_itemEffectAddAttackState','setImmortal','ActSeq_Animation_ItemAnimation','battler','ShowTpDmg','makeTargetsBattleCoreJS','ActionItemMsg','_performDamageMotion','partyCommandWindowRectXPStyle','CheckVisibleSkillNotetags','playEnemyAttack','BattleLayout','currentSymbol','MAT','setHandler','restore','BaseTroopIDs','contentsOpacity','setSkill','addCustomCommands','motionSpeed','PopupShiftY','Scene_Battle_update','battlerShadowScaleX','displayStartMessages','Game_Party_removeActor','moveBattlerHomeDistance','ActSeq_Grid_ClearPassiveStatesFromNode','changeAtbCastTime','clearBattleBalloons','Scene_Battle_onActorOk','MAXMP','Radius','setEventCallback','okButtonText','AutoBattleBgType','makeSuccess','animationNextDelay','mainSpriteWidth','isForOpponentBattleCore','scope','isAutoBattle','PopupOffsetY','comboWindowOffsetY','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','endIcon','ActSeq_Horror_Clear','enabled','refreshCursor','ActSeq_Movement_Float','getAttackMotion','remove','7jadwZv','STR','startGrow','contents','trueRandomTarget','doesPageHaveOnceParallelStart','_targetY','Scene_Battle_commandFight','textBaseline','_battleCoreAddedElements','iconIndex','Slot','NameDamageVisibility','Sprite_Actor_setActorHome','commandStyleCheck','VisuMZ_2_BattleSystemOTB','ActSeq_Grid_ActionAnimationAtNode','negativeMpLifeSteal','_stateSprite','OffsetY','itemCri','ActSeq_Impact_Negative','updateBattleProcess','SkewY','FUNC','_enemy','startInjectAnimation','_autoBattle','Sprite_Actor_updateFrame','WaitForOpacity','_battlerHue','canBattlerMove','top','gainMp','displayRemovedStates','pages','deathStateId','selectSymbol','_targetX','redraw','VisuMZ_0_CoreEngine','getBattlePortrait','TpbActiveChangeEnabled','ScaleY','isAnyoneGrowing','_methods','applyImmortal','StartName','isAlwaysHidden','PreDamageJS','isQueueOptionsMenu','uiMenuStyle','_tpbState','select','initMembersBattleCore','LIGHT\x20BULB','removeState','enemy','weaponTypes','_callSceneOptions','_totalDamage','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','occasion','addWindow','getDamageStyle','_buttonText','reverse','applyEasing','adjustWeaponSpriteOffset','_dragonbonesSpriteContainer','numTargets','command301_PreBattleEvent','_skewX','addEscapeCommand','pushBaseLine','StepDuration','isStateAffected','BattleStartEvent','setTargetBattlerKey','buffRemove','lastBattleSkill','_dimmerSprite','floor','ArPenFlat','Game_Interpreter_command301','setBattlePortrait','noise','isDisarmLifeSteal','jsScaleDown','isForAnyone','actor','clearGlobalVariables','clearAllVisualCutins','PosOffsetX','front\x20base','performMoveToTargets','mainSpriteScaleX','bottom','dying','Game_Map_encounterList','action','isAtbChargingState','drawItemStyleIconText','Text','HITTYPE_CERTAIN','Height','_linkedSprite','_back2Sprite','setActiveWeaponSet','dragonbonesData','_angleDuration','shouldPopupDamage','getMenuImage','damageOffsetY','getAttackWeaponAnimationId','endBattle','commandFight','ParseActorNotetags','startMove','applyItem','CalcEscapeRaiseJS','getBattlePortraitFilename','growBattler','%1Event','isOpponent','isTurnBased','_padding','DamageType%1','dead\x20battlers','partyCommandWindowRect','ActSeq_Mechanics_CtbOrder','testApply','AdjustRect','command283','isAnyoneJumping','_attackAnimationId','AllowCollapse','CreateCommonEventKeys','windowPadding','changeBattlebacks','onAngleEnd','_updateCursorArea','magicSkills','PreEndTurnJS','actorCommandEscape','ActSeq_Grid_PushFromTargetNode','Mirror','slices','ActSeq_Cutin_EndVisualCutinEffectAll','resizeWindowXPStyle','_animationSprites','deadMembers','_actionBattlers','Sprite_Actor_createStateSprite','_onceParallelInterpreters','_targetOffsetX','_activeWeaponSlot','initialize','Game_Action_itemTargetCandidates','aliveMembers','_autoBattleWindow','reduce','setBattleZoom','Scene_Battle_updateStatusWindowPosition','BgType','FaceAway','ActSeq_Mechanics_AddState','performJump','critical','textAlign','fnordRemovedStates','exit','WaitForAngle','_borderPortraitTargetX','_svBattlerSprite','battleUIOffsetY','updateJump','Game_Action_itemHit','battlerShadowScaleY','updateOnceParallelInterpreters','battleCommandIcon','displayActionResults','processPostBattleCommonEvents','options','Sprite_Battler_isMoving','BattleManager_onEscapeSuccess','ActSeq_Horror_GlitchRemove','isAnyoneFloating','initVisibility','left','updateScale','updateMain','BattlebackScale','isFriendly','createBattleField','ActorOffsetX','drawGauge','targetObjects','_drawTextBody','launchBattle','drawSingleSkillCost','onEncounter','Scene_Battle_onEnemyOk','battleAnimation','Sprite_Battler_damageOffsetY','performActionMotions','ActSeq_Movement_Jump','start','loadSvEnemy','Game_Action_isForDeadFriend','isForAliveFriendBattleCore','equipSlots','createDamageContainer','updateAttachmentSprites','Spriteset_Battle_update','isHiddenSkill','wtypeId','placeActorName','faceWidth','forceEscapeSprite','processOk','performCollapse','updateCollapse','damageOffsetX','getBattlerFromKey','isMagical','getNextSubjectFromPool','slice','process_VisuMZ_BattleCore_Notetags','numRepeats','Game_Action_testApply','isBypassDamageCap','HalfActions','setSvBattlerSprite','inputting','Sprite_Actor_updateBitmap','stateRate','message2','_appeared','Index','ActSeq_Grid_MoveTargetsInDirection','MpGaugeOffsetY','addSingleSkillCommands','isTpbMainPhase','_buttonKey','isUndecided','\x5cI[%1]%2','VarianceFormulaJS','hasSkill','turnOrderChangeOTB','totalDmgFmt','AutoBattleCancel','stop','makeActionListAutoAttack','nextActiveWeaponSlot','jsCritRateAsUser','battlerSmoothImage','itemPadding','ActSeq_Camera_Offset','RequiresDefeat','Window_BattleActor_processTouch','displayBuffs','removeCurrentAction','removeImmortal','BoostPoints','createStateIconSprite','ActSeq_ChangeSkew','_angleRevertOnFinish','portraitType','alterBreakShield','regenerateAllBattleCore','customDamageFormula','attackStates','gainBravePoints','makeActionOrders','Enable','_forcing','clearBattlerMotionTrailData','setBattleCameraPoint','updateBattlerContainer','FlinchDistanceY','right','PrioritySortActive','declareGlobalVariables','Game_Action_clear','BattleManager_cancelActorInput','MUSIC','ActSeq_Cutin_AddVisualCutinEffect','setBattleImpactTimeScale','BattleManager_isTpbMainPhase','svActorHorzCells','BattleManager_abort','isBattlerTargeted','ActSeq_Grid_AddPassiveStatesToNode','ENEMY_OFFSET_Y','becomeSTBExploited','guardMpLifeSteal','XPActorDefaultHeight','BattleLogRectJS','globalAlpha','ActSeq_Grid_RemoveTriggerFromNode','createHelpWindowBattleCore','enemyId','isAnyoneInjectAnimating','getItemDamageAmountTextBattleCore','executeDamage','hasSvBattler','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','PopupPosition','_homeWholeDuration','ShowPortraits','setBattleCameraOffset','ShowFailure','isCommandEnabled','arRedRate','updateKeyboardKeys','%1StartTurnJS','visualCutinPortraitIndex','cancelButtonText','DistanceY','updateCommandNameWindow','%1StartBattleJS','COBWEB','FrontViewSelect','isOTB','softDamageCap','_opacityEasing','nameY','updateTargetPosition','abs','isMeleeSingleTargetAction','removeAnimation','_targets','performTpbActiveCheckSwitch','Window_SkillList_maxCols','ParseSkillNotetags','StartTurnShow','getWtypeIdWithName','ActionEffect','HelpEscape','CTB','extendTroopMembers','drawLineText','isFloating','StyleON','allowRandomSpeed','usePremadeActionSequence','hasBeenDefeatedBefore','maxCommands','PreEndBattleJS','isForNotUser','skillWindowRect','guardHpLifeSteal','isStateResist','createEnemies','_enemyNameContainer','ForceExploiter','invokeMagicReflection','isFastForward','selectPreviousCommand','floatBattler','_phase','filters','skillItemWindowRectBorderStyle','stypeId','resetFontSettings','switchToWeaponType','counterAttack','itemLineRect','StatusWindowAttachmentBackOffsetY','Game_Battler_regenerateAll','createAutoBattleWindow','_frontAttachmentSprite','32fFbxCx','actionSplicePoint','startMotion','spriteId','lukEffectRate','Sprite_Enemy_initVisibility','onHomeMoveEnd','CheckVisibleSwitchNotetags','makeTargetSprites','getConfigValue','_actor','ParseItemNotetags','battleAngle','shadow','battleUIOffsetX','AutoBattle','_borderPortraitSprite','ShowReflect','setLetter','shouldHideBattleEndPopups','PostDamage%1JS','battlerSprites','checkShowHideSwitchNotetags','CoreEngine','startDamagePopup','attack','Game_Battler_onTurnEnd','isCancelled','setupFont','turnCount','Spriteset_Battle_updateActors','isBorderStylePortraitShown','BattleManager_startBattle','Game_BattlerBase_canGuard','CmdTextAutoBattle','PreDamage%1JS','_growX','statusWindowRectBorderStyle','hidden','TpbGaugeOffsetY','hitFlat','iconHeight','evaded','createAnimationSprite','BackColor','base','PostApplyAsUserJS','_waitMode','setupBattleCore','clamp','removeHorrorEffect','applyResultSwitches','performRecovery','isCancelLifeSteal','setupZoomBlurImpactFilter','gainFullActionsPTB','subject','_lineHeight','Opacity','VisuMZ_3_SideviewBattleUI','getSkillTypes','getLastPluginCommandInterpreter','_showWeapon','softDamageCapRate','createString','ActSeq_Inject_AnimationPauseResume','itemTargetCandidates','_shadowScaleY','getDualWieldTimes','560094Myzbou','PostDamageAsTargetJS','createWeather','Sprite_Actor_initMembers','ActSeq_Inject_AnimationEnd','_motionType','abort','isSkewing','textWidth','HitFlat','createPartyCommandWindow','forActor','actions','PerformAction','angleDuration','WIDTH','position','waitForAnimation','updateHomeMove','VisuMZ_4_CombatLog','isEscapeCommandEnabled','StatusWindowAttachmentBack','ArRedFlat','createMultiTargetWindow','isDTB','EscapeSuccess','addBuff','Sprite_StateIcon_updateFrame','_cursorArea','ExtraSettings','PreRegenerateJS','ActSeq_Impact_ColorBreak','refreshStatusWindow','_battleCoreBattleStartEvent','needsActorInputCancel','CmdTextAlign','drawItemStatus','DamageRate','comboWindowOffsetX','parallaxHue','BattleEndEvent','USER-DEFINED\x203','ActSeq_BattleLog_Clear','finalizeScale','IconStypeMagic','_currentActor','Scene_Battle_logWindowRect','startJump','ActSeq_Motion_WaitMotionFrame','parallaxHueEnemyModifier','processBattleCoreJS','WaitForCamera','Window_Options_statusText','negativeLifeSteal','_action','updateStateSpriteBattleCore','_createClientArea','isPlaying','getDefeatedEnemies','processAbort','HomePosJS','removeOnceParallelInterpreter','FollowTurn','Scene_Battle_createEnemyWindow','hpRate','lifeSteaItem','setHelpWindow','ANTI_TINT_UI','ActSeq_Movement_WaitForFloat','ActSeq_Mechanics_HpMpTp','ActSeq_Movement_Skew','push','meetsSelectFrontviewActorConditions','setCustomDamageFormula','BattleManager_endAction_ComboWindow','playBattleVoice','_shadowScaleX','_helpWindow','itemEffectRecoverMp','getItemDamageAmountLabelBattleCore','ActSeq_Mechanics_EmulateSkillEffect','makeDeepCopy','NameFontSize','ActSeq_Set_FinishAction','Sprite_Battleback_adjustPosition','StartTurnWait','actorCommandAutoBattle','CommandAddOptions','meetsUsableItemConditions','ActSeq_Movement_Opacity','refreshActorPortrait','ActSeq_Grid_TraverseToNode','_battleCoreForcedElements','endAnimation','VariableHeal','onOpacityEnd','_indent','_commonEventKey','findIndex','_damageCounterWindow','onBattleEnd','performWeaponAnimation','Game_Battler_onBattleEnd','onEnemyCancel','DualWield','isGrowing','moveBattlerToPoint','Window_BattleStatus_initialize','increaseHits','isInputting','AttackAnimation','setBattleAngle','updateDuration','autoSelectLastSelected','ActSeqImpact','DistanceAdjust','onBattleEndBattleCore','hasStaticSvBattler','atbInterrupt','createPartyCommandWindowBattleCore','_jumpWholeDuration','setupDamagePopup','ActSeq_Grid_PullToTargetNode','setMoveEasingType','ActSeq_Weapon_SetActiveWeapon','Sprite_Weapon_loadBitmap','Sprite_Battler_damageOffsetX','hue','performAttackSlot','isForRandomBattleCore','ActSeq_Mechanics_AddBuffDebuff','canAttack','isSubjectValidForAnyoneSelect','addMeleeReturnActionSet','WaitForSpin','_baseLineStack','Actor-%1-%2','_ptbActionCost','Game_BattlerBase_meetsUsableItemConditions','_forcedBattleLayout','refreshBattlerMotions','setupChild','_playTestFastMode','_effectDuration','hitRate','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','Game_Battler_performDamage','startWeaponAnimation','Game_Enemy_setup','close','zoomDuration','createStateSprite','scale','changeBattlerOpacity','WaitForMovement','_targetSkewY','updateBitmap','process_VisuMZ_BattleCore_CommonEventKeys','autoMeleeMultiTargetActionSet','applyTargetFilters','CommonEventID','alive\x20battlers\x20not\x20target','JS\x20%1START\x20TURN','ShowWeapon','isCustomBattleScope','checkShowHideSkillNotetags','Users','isAnyoneSpinning','Window_BattleStatus_drawItemImage','min','_createCursorArea','attackAnimationIdSlot','_createDamageContainer','createHpGaugeSprite','_multipliers','Game_Battler_onBattleStart','find','Game_Interpreter_updateWaitMode','troop','helpAreaHeight','_eventId','_customDamageFormula','70472bCQRQS','NameAlwaysSelectOnly','updateStyleOpacity','_jumpHeight','ActSeq_Mechanics_EmulateAttackEffect','StepDistanceX','attackAnimationId1','anchorY','DistanceX','getDragonbones','message1','special','removedBuffs','getSkillIdWithName','helpWindowRect','context','anchorX','setHelpWindowItem','freezeMotion','resetNameTempVisibility','+%1\x20MP','requestRefresh','lineRect','skill','ActionSkillMsg2','notFocusValid','TimeScale','item','Sprite_Actor_setBattler','CriticalHitRate','FlinchDuration','_performActionEnd','addChild','drawSkillCost','JS\x20%1END\x20TURN','Game_Action_applyGlobal','BattleManager_startTurn','Window_BattleLog_performActionEnd','ParseAllNotetags','addFightCommand','Game_Troop_setup','_lastHpDamage','skills','_growWholeDuration','changeAtbChargeTime','getItemDamageAmountTextOriginal','icons','ApplyImmortal','Game_Action_isForRandom','itemEffectGainTp','itemEffectAddNormalState','canUseItemCommand','EscapeSuccessJS','isOptionsCommandEnabled','Sprite_Enemy_update','GUARD','partyCommandWindowRectDefaultStyle','requestDragonbonesAnimation','MpGaugeOffsetX','addAutoBattleCommands','executeHpDamage','addOnceParallelInterpreter','_bypass_applyBattleCoreHitRateJS','PostEndBattleJS','CommandWidth','equips','isEffecting','_frame','_lastAction','battleSys','removeActor','svActorVertCells','textAlignment','svBattlerShadowVisible','VisuMZ_3_ActSeqCamera','useDigitGrouping','_defeatedEnemies','Scene_Map_initializeAfter','AllActorsText','isMVAnimation','callNextMethod','Sprite_Battler_updateMain','criticalDmgRate','processTouch','_damageContainer','FlashDuration','numberFontFace','Scene_Battle_createPartyCommandWindow','_damagePopupArray','battleMove','cancel','isForAliveFriend','VisuMZ_1_SkillsStatesCore','addedDebuffs','isCharging','requestAnimation','JS\x20%1END\x20BATTLE','updateEffectsContainer','updateStaticSvBattlerFrames','BattleManager_onEscapeFailure','ShowAddedState','filter','Game_Battler_startTpbTurn','Window_BattleLog_popBaseLine','JS\x20ESCAPE\x20SUCCESS','svBattlerData','setBattleSkew','isCurrentItemEnabled','virtualClick','isGuard','ShakeFlinchDuration','getLastHpDamage','compareEnemySprite','clear','BattleCore','_scene','setItem','_updateFilterArea','multiTargetWindowRect','_isBattlerFlipped','displayReflectionPlayBack','processDefeat','removeDamageSprite','onSelectAction','optDisplayTp','updateBorderSprite','skillItemWindowRectMiddle','Scene_Battle_start','514500oxeaTq','setBattlerMotionTrailData','value1','commandOptions','addState','width','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','Game_Battler_performEvasion','ActSeq_Mechanics_PtbAlterCost','missile','_targetDamage','actorId','_tpbChargeTime','ActSeq_Mechanics_PtbFullHalfAction','openBattleActorWindow','isForAnyoneFocusOpponents','ShowEnemyGauge','process_VisuMZ_BattleCore_CreateRegExp','callOptions','waitForMovement','_iconIndex','undecided','loadWindowskin','center','isForAnyoneFocusFriends','onGrowEnd','toUpperCase','jsCritRateAsTarget','canInput','isTpbCharged','compareBattlerSprites','not\x20focus','showHelpWindow','BattleManager_initMembers','BattleManager_endAction','performAttack','WaitForFloat','centerFrontViewSprite','updateNameTempVisibility','isForFriend','_mainSprite','removeBattleBalloon','Scene_Battle_startActorSelection','BTB','animationWait','ParseStateNotetags','BattleManager_updatePhase','mainSpriteScaleY','skewBattler','sideview_ui','_cursorSprite','XPActorCommandLines','autoBattleUseSkills','onBattleStart','_lastActor','drawTextTopAligned','ComboWindow_DrawJS','Class-%1-%2','ActSeq_Mechanics_BoostPointsStoreData','process_VisuMZ_BattleCore_jsFunctions','Game_Action_isForAliveFriend','ParseArmorNotetags','updateEffectContainers','setTroopPage','All\x20Enemies','attackSkillId','ActSeq_Mechanics_Multipliers','GetActionSequenceSpecialTargetWithFlags','EXCLAMATION','startVisualCutin','smoothness','active','_fauxAnimationSprites','makeTargetSelectionMoreVisible','setupCriticalEffect','ActSeq_Animation_AttackAnimation2','autoBattleStart','removedStateObjects','startIcon','NewPopupBottom','isAnyoneChangingOpacity','windowAreaHeight','ActSeq_Mechanics_AnalyzeWeakness','ActSeq_Movement_WaitForJump','Turns','USER-DEFINED\x204','Scene_ItemBase_applyItem','Game_Interpreter_terminate','blockWidth','statusTextAutoBattleStyle','alterType','toUseBoostPoints','rec','_reflectionTarget','clearBattleCoreData','updateStart','Scene_Battle_helpWindowRect','_immortal','playOnceParallelTroopPage','deselect','ShowHide','isOnCurrentMap','horzCells','findTargetSprite','extraPositionX','displayCounter','isChanting','addDamageSprite','Direction','ActSeq_Camera_FocusPoint','HelpFight','Scene_Battle_startPartyCommandSelection','portrait','registerDefeatedEnemy','shift','VisuMZ_3_ActSeqImpact','displayMpDamage','_battlerKeyCache','VisuMZ_3_ActiveChainSkills','isBattlerFlipped','collapse','MotionSpeed','round','initMembers','_lastPluginCommandInterpreter','members','_growDuration','PostStartBattleJS','CheckMapBattleEventValid','Game_BattlerBase_eraseState','USER-DEFINED\x202','arRedFlat','_list','_targetGrowY','battlerKey','debuffAdd','VisualCutinEffect','isMeleeMultiTargetAction','_battleCoreBattleResumeAfter','addText','expTotal','_commandNameWindow','SkillID','Game_Action_apply','resetResultSwitches','ActSeq_Mechanics_StateTurnsChangeBy','setActionState','ActSeq_Mechanics_OtbOrder','isAnyoneSkewing','_surprise','ATTACK','createMainSprite','alive\x20friends','SETTINGS','DefaultSoftScaler','Window_BattleLog_displayFailure','onDisabledPartyCommandSelection','isCustomActionSequence','FlashColor','statusText','Window_BattleLog_performMagicEvasion','drawBackgroundRect','ActionStart','ActionEndUpdate','ActSeq_Motion_MotionType','_namesCount','AddOption','updateBattlebackBitmap1','JS\x20%1APPLY\x20%2','createChildSprite','FaceDirection','command119','addLoadListener','drawItemImage','flipVisualCutinVert','Parse_Notetags_Targets','Game_Party_addActor','mhp','onSkewEnd','ActSeq_Movement_FaceTarget','flashDuration','drawEnemyName','VisuMZ_1_MainMenuCore','_interpreter','addSingleSkillCommand','ActSeq_Motion_ClearFreezeFrame','WaitForExit','autoMeleeSingleTargetActionSet','auto','addOptionsCommand','setValue','makeTargets','command236','border','cancelLifeSteal','_effectsContainer','updateSpin','createBattleBalloon','isTeamBased','_displayBattleCoreTransitionErrorMsg','Game_Battler_clearMotion','fontFace','PreStartActionJS','BattleSystemBTB','statusWindowRect','changeCtbCastTime','_hue','singleSkill','commandNameWindowDrawText','HelpOptions','applyGlobal','HEART','opacityStart','getHardDamageCap','WaitForJump','battlelog','addImmortal','_tpbSceneChangeCacheActor','_homeX','ActSeq_Mechanics_EtbAction','parent','VisuMZ_3_ActSeqProjectiles','innerWidth','currentValue','PreDamageAsTargetJS','StatusWindowAttachmentFrontOffsetY','Scene_QuickLoad','emerge','freezeTime','index','inBattle','isForOneBattleCore','putActiveBattlerOnTop','2667687dQuMPQ','PreEndActionJS','maxLines','_baseX','_floatDuration','performDamage','battleEffect','applyArmorModifiers','ActSeq_Animation_ChangeBattlePortrait','parallaxScrollY','isFightCommandEnabled','Game_Action_makeDamageValueDisperse','ActorOffsetY','_windowLayer','focus','turn','VisuMZ_3_BattleAI','StateOverlayOffsetY','canEscape','updateFloat','Window_BattleLog_displayEvasion','createAllWindows','Scene_Battle_partyCommandWindowRect','applyBattleCoreHitRateJS','format','isPartyTpbInputtable','_requestRefresh','JS\x20%1DAMAGE\x20%2','isEnemy','commandNameWindowDrawBackground','Scene_Options','HITTYPE_MAGICAL','Mechanics','onJumpEnd','addAutoBattleCommand','Game_Action_setSkill','damage','_makeCursorAlpha','isBTB','applyAngleChange','process_VisuMZ_BattleCore_TraitObject_Notetags','height','getBattlerKeyTargets','createBattleFieldBattleCore','battlerName','Window_ItemList_maxCols','startPartyCommandSelection','NUM','callOkHandler','createBattleFieldContainer','ActionEnd','tpbActorSwitchConditionsMet','actorCommandSingleSkill','_updateCursorFilterArea','_offsetY','_inputting','addItemCommand','Sprite_SvEnemy','2761XOpNOe','waitForEffect','Scene_Map_updateCallMenu','ActSeq_Mechanics_StateTurnsChangeTo','name','alive\x20friends\x20not\x20target','getEnemyIdWithName','getBattlerKeyTargetReplacement','frontviewSpriteY','performMoveToPoint','clearMotion','displayTpDamage','currentExt','MultiTarget','sortEnemies','_tpbNeedsPartyCommand','anchor','frontview_ui','_jumpMaxHeight','EFFECT_COMMON_EVENT','BattleManager_setup','mpDamage','unshift','performShakeFlinch','updateShadowScale','setFullActionsPTB','BattleManager_selectNextCommand','lastFilename','DigitGrouping','portraitHue','pow','selectNextActor','createMultiTargetWindows','version','WaitForEffect','changePaintOpacity','ActSeqProjectiles','ActSeq_Camera_Clamp','processAnimationRequests','trim','displayReflection','createBorderStylePortraitSprite','visualCutinPortraitFilename','showNormalAnimation','OffsetX','CastPhysical','WaitForAnimation','ActSeq_Mechanics_TextPopup','_target','battleBalloon','performCastAnimation','Sprite_Actor_updateShadow','createKeyJS','skillId','%1Damage%2JS','addBattleGridMoveCommand','CheckActSeqProjectileVersion','_jumpDuration','isItemCommandEnabled','Window_BattleLog_performActionStart','setFrame','_targetOffsetY','ActSeq_DB_DragonbonesTimeScale','ScaleDown','setLastPluginCommandInterpreter','chantStyle','...','_nameTempVisibleDuration','_forActor','displaySubstitute','portraitFlipVert','indexOf','Window_BattleLog_performAction','getSpecificBattlerKeyTarget','autoBattleWindowRect','join','processRefresh','_targetHomeY','Spriteset_Battle_createLowerLayer','PreStartTurnJS','_item','CmdIconAutoBattle','_duration','includes','addSkillTypeCommand','registerCommand','drawTextEx','Sprite_Battler_update','textSizeEx','Game_Action_itemEffectAddNormalState','attackAnimationId2','_drawTextOutline','mainFontSize','StyleOFF','weapons','ActSeq_Mechanics_SwapWeapon','loadPicture','ShowCurrentState','isATB','updateFlip','_visibleDuration','ParseClassNotetags','WindowWidth','setColorTone','partyCommandWindowRectBorderStyle','some','time','visible','Scene_Battle_createCancelButton','delay','wait','CriticalColor','onStaticEnemyBitmapLoad','CriticalHitMultiplier','_commonEventQueue','CreateCutinSettings','createActorCommandWindowBattleCore','isFTB','AUTO\x20BATTLE','commandSymbol','_battleBalloonSprites','makeDamageValue','Scene_Battle_commandEscape','forceSelect','iconWidth','setGuard','CmdIconOptions','ActSeq_Movement_WaitForOpacity','placeTimeGauge','PARTY','endAction','refresh','ReflectAnimation','changeCtbChargeTime','_battlePortrait','_stateIconSprite','recoverAll','StateIconOffsetX','retrieveBattleBalloon','startHomeMove','_active','clearOnceParallelInterpreters','setHome','HP_Rate','isCommonEventReserved','TargetLocation','isHidden','NameOffsetX','createCancelButton','isAtbCastingState','checkExtendTroopCompatibility','setupMotionBlurImpactFilter','ComboWindow','itemEffectAddAttackState','_opacityWholeDuration','extraHeight','isSideButtonLayout','customFontFace','SwitchCritical','animationShouldMirror','isDrain','createCommandVisibleJS','result','ShowMissEvasion','createInnerPortrait','ALL_ENEMIES','boxHeight','isMagicSkill','requestMotion','SceneManager_push','weatherPower','createActors','Scene_Map_launchBattle','allowCollapse','logActionList','createCommandNameWindow','ActSeq_Zoom_Scale','addNewState','addChildAt','Window_ActorCommand_initialize','JS\x20%1REGENERATE','ShowMpDmg','isDuringNonLoopingMotion','replace','silentHomeMove','battleback2Name','Game_Action_isForAll','boxWidth','Game_Action_needsSelection','ActSeq_Mechanics_EnemyEscape','CopyCombatLog','requestBalloon','ActSeq_Impact_ZoomBlurPoint','updateHelp','_updateDuration','showPortraits','Amp','bitmap','makeBattleCommand','BULB','_flinched','createHelpWindow','canGuardBattleCore','_injectAnimationSprite','ConfigManager_makeData','Game_Actor_equips','dimColor1','ActSeq_Animation_GuardAnimation','Game_Action_evalDamageFormula','_currentAngle','setVisibleUI','pause','ActionSkillMsg1','Sprite_Actor_update','attackTimesAdd','EscapeFailureJS','MUSIC\x20NOTE','canAddSkillCommand','isAutoBattleCommandEnabled','Letter','isBattleCoreTargetScope','Scene_Boot_onDatabaseLoaded','_subject','SlotID','CalcActionSpeedJS','ActSeq_Weapon_NextActiveWeapon','disarmLifeSteal','processEscape','%1EndTurnJS','CastAnimation','_enemyMultiTargetWindow','_tempBattler','ActSeq_Motion_PerformAction','isConfused','parseForcedGameTroopSettingsBattleCore','revertTpbCachedActor','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','QUESTION','hpDamageFmt','AntiTintUiElements','parallaxScrollX','removeChildFromUiContainer','alive\x20enemies\x20not\x20user','setupHpGaugeSprite','addSkillCommands','_targetHomeX','_targetFloatHeight','Sprite_Enemy_setBattler','performActionEnd','isAnyProjectilePresent','setupActionSet','alterCost','inputtingAction','addCombatLogCommand','ForceExploited','createDigits','selectLast','actionBattleCoreJS','AutoBattleRect','startBattle','open','frameVisible','cancelHpLifeSteal','negativeHpLifeSteal','preemptive','Scene_Battle_terminate','coreEngineRepositionEnemies','_flashDuration','isIncludedInEnemyWindow','faceRect','getFullActionsPTB','Game_Temp_initialize','isNegativeLifeSteal','applyGuard','PreApply%1JS','ActSeq_Impact_ShockwaveEachTargets','ShowAddedBuff','DisablePartyCmd','resizeWindowBorderStyle','StepDistanceY','gainTp','_makeFontNameText','ActionAnimation','_executedValue','disarmHpLifeSteal','guard','repositionCancelButtonBorderStyle','cancelTargetSelectionVisibility','ALL_ACTORS','performActionStart','Scale','updateWaitMode','ActSeq_BattleLog_AddText','getBattlePortraitOffsetX','SLEEP','CmdIconEscape','alterActionCostPTB','ActSeq_Horror_TVCreate','clearWeaponAnimation','ConvertParams','_totalValue','Scene_Battle_createAllWindows','lifeStealTrait','speed','LOVE','attackMotions','ActSeq_Horror_GlitchCreate','loadSvActor','damageFlat','LifeStealRegExp','_speed','itemLifeStealRate','ActSeq_Movement_MoveToJsPoint','startEnemySelection','_escapeRatio','placeGauge','targetsForOpponents','ActionSequence','requestBattleBalloon','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Sprite_Battler_setBattler','jump','attachSpritesToDistortionSprite','ActSeq_Mechanics_ArmorPenetration','Actions','isAlive','setBlendColor','ShowPortraitsBorderStyle','alphabetic','adjustPosition_ScaleDown','Scene_Battle_selectPreviousCommand','POST-','_flashColor','addChildToBack','updateBorderStyle','_skillIDs','SmoothImage','ActSeq_Mechanics_CtbSpeed','startActorCommandSelection','1625286mMasDC','_regionBattleback1','_weaponImageId','addAnimationSpriteToContainer','reserveCommonEvent','TextColor','front\x20center','WaitCount1','alive\x20friends\x20not\x20user','_partyCommandWindow','_homeY','currentClass','vertCells','resetCounter','helpWindowRectBorderStyle','pattern','_enemyWindow','AS\x20TARGET','_lastEnemy','padding','selectNextCommand','SkillItemMiddleLayout','_colorFilter','_actionInputIndex','motionType','checkSceneBattleTransitionable','QoL','angle','initBattleCore','_opacityDuration','_forcedBattlers','calcWindowHeight','applyFreezeMotionFrames','autoSelectPriority','ConvertActionSequenceTarget','setupNegativeImpactFilter','_blendColor','Window_BattleLog_displayMpDamage','ActSeq_Movement_FaceDirection','getInputButtonString','addBattleCoreAutoBattleStyleCommand','updateCancel','addAttackCommand','stepFlinch','_armorPenetration','isMoving','isClicked','Sprite_Animation_targetSpritePosition','bitmapWidth','drawItem','startSkew','itemRect','_createEffectsContainer','setupBattlebackBattleCore','ActSeq_Movement_HomeReset','textColor','ShowButton','getNextSubject','gainCurrentActionsETB','gainHalfActionsPTB','EnemyOffsetY','ActSeq_Impact_MotionTrailRemove','weaponImageId','battleFloat','#ffffff','deactivate','updateFrame','waitCount','sliceMax','_battlerContainer','onEnemyOk','update','battleCamera','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','_updateColorFilter','ParseWeaponNotetags','HitRate','magicReflection','_lines','pagedown','checkTpbInputOpen','makeActionList','Window_BattleActor_show','constructor','isCertainHit','description','ANGER','SvWeaponSolo-%1-%2','isSelected','AttachStateOffsetX','_distortionSprite','PostStartActionJS','addGuardCommand','bitmapHeight','MOTIONS','_targetAngle','waitForOpacity','battleCoreTpbMainPhase','ActSeq_Grid_RemovePassiveStatesFromNode','MotionFrameWait','isAnyoneMoving','Game_System_initialize','ActSeq_Element_AddElements','bgType','AnchorY','ChargeRate','opacitySpeed','BG_TYPE','waitForFloat','animationBaseDelay','ACTOR_OFFSET_Y','setup','increaseTotal','ActSeq_Mechanics_EmulateItemEffect','isSTB','performSubstitute','targetActionSet','ActSeq_Animation_ShowAnimationJS','Game_BattlerBase_addNewState','ActSeq_Impact_ShockwaveCenterTargets','_lastRegenFrameCount','random','_backAttachmentSprite','isShownOnBattlePortrait','Damage','process_VisuMZ_BattleCore_BaseTroops','maxBattleMembers','_targetHits','onBattleStartOnceParallels','adjustPosition_ScaleUp','CommandVisible','moveToStartPositionBattleCore','Parse_Notetags_Action','canMove','_colorType','onBattleStartBattleCore','battleback1Name','_commonEventIDs','addBattleCoreAutoBattleStartupCommand','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','_emptyBitmap','All\x20Allies','VoiceLineType','processBorderActor','all\x20actors','save','hpAffected','jsAccuracyAsUser','Sprite_AnimationMV_updatePosition','_weaponSprite','MDF','targetSpritePosition','%1EndBattleJS','commandEscape','VisuMZ_4_BreakShields','SvMotionIdleMass-%1-%2','_homeDuration','isForOne','Reveal','startSpin','FocusY','log','opponentsUnit','isDamagePopupRequested','Scene_Battle_windowAreaHeight','_pattern','JS\x20BATTLE\x20VICTORY','_animationContainer','selectAllActors','BattleDefeatJS','showAnimation','Game_Action_setItem','_targetIndex','adjustPosition_ScaleToFit','Sprite_Gauge_smoothness','setCommonEvent','_battlerName','isAnyoneInjectAniPrepping','StatusWindowSkinFilename','Formula','requestFauxAnimation','BattleLog','PartyCmd','GroupDigits','isAnimationShownOnBattlePortrait','alive\x20opponents\x20not\x20target','Shadow2','_borderPortraitDuration','_motionCount','createBattleUIOffsetY','Window_BattleLog_performEvasion','ActSeq_Animation_PlayAtCoordinate','arPenRate','createAttachedSprites','DEF','eraseState','concat','length','VisuMZ_2_BattleGridSystem','inHomePosition','displayItemMessage','Parse_Notetags_TraitObjects','jumpBattler','Window_BattleLog_performDamage','ActSeq_Mechanics_StbRemoveExcessActions','IconStypeNorm','ActSeq_Grid_AddTriggerToNode','createAttachmentSprites','_actions','basicGaugesY','Window_BattleLog_displayTpDamage','getNextDamagePopup','battleJump','Defeat','performMiss','friendsUnit','SkillItemBorderCols','isJumping','stateMotionIndex','_shadowSprite','itemHit','Post','DamageStyleList','_targetBattlerKey','origin','NameLegacy','animationId','Sprite_Battler_startMove','StateIconOffsetY','Game_Enemy_transform','BattleManager_processAbort','StyleName','battleCameraData','fadeShiftY','ATK','parse','ActSeq_Mechanics_DeathBreak','popBaseLine','WaitForEntrance','showEnemyAttackAnimation','PostRegenerateJS','list','isPartyCommandWindowDisabled','setupRgbSplitImpactFilter','ShowCounter','ext','hpHealingFmt','TextAlign','damageStyle','PostStartTurnJS','svActor','pageup','ActSeq_Mechanics_VariablePopup','canGuard','move','clearDamagePopup','drawItemImageXPStyle','%1-%2','isForDeadFriend','onEscapeSuccess','PointJS','effects','setBattlerBattleCore','SwitchMissEvade','all\x20enemies','ActSeq_Weapon_ClearActiveWeapon','setupBattleback','itemTextAlign','obj','isSceneChanging','clearElementChanges','ActSeq_BattleLog_PopBaseLine','_visualHpGauge_JustDied','onActorOk','alive\x20opponents','VisuMZ_2_BattleSystemCTB','Enemy','BattleManager_processVictory','StatusWindowAttachmentFront','hitsHealFmt','createDamageCounterWindow','createDamageSprite','isPreviousSceneBattleTransitionable','_preemptive','performFlinch','messageSpeed','Game_Actor_makeActionList','_deathStateApplied','ActSeq_Animation_BalloonIconRange','custom','PortraitScaleBorderStyle','Sprite_Enemy_updateBossCollapse','ActSeq_Projectile_Icon','_shakeFlinchDuration','Window_BattleEnemy_hide','clearFreezeMotion','temporaryVisibile','snapForBackground','hitsDmgFmt','isActionSelectionValid','getColor','setEnemyWindowMode','evade','TpGaugeOffsetY','ActSeq_Impact_Oversaturate','createShadowSprite','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','DefaultHardCap','displayChangedStates','ActSeq_BattleLog_DisplayAction','startFloat','prototype','Scene_Battle_skillWindowRect','StatusWindowAttachmentBackOffsetX','ActSeq_Mechanics_EmulateGuardEffect','ActSeq_Skew_WaitForSkew','updatePositionBattleCore','applySoftDamageCap','ActSeq_Mechanics_BoostPointsChange','checkAutoCustomActionSequenceNotetagEffect','Frame','updateBattlebackBitmap','HpGaugeOffsetX','Game_Temp_requestBalloon','isSpinning','OffsetAdjust','isCTB','ActSeq_Animation_SkillAnimation','BravePoints','MessageWait','Rate','callUpdateHelp','ScaleX','flashColor','displayMiss','escape','onDatabaseLoaded','portraitFlipHorz','ActSeq_Element_Clear','code','isSpriteVS8dir','Scene_Battle_createAllWindows_ComboWindow','updateLastTarget','setBattler','Window_BattleLog_displayActionResults','shouldDisperseDamage','isAnyBattleBalloonPlaying','DestinationJS','process_VisuMZ_BattleCore_PluginParams','displayType','Targets','validTargets','_animationCount','ActSeq_Angle_WaitForAngle','svAnchorX','removeChild','setText','Scene_Battle_updateBattleProcess','canSingleOrMultipleSelect','ActSeq_Mechanics_OnceParallel','addedStateObjects','DigitGroupingDamageSprites','createAnimationContainer','createUIContainer','MaxLines','onMoveEnd','physical','applyVariance','cancelActorInput','isETB','victory','_hpGaugeSprite','setLastBattleSkill','isVisualHpGaugeDisplayed','_enemyID','SyncBuffExpire','playReflection','_stypeIDs','Scene_Battle_startActorCommandSelection','Game_Battler_performMiss','ActSeq_Projectile_Picture','updateMotionCount','ARRAYEVAL','createEnemyWindow','setBackgroundType','_doubleTouch','DefaultStyle','minimumHits','ActionCount','_itemWindow','drawItemStyleIcon','DTB','_executeHpDamage','_homeEasing','ActSeq_Mechanics_WaitForEffect','jsAccuracy','Game_BattlerBase_isStateResist','freezeFrame','regionId','_targetGrowX','drawText','Game_Interpreter_PluginCommand','Window_BattleLog_performCounter','Window_BattleLog_performReflection','motionIdle','AnimationID','prepare','ActSeq_Movement_HomeMoveBy','CalcEscapeRatioJS','minimumStayDuration','dataId','commandNameWindowCenter','ANGLE','checkSubstitute','updateStateSprite','statusWindowRectXPStyle','clearForcedGameTroopSettingsBattleCore','adjustPosition_1for1','VariableDmg','setActiveWeaponSlot','isPhysical','displayFailure','updateEvent','stepForward','_cache','commandAutoBattle','dead\x20opponents','5nbUyDf','SceneManager_isSceneChanging','StateOverlayOffsetX','Game_Action_setAttack','applyBattleCoreJS','updateUiContainerPosition','mainSpriteHeight','VisuMZ_3_BoostAction','criticalDmgFlat','AutoMeleeAoE','Wave','_enemySprites','battleCommandName','okTargetSelectionVisibility','displayHpDamage','makeData','AllowRandomSpeed','NextTurn','_animation','loadBattleback2','LIGHTBULB','hpDamage','ActSeq_Element_ForceElements','CmdStyle','pointY','all\x20targets','battleSpin','SkillsStatesCore','_endingBattle','ActSeq_Mechanics_CustomDmgFormula','damageText','setAttack','updateBattleBalloons','onEscapeFailure','isDeathStateAffected','PreApplyJS','ARRAYFUNC','Game_Action_setGuard','PostEndTurnJS','Window_BattleLog_performCollapse','Linear','ActSeq_BattleLog_Refresh','getBattlePortraitOffsetY','Window_BattleLog_displayMiss','updateBattlebackBitmap2','fight','DisplayAction','_battleCoreNoElement','_battleBalloonQueue','updateShakeFlinch','tone','initBattlePortrait','_actorSprites','startInput','Game_BattlerBase_initMembers','clearFreezeMotionForWeapons','ActSeq_Mechanics_AtbGauge','_enemyWindowMode','mmp','Window_BattleLog_pushBaseLine','sleep','filterArea','Sprite_Actor_moveToStartPosition','Game_BattlerBase_refresh','match','EnemyOffsetX','Game_Map_battleback2Name','ActSeq_Impact_MotionTrailCreate','ActSeq_Target_RandTarget','bind','battleLayoutStyle','battleInjectPrep','jsOneForOne','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','513JAunwQ','_targetOpacity','updateForceAction','children','_freezeMotionData','ActSeq_Mechanics_Immortal','_angleEasing','_forcedHomeY','isTickBased','_growEasing','gainStoredBoostPoints','windowskin','string','commandName','ElementStatusCore','stopInjectAnimation','destroyDamageSprite','targetsForFriends','_flipScaleX','uiInputPosition','updateShadowVisibility','tpbCommandFight','executeMpDamage','_motion','Scene_Battle_onEnemyCancel','removeBuffsAuto','createEnemyNames','_createCursorSprite','1:1','prepareBorderActor','ActSeq_Movement_Spin','Window_BattleLog_displayCritical','HpGauge','battleEnd','playCancel','makeActions','alive\x20actors','Window_BattleLog_displayCurrentState','Strength','SWEAT','damageCounterWindowRect','currentAction','iconText','CounterPlayback','BattleManager_makeActionOrders','Window_BattleLog_refresh','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','commandStyle','SKILLS','isAlwaysVisible','drawItemStatusXPStyle','VisuMZ_1_ElementStatusCore','selectedBattlers','Actor','performLifeSteal','Duration','isDisplayEmergedEnemies','innerHeight','ActSeq_Grid_AnimationIDAtNode','isActiveTpb','updateActors','setupShockwaveImpactFilter','dead\x20enemies','AGI','Sprite_Battler_initMembers','PortraitScale','compatibilityVisible','setBattlerFlip','command3011','GRID\x20MOVE','_angleWholeDuration','isItem','Buffs','addGeneralOptions','ShowFacesListStyle','max','_offsetX','ActSeq_Movement_HomeMoveToJsPoint','Window_BattleLog_clear','_canLose','traitObjects','mainSprite','VisuMZ_2_BattleSystemPTB','ForceRandom','WaitForSkew','damageRate','ActSeq_Movement_FaceJsPoint','command339','closeBattleActorWindow','Window_BattleEnemy_initialize','isGuardLifeSteal','updatePadding','return\x200','Scene_Battle_createActorCommandWindow','Game_Map_setupBattleback','allBattleMembers','hitType','NameAlwaysHidden','noSimilarSTypes','setupBattleCoreData','drawComboText','ActSeq_Camera_FocusTarget','isSideView','makeAutoBattleActions','displayAction','offsetX','updateSkew','EndBattlePopups','isAffectedByBreakShield','default','VisuMZ_3_FrontviewBattleUI','sort','svBattlerAnchorX','EasingType','CurrentTurn','Sprite_Battler_updatePosition','battleStatusWindowAnimationContainer','drawItemBackground','float','_skewWholeDuration','isNonSubmenuCancel','split','Scene_Battle_onActorCancel','VisuMZ_2_BattleSystemSTB','Style','updateOpacity','Game_Troop_expTotal','createActionSequenceProjectile','AS\x20USER','backColor','battleGrow','clearActiveWeaponSet','updateStatusWindowPosition','formula','WaitForZoom','startAction','abnormal','smooth','emulateActionEffect','map','parameters','FocusX','itemEffectRecoverHp','visualHpGauge','loadBitmap','Exploited','activate','frameCount','updateCallMenu','BattleVictoryJS','COMBATLOG','animation','PostApplyAsTargetJS','PreDamageAsUserJS','processEnemyModeTouchBattleCore','ActSeq_Grid_TeleportToNode','target','performCounter','message4','VisuMZ_3_VisualCutinEffect','performActionEndMembers','WaitForScale','updateCounter','getCommonEventIdWithName','svBattlerName','isSceneBattle','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','evalDamageFormulaBattleCore','_battleField','requestMotionRefresh','CmdIconFight','_targetSkewX','Destination','ChangeOrderBy','Window_BattleLog_performRecovery','applyData','States','moveBattlerHomeToPoint','swapEnemyIDs','isDead','HelpAutoBattle','isSkill','createLowerLayer','autoSelect','battleSpriteSkew','process_VisuMZ_BattleCore_DamageStyles','TpGaugeOffsetX','Item-%1-%2','updateShadow','show','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','ActSeq_BattleVoice_PlayCommonLine','blt','ActSeq_Mechanics_StbExtraAction','getStypeIdWithName','opacity','makeTargetsBattleCore','isTriggered','Window_BattleEnemy_show','_battleLayoutStyle','VisuMZ_2_DragonbonesUnion','BattleSystemSTB','ACTOR_OFFSET_X','moveBattlerDistance','wholeActionSet','checkShowHideBattleNotetags','ConfigManager_applyData','waitForNewLine','updateSelectionEffect','stepBack','_statusWindow','Scene_Battle_stop','maxCols','Name','hide','Sprite_Enemy_updateStateSprite','setHue','setHalfActionsPTB','Spriteset_Battle_createBattleField','HpGaugeOffsetY','isAppeared','updateAttachedSprites','mpHealingFmt','loadBattleback1','ActSeq_Mechanics_DamagePopup','Setting','BattleManager_startAction','battleZoom','NameAttachStateIcon','expRate','parallaxScrollYinvertEnemy','3284956vSffpZ','DamageStyles','CriticalHitFlat','SHOW_BUTTON','Game_Action_makeTargets','isSkillItemWindowsMiddle','PostEndActionJS','startTpbTurn','guardLifeSteal','VisuMZ_2_BattleSystemBTB','evalDamageFormula','JS\x20%1START\x20BATTLE','VariableID','displayCurrentState','createDistortionSprite','BARE\x20HANDS','call','ActSeq_Horror_NoiseRemove','createJS','Settings','loadSystem','setBattlerFacePoint','ShowRemovedState','_cacheTextWidth','invokeAction','alignBattleCoreDamageSprite','ActSeq_Animation_AttackAnimation','Targets1','substitute','updateVisibility','statusWindowRectDefaultStyle','fontSize','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','ActSeq_Grid_AnimationJsAtNode','walk','_weather','JS\x20%1START\x20ACTION','_floatWholeDuration','isGuardWaiting','ActSeq_Impact_Desaturate','Sprite_Enemy_createStateIconSprite','AnchorX','missed','encounterList','CheckSkillCommandShowSwitches','fillRect','resetTextColor','dead','battleDisplayText','onEncounterBattleCore','isLearnedSkill','portraitFilename','VisuMZ_2_WeaponSwapSystem','isForOpponent','adjustFlippedBattlefield','offsetY','Game_Action_executeDamage','canUse','finishActorInput','ceil','isRightInputMode','_preBattleCommonEvent','ActiveTpbOptionsMessage','toLowerCase','weatherType','addShowHpGaugeCommand','die','ActSeq_Cutin_WaitForEntrance','ActSeq_Mechanics_ActiveChainInputDisable','createTroopNote','processRandomizedData','createEffectActionSet','createSeparateDamagePopups','makeSpeed','_logWindow','Game_Action_numRepeats','selectNextCommandTpb','updateShadowBattleCore','PopupDuration','_svBattlerData','MAXHP','extraPositionScaledY','ActSeq_Impact_ZoomBlurTargetCenter','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','setSubject','_enemyIDs','moveToStartPosition','disarmMpLifeSteal','addWeaponSwapCommand','WaitComplete','text','ShowPopup','VisuMZ_3_BattleVoices','ShakeFlinchPower','_shakeFlinchPower','Game_Action_isForFriend','createTargetsJS','ItemID','PreStartBattleJS','process_VisuMZ_BattleCore_Action_Notetags','%1EndActionJS','makeCommandList','VisuMZ_2_BattleSystemETB','isBattleRefreshRequested','getItemDamageAmountLabelOriginal','_text','#%1','ActSeq_Zoom_Reset'];_0x4cda=function(){return _0x3d5c6d;};return _0x4cda();}VisuMZ[_0x588453(0x39a)][_0x588453(0x773)]=Scene_Battle['prototype']['createAllWindows'],Scene_Battle[_0x588453(0x755)][_0x588453(0x4a6)]=function(){const _0x36f0bc=_0x588453;this[_0x36f0bc(0x736)](),VisuMZ[_0x36f0bc(0x39a)]['Scene_Battle_createAllWindows_ComboWindow'][_0x36f0bc(0x90a)](this);},Scene_Battle[_0x588453(0x755)]['createDamageCounterWindow']=function(){const _0x5f2fb8=_0x588453;if(!Window_DamageCounter[_0x5f2fb8(0x441)][_0x5f2fb8(0xaea)])return;const _0x3686e2=this[_0x5f2fb8(0x83b)](),_0x48b341=new Window_DamageCounter(_0x3686e2);this[_0x5f2fb8(0xf7)](_0x48b341),this['_damageCounterWindow']=_0x48b341;},Scene_Battle[_0x588453(0x755)][_0x588453(0x83b)]=function(){const _0x4f09b7=_0x588453;if(VisuMZ[_0x4f09b7(0x39a)]['Settings']['ComboWindow']['ComboWindow_RectJS'])return VisuMZ[_0x4f09b7(0x39a)][_0x4f09b7(0x90d)]['ComboWindow'][_0x4f09b7(0x9b5)][_0x4f09b7(0x90a)](this);const _0x4cf2cf=Math[_0x4f09b7(0x935)](Graphics['width']/0x4),_0x2b7c43=this[_0x4f09b7(0x63d)](0x2,!![]),_0x2a3b45=0x0+this[_0x4f09b7(0x298)](),_0x5adac4=Math['round'](Graphics[_0x4f09b7(0x571)]*0x1/0x3)+this[_0x4f09b7(0xae6)]();return new Rectangle(_0x2a3b45,_0x5adac4,_0x4cf2cf,_0x2b7c43);},Scene_Battle[_0x588453(0x755)][_0x588453(0x298)]=function(){const _0x5712c0=_0x588453;return Window_DamageCounter[_0x5712c0(0x441)]['positionOffsetX'];},Scene_Battle['prototype'][_0x588453(0xae6)]=function(){return Window_DamageCounter['SETTINGS']['positionOffsetY'];},Window_DamageCounter[_0x588453(0x755)][_0x588453(0x665)]=function(){const _0x403fe5=_0x588453;Window_Base['prototype'][_0x403fe5(0x665)][_0x403fe5(0x90a)](this),this['updateCounter'](),this[_0x403fe5(0x890)]();},Window_DamageCounter['prototype'][_0x588453(0x8b5)]=function(){const _0x27e8f3=_0x588453;if(this['_updateDuration']<=0x0)return;const _0x41db3f=this[_0x27e8f3(0x58d)];this[_0x27e8f3(0xaae)]=this[_0x27e8f3(0x69d)],this[_0x27e8f3(0xf4)]=(this[_0x27e8f3(0xf4)]*(_0x41db3f-0x1)+this[_0x27e8f3(0x3b2)])/_0x41db3f,this['_updateDuration']--,this[_0x27e8f3(0x58d)]<=0x0&&(this[_0x27e8f3(0xaae)]=this['_targetHits'],this[_0x27e8f3(0xf4)]=this['_targetDamage']),this[_0x27e8f3(0x54e)]();},Window_DamageCounter[_0x588453(0x755)]['updateOpacity']=function(){const _0x51da90=_0x588453,_0x5579f6=Window_DamageCounter['SETTINGS'],_0x137bdd=this[_0x51da90(0xa40)](),_0x5eacd3=_0x5579f6[_0x51da90(0x688)]||0x1;if(_0x137bdd&&this[_0x51da90(0xacc)]<0xff)this['contentsOpacity']+=_0x5eacd3;else!_0x137bdd&&this[_0x51da90(0xacc)]>0x0&&(this[_0x51da90(0xacc)]-=_0x5eacd3,this['x']+=_0x5579f6['fadeShiftX']||0x0,this['y']+=_0x5579f6[_0x51da90(0x707)]||0x0);},Window_DamageCounter[_0x588453(0x755)][_0x588453(0xa40)]=function(){const _0x28b678=_0x588453,_0x446423=Window_DamageCounter[_0x28b678(0x441)];if(this[_0x28b678(0x69d)]>=_0x446423['minimumHits'])return!![];if(this['_visibleDuration']-->0x0)return!![];return![];},VisuMZ[_0x588453(0x39a)][_0x588453(0x9bd)]=Game_Action[_0x588453(0x755)][_0x588453(0x364)],Game_Action[_0x588453(0x755)][_0x588453(0x364)]=function(_0x219dfe,_0x2dcb65){const _0x5bd502=_0x588453;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x2dcb65),VisuMZ[_0x5bd502(0x39a)]['Game_Action_executeHpDamage_ComboWindow'][_0x5bd502(0x90a)](this,_0x219dfe,_0x2dcb65);},VisuMZ[_0x588453(0x39a)][_0x588453(0x2bc)]=BattleManager[_0x588453(0x54d)],BattleManager[_0x588453(0x54d)]=function(){$comboWindowReset(),VisuMZ['BattleCore']['BattleManager_endAction_ComboWindow']['call'](this);},Window_DamageCounter[_0x588453(0x755)][_0x588453(0x54e)]=function(){const _0x5b3889=_0x588453;this['contents'][_0x5b3889(0x399)](),this[_0x5b3889(0x877)](),this['x']=this[_0x5b3889(0xde)],this['y']=this['_targetY'];},Window_DamageCounter[_0x588453(0x755)]['textAlignment']=function(){const _0x28ad14=_0x588453,_0x4a6416=Window_DamageCounter['SETTINGS'];return _0x4a6416['textAlign']||_0x28ad14(0x175);},Window_DamageCounter[_0x588453(0x755)][_0x588453(0xa7f)]=function(){const _0xd2de0a=_0x588453,_0x3c8487=Window_DamageCounter[_0xd2de0a(0x441)];let _0x1fb038=this[_0xd2de0a(0xf4)]>=0x0?_0x3c8487[_0xd2de0a(0x748)]:_0x3c8487[_0xd2de0a(0x735)];return _0x1fb038['format'](Math['abs'](Math['ceil'](this[_0xd2de0a(0xaae)])));},Window_DamageCounter[_0x588453(0x755)][_0x588453(0x7e7)]=function(){const _0x1ae7df=_0x588453,_0x110cd1=Window_DamageCounter[_0x1ae7df(0x441)];let _0x57cbeb=this[_0x1ae7df(0xf4)]>=0x0?_0x110cd1[_0x1ae7df(0x1b2)]:_0x110cd1['totalHealFmt'];return _0x57cbeb['format'](Math['abs'](Math[_0x1ae7df(0x422)](this[_0x1ae7df(0xf4)])));},Window_DamageCounter[_0x588453(0x755)][_0x588453(0x877)]=function(){const _0x3c2c11=_0x588453;if(VisuMZ[_0x3c2c11(0x39a)][_0x3c2c11(0x90d)][_0x3c2c11(0x563)]['ComboWindow_DrawJS'])return VisuMZ['BattleCore'][_0x3c2c11(0x90d)][_0x3c2c11(0x563)][_0x3c2c11(0x3e0)][_0x3c2c11(0x90a)](this);let _0x3e8709=0x0,_0x5182fa=0x0;const _0x2ad5ff=this[_0x3c2c11(0xa7f)](),_0x3f216c=this['textSizeEx'](_0x2ad5ff);if(this[_0x3c2c11(0x370)]()==='right')_0x3e8709=this['innerWidth']-this[_0x3c2c11(0x1b9)]()-_0x3f216c[_0x3c2c11(0x3ad)];else this[_0x3c2c11(0x370)]()==='center'?_0x3e8709=Math[_0x3c2c11(0x10a)]((this[_0x3c2c11(0x486)]-_0x3f216c[_0x3c2c11(0x3ad)])/0x2):_0x3e8709=this['itemPadding']();this[_0x3c2c11(0x521)](_0x2ad5ff,_0x3e8709,_0x5182fa),_0x5182fa+=Math[_0x3c2c11(0x935)](this[_0x3c2c11(0xaa9)]()*0x2/0x3);const _0x452909=this['damageText'](),_0x2b43e2=this[_0x3c2c11(0x523)](_0x452909);if(this[_0x3c2c11(0x370)]()===_0x3c2c11(0x1d1))_0x3e8709=this[_0x3c2c11(0x486)]-this[_0x3c2c11(0x1b9)]()-_0x2b43e2[_0x3c2c11(0x3ad)];else this[_0x3c2c11(0x370)]()===_0x3c2c11(0x3bf)?_0x3e8709=Math[_0x3c2c11(0x10a)]((this[_0x3c2c11(0x486)]-_0x2b43e2[_0x3c2c11(0x3ad)])/0x2):_0x3e8709=this[_0x3c2c11(0x1b9)]();this['drawTextEx'](_0x452909,_0x3e8709,_0x5182fa);};